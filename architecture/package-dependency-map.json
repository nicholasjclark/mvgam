{
    "s3_classes":  [
                       "array.mvgam",
                       "brmsformula",
                       "construct.mod.smooth.spec",
                       "construct.moi.smooth.spec",
                       "data.frame.mvgam",
                       "default",
                       "formula",
                       "how_to_cite",
                       "jsdgam",
                       "matrix.mod.smooth",
                       "matrix.moi.smooth",
                       "matrix.mvgam",
                       "mvgam",
                       "mvgam_conditional_effects",
                       "mvgam_fevd",
                       "mvgam_forecast",
                       "mvgam_formula",
                       "mvgam_irf",
                       "mvgam_lfo",
                       "mvgam_prefit",
                       "mvgam_residcor",
                       "mvgam_trend",
                       "mvgamstancode",
                       "to.ts",
                       "trend_param"
                   ],
    "s3_methods":  {
                       "fevd":  [
                                    "mvgam"
                                ],
                       "residuals":  [
                                         "mvgam"
                                     ],
                       "loo":  [
                                   "mvgam"
                               ],
                       "mcmc_plot":  [
                                         "mvgam"
                                     ],
                       "irf":  [
                                   "mvgam"
                               ],
                       "as_draws_array":  [
                                              "mvgam"
                                          ],
                       "ppc":  [
                                   "mvgam"
                               ],
                       "get_vcov":  [
                                        "mvgam"
                                    ],
                       "as_draws_df":  [
                                           "mvgam"
                                       ],
                       "variables":  [
                                         "mvgam"
                                     ],
                       "ordinate":  [
                                        "jsdgam"
                                    ],
                       "augment":  [
                                       "mvgam"
                                   ],
                       "get_coef":  [
                                        "mvgam"
                                    ],
                       "is":  [
                                  "trend_param",
                                  "mvgam_trend"
                              ],
                       "pp_check":  [
                                        "mvgam"
                                    ],
                       "get_data":  [
                                        "mvgam",
                                        "mvgam_prefit"
                                    ],
                       "add_residuals":  [
                                             "mvgam"
                                         ],
                       "print":  [
                                     "mvgam_conditional_effects",
                                     "how_to_cite",
                                     "mvgam",
                                     "mvgam_prefit",
                                     "mvgamstancode",
                                     "mvgam_formula",
                                     "trend_param",
                                     "mvgam_trend"
                                 ],
                       "find_predictors":  [
                                               "mvgam",
                                               "mvgam_prefit"
                                           ],
                       "as_draws_list":  [
                                             "mvgam"
                                         ],
                       "xts":  [
                                   "to.ts"
                               ],
                       "as_draws_matrix":  [
                                               "mvgam"
                                           ],
                       "as":  [
                                  "data.frame.mvgam",
                                  "matrix.mvgam",
                                  "array.mvgam"
                              ],
                       "plot":  [
                                    "mvgam_conditional_effects",
                                    "mvgam_lfo",
                                    "mvgam_fevd",
                                    "mvgam_irf",
                                    "mvgam_residcor",
                                    "mvgam",
                                    "mvgam_forecast"
                                ],
                       "loo_compare":  [
                                           "mvgam"
                                       ],
                       "c":  [
                                 "trend_param"
                             ],
                       "tidy":  [
                                    "mvgam"
                                ],
                       "pairs":  [
                                     "mvgam"
                                 ],
                       "ensemble":  [
                                        "mvgam_forecast"
                                    ],
                       "conditional_effects":  [
                                                   "mvgam"
                                               ],
                       "smooth":  [
                                      "construct.moi.smooth.spec",
                                      "construct.mod.smooth.spec"
                                  ],
                       "stability":  [
                                         "mvgam"
                                     ],
                       "how_to_cite":  [
                                           "mvgam"
                                       ],
                       "as_draws_rvars":  [
                                              "mvgam"
                                          ],
                       "set_coef":  [
                                        "mvgam"
                                    ],
                       "summary":  [
                                       "mvgam_fevd",
                                       "mvgam_forecast",
                                       "mvgam_irf"
                                   ],
                       "lfo_cv":  [
                                      "mvgam"
                                  ],
                       "get_predict":  [
                                           "mvgam"
                                       ],
                       "as_draws":  [
                                        "mvgam"
                                    ],
                       "residual_cor":  [
                                            "mvgam",
                                            "jsdgam"
                                        ],
                       "Predict":  [
                                       "matrix.moi.smooth",
                                       "matrix.mod.smooth"
                                   ],
                       "get_prior":  [
                                         "default",
                                         "formula",
                                         "brmsformula",
                                         "mvgam_formula"
                                     ],
                       "stancode":  [
                                        "mvgam_formula",
                                        "mvgam",
                                        "mvgam_prefit"
                                    ],
                       "standata":  [
                                        "mvgam_formula"
                                    ]
                   },
    "metadata":  {
                     "external_dependencies":  [
                                                   "bayesplot",
                                                   "brms",
                                                   "dplyr",
                                                   "generics",
                                                   "ggplot2",
                                                   "insight",
                                                   "loo",
                                                   "magrittr",
                                                   "marginaleffects",
                                                   "methods",
                                                   "mgcv",
                                                   "mvnfast",
                                                   "patchwork",
                                                   "posterior",
                                                   "purrr",
                                                   "Rcpp",
                                                   "rlang",
                                                   "rstan",
                                                   "rstantools",
                                                   "tibble"
                                               ],
                     "generated":  "2025-09-10 08:40:26",
                     "commit_hash":  "pending",
                     "cached_files":  56,
                     "version":  "2.0.0",
                     "commit_message":  "pre-commit analysis",
                     "total_functions":  442,
                     "exported_functions":  68,
                     "s3_methods_count":  44,
                     "s3_classes_count":  25,
                     "package_name":  "mvgam",
                     "changed_files":  1,
                     "total_files":  57
                 },
    "function_dependencies":  {
                                  "insert_into_stan_block":  [
                                                                 "append_if_not_null",
                                                                 "apply_response_suffix_to_stanvars",
                                                                 "apply_safe_parameter_replacement",
                                                                 "AR",
                                                                 "calculate_car_time_distances",
                                                                 "CAR",
                                                                 "combine_stanvars",
                                                                 "create_times_trend_matrix",
                                                                 "detect_glm_usage",
                                                                 "eval_silent",
                                                                 "extract_and_rename_stan_blocks",
                                                                 "extract_and_rename_standata_objects",
                                                                 "extract_hierarchical_info",
                                                                 "extract_mapping_arrays",
                                                                 "extract_multivariate_standata",
                                                                 "extract_non_likelihood_from_model_block",
                                                                 "extract_response_names_from_brmsfit",
                                                                 "extract_stan_block_content",
                                                                 "extract_stan_identifiers",
                                                                 "extract_time_series_dimensions",
                                                                 "extract_univariate_standata",
                                                                 "filter_block_content",
                                                                 "filter_renameable_identifiers",
                                                                 "find_stan_block",
                                                                 "format_matrix_for_stan_array",
                                                                 "generate_ar_trend_stanvars",
                                                                 "generate_base_brms_stancode",
                                                                 "generate_base_brms_standata",
                                                                 "generate_car_trend_stanvars",
                                                                 "generate_combined_stancode",
                                                                 "generate_common_trend_data",
                                                                 "generate_factor_model",
                                                                 "generate_hierarchical_correlation_model",
                                                                 "generate_hierarchical_correlation_parameters",
                                                                 "generate_hierarchical_functions",
                                                                 "generate_innovation_model",
                                                                 "generate_matrix_z_multiblock_stanvars",
                                                                 "generate_matrix_z_parameters",
                                                                 "generate_matrix_z_tdata",
                                                                 "generate_obs_trend_mapping",
                                                                 "generate_pw_trend_stanvars",
                                                                 "generate_rw_trend_stanvars",
                                                                 "generate_shared_innovation_stanvars",
                                                                 "generate_times_trend_matrices",
                                                                 "generate_trend_computation_tparameters",
                                                                 "generate_trend_injection_code",
                                                                 "generate_trend_priors_stanvar",
                                                                 "generate_var_trend_stanvars",
                                                                 "generate_zmvn_trend_stanvars",
                                                                 "get_prior",
                                                                 "get_priority",
                                                                 "get_stan_reserved_words",
                                                                 "get_trend_parameter_prior",
                                                                 "inject_trend_into_glm_predictor",
                                                                 "inject_trend_into_linear_predictor",
                                                                 "insert_after_mu_lines_in_model_block",
                                                                 "is_multivariate_brmsfit",
                                                                 "PW",
                                                                 "register_core_trends",
                                                                 "rename_parameters_in_block",
                                                                 "RW",
                                                                 "validate_mapping_arrays",
                                                                 "validate_no_factor_hierarchical",
                                                                 "validate_stan_code",
                                                                 "validate_stan_data_structure",
                                                                 "VAR",
                                                                 "ZMVN"
                                                             ],
                                  "prepare_mvgam_stancode":  [
                                                                 "generate_combined_stancode",
                                                                 "validate_time_series_for_trends"
                                                             ],
                                  "inject_trend_into_glm_predictor":  [
                                                                          "append_if_not_null",
                                                                          "apply_response_suffix_to_stanvars",
                                                                          "apply_safe_parameter_replacement",
                                                                          "AR",
                                                                          "calculate_car_time_distances",
                                                                          "CAR",
                                                                          "combine_stanvars",
                                                                          "create_times_trend_matrix",
                                                                          "detect_glm_usage",
                                                                          "eval_silent",
                                                                          "extract_and_rename_stan_blocks",
                                                                          "extract_and_rename_standata_objects",
                                                                          "extract_hierarchical_info",
                                                                          "extract_mapping_arrays",
                                                                          "extract_multivariate_standata",
                                                                          "extract_non_likelihood_from_model_block",
                                                                          "extract_response_names_from_brmsfit",
                                                                          "extract_stan_block_content",
                                                                          "extract_stan_identifiers",
                                                                          "extract_time_series_dimensions",
                                                                          "extract_univariate_standata",
                                                                          "filter_block_content",
                                                                          "filter_renameable_identifiers",
                                                                          "find_stan_block",
                                                                          "format_matrix_for_stan_array",
                                                                          "generate_ar_trend_stanvars",
                                                                          "generate_base_brms_stancode",
                                                                          "generate_base_brms_standata",
                                                                          "generate_car_trend_stanvars",
                                                                          "generate_combined_stancode",
                                                                          "generate_common_trend_data",
                                                                          "generate_factor_model",
                                                                          "generate_hierarchical_correlation_model",
                                                                          "generate_hierarchical_correlation_parameters",
                                                                          "generate_hierarchical_functions",
                                                                          "generate_innovation_model",
                                                                          "generate_matrix_z_multiblock_stanvars",
                                                                          "generate_matrix_z_parameters",
                                                                          "generate_matrix_z_tdata",
                                                                          "generate_obs_trend_mapping",
                                                                          "generate_pw_trend_stanvars",
                                                                          "generate_rw_trend_stanvars",
                                                                          "generate_shared_innovation_stanvars",
                                                                          "generate_times_trend_matrices",
                                                                          "generate_trend_computation_tparameters",
                                                                          "generate_trend_injection_code",
                                                                          "generate_trend_priors_stanvar",
                                                                          "generate_var_trend_stanvars",
                                                                          "generate_zmvn_trend_stanvars",
                                                                          "get_prior",
                                                                          "get_priority",
                                                                          "get_stan_reserved_words",
                                                                          "get_trend_parameter_prior",
                                                                          "inject_trend_into_linear_predictor",
                                                                          "insert_after_mu_lines_in_model_block",
                                                                          "is_multivariate_brmsfit",
                                                                          "parse_glm_parameters",
                                                                          "PW",
                                                                          "register_core_trends",
                                                                          "rename_parameters_in_block",
                                                                          "RW",
                                                                          "transform_glm_call",
                                                                          "validate_mapping_arrays",
                                                                          "validate_no_factor_hierarchical",
                                                                          "validate_stan_code",
                                                                          "validate_stan_data_structure",
                                                                          "VAR",
                                                                          "ZMVN"
                                                                      ],
                                  "validate_mapping_arrays":  "generate_obs_trend_mapping",
                                  "prepare_stan_data":  "validate_factor_levels",
                                  "extract_trend_stanvars_from_setup":  [
                                                                            "combine_stanvars",
                                                                            "detect_glm_usage",
                                                                            "extract_and_rename_trend_parameters",
                                                                            "extract_time_series_dimensions",
                                                                            "generate_trend_specific_stanvars"
                                                                        ],
                                  "extract_code_block":  [
                                                             "append_if_not_null",
                                                             "apply_response_suffix_to_stanvars",
                                                             "apply_safe_parameter_replacement",
                                                             "AR",
                                                             "calculate_car_time_distances",
                                                             "CAR",
                                                             "combine_stanvars",
                                                             "create_times_trend_matrix",
                                                             "detect_glm_usage",
                                                             "eval_silent",
                                                             "extract_and_rename_stan_blocks",
                                                             "extract_and_rename_standata_objects",
                                                             "extract_and_rename_trend_parameters",
                                                             "extract_hierarchical_info",
                                                             "extract_mapping_arrays",
                                                             "extract_multivariate_standata",
                                                             "extract_non_likelihood_from_model_block",
                                                             "extract_response_names_from_brmsfit",
                                                             "extract_stan_block_content",
                                                             "extract_stan_identifiers",
                                                             "extract_time_series_dimensions",
                                                             "extract_univariate_standata",
                                                             "filter_block_content",
                                                             "filter_renameable_identifiers",
                                                             "find_matching_brace",
                                                             "find_stan_block",
                                                             "format_matrix_for_stan_array",
                                                             "generate_ar_trend_stanvars",
                                                             "generate_base_brms_stancode",
                                                             "generate_base_brms_standata",
                                                             "generate_car_trend_stanvars",
                                                             "generate_combined_stancode",
                                                             "generate_common_trend_data",
                                                             "generate_factor_model",
                                                             "generate_hierarchical_correlation_model",
                                                             "generate_hierarchical_correlation_parameters",
                                                             "generate_hierarchical_functions",
                                                             "generate_innovation_model",
                                                             "generate_matrix_z_multiblock_stanvars",
                                                             "generate_matrix_z_parameters",
                                                             "generate_matrix_z_tdata",
                                                             "generate_obs_trend_mapping",
                                                             "generate_pw_trend_stanvars",
                                                             "generate_rw_trend_stanvars",
                                                             "generate_shared_innovation_stanvars",
                                                             "generate_times_trend_matrices",
                                                             "generate_trend_computation_tparameters",
                                                             "generate_trend_injection_code",
                                                             "generate_trend_priors_stanvar",
                                                             "generate_trend_specific_stanvars",
                                                             "generate_var_trend_stanvars",
                                                             "generate_zmvn_trend_stanvars",
                                                             "get_prior",
                                                             "get_priority",
                                                             "get_stan_reserved_words",
                                                             "get_trend_parameter_prior",
                                                             "inject_trend_into_glm_predictor",
                                                             "inject_trend_into_linear_predictor",
                                                             "insert_after_mu_lines_in_model_block",
                                                             "is_multivariate_brmsfit",
                                                             "is_valid_stanvar",
                                                             "parse_glm_parameters",
                                                             "PW",
                                                             "register_core_trends",
                                                             "rename_parameters_in_block",
                                                             "RW",
                                                             "transform_glm_call",
                                                             "validate_mapping_arrays",
                                                             "validate_no_factor_hierarchical",
                                                             "validate_stan_code",
                                                             "validate_stan_data_structure",
                                                             "VAR",
                                                             "ZMVN"
                                                         ],
                                  "find_stan_block":  [
                                                          "append_if_not_null",
                                                          "apply_response_suffix_to_stanvars",
                                                          "apply_safe_parameter_replacement",
                                                          "AR",
                                                          "calculate_car_time_distances",
                                                          "CAR",
                                                          "combine_stanvars",
                                                          "create_times_trend_matrix",
                                                          "detect_glm_usage",
                                                          "eval_silent",
                                                          "extract_and_rename_stan_blocks",
                                                          "extract_and_rename_standata_objects",
                                                          "extract_hierarchical_info",
                                                          "extract_mapping_arrays",
                                                          "extract_multivariate_standata",
                                                          "extract_non_likelihood_from_model_block",
                                                          "extract_response_names_from_brmsfit",
                                                          "extract_stan_block_content",
                                                          "extract_stan_identifiers",
                                                          "extract_time_series_dimensions",
                                                          "extract_univariate_standata",
                                                          "filter_block_content",
                                                          "filter_renameable_identifiers",
                                                          "format_matrix_for_stan_array",
                                                          "generate_ar_trend_stanvars",
                                                          "generate_base_brms_stancode",
                                                          "generate_base_brms_standata",
                                                          "generate_car_trend_stanvars",
                                                          "generate_combined_stancode",
                                                          "generate_common_trend_data",
                                                          "generate_factor_model",
                                                          "generate_hierarchical_correlation_model",
                                                          "generate_hierarchical_correlation_parameters",
                                                          "generate_hierarchical_functions",
                                                          "generate_innovation_model",
                                                          "generate_matrix_z_multiblock_stanvars",
                                                          "generate_matrix_z_parameters",
                                                          "generate_matrix_z_tdata",
                                                          "generate_obs_trend_mapping",
                                                          "generate_pw_trend_stanvars",
                                                          "generate_rw_trend_stanvars",
                                                          "generate_shared_innovation_stanvars",
                                                          "generate_times_trend_matrices",
                                                          "generate_trend_computation_tparameters",
                                                          "generate_trend_injection_code",
                                                          "generate_trend_priors_stanvar",
                                                          "generate_var_trend_stanvars",
                                                          "generate_zmvn_trend_stanvars",
                                                          "get_prior",
                                                          "get_priority",
                                                          "get_stan_reserved_words",
                                                          "get_trend_parameter_prior",
                                                          "inject_trend_into_glm_predictor",
                                                          "inject_trend_into_linear_predictor",
                                                          "insert_after_mu_lines_in_model_block",
                                                          "is_multivariate_brmsfit",
                                                          "PW",
                                                          "register_core_trends",
                                                          "rename_parameters_in_block",
                                                          "RW",
                                                          "validate_mapping_arrays",
                                                          "validate_no_factor_hierarchical",
                                                          "validate_stan_code",
                                                          "validate_stan_data_structure",
                                                          "VAR",
                                                          "ZMVN"
                                                      ],
                                  "apply_response_suffix_to_stanvars":  [
                                                                            "apply_suffix_to_name",
                                                                            "apply_suffix_to_stan_code"
                                                                        ],
                                  "prepare_stanvars_for_brms":  "is_valid_stanvar",
                                  "generate_combined_stancode":  [
                                                                     "AR",
                                                                     "assemble_mvgam_stan_data",
                                                                     "detect_shared_trends",
                                                                     "extract_response_names",
                                                                     "extract_trend_stanvars_from_setup",
                                                                     "generate_base_brms_standata",
                                                                     "generate_base_stancode_with_stanvars",
                                                                     "inject_multivariate_trends_into_linear_predictors",
                                                                     "inject_trend_into_linear_predictor",
                                                                     "is_multivariate_trend_specs",
                                                                     "RW",
                                                                     "sort_stanvars",
                                                                     "validate_stan_code"
                                                                 ],
                                  "inject_trend_into_linear_predictor":  [
                                                                             "detect_glm_usage",
                                                                             "extract_mapping_arrays",
                                                                             "generate_trend_injection_code",
                                                                             "inject_trend_into_glm_predictor",
                                                                             "insert_after_mu_lines_in_model_block",
                                                                             "validate_mapping_arrays"
                                                                         ]
                              },
    "functions":  {
                      "validate_variables":  "R/as.data.frame.mvgam.R",
                      "check_brms_autocor_usage":  "R/validations.R",
                      "warn_default_time_variable":  "R/validations.R",
                      "lkj_corr":  "R/sim_mvgam.R",
                      "irf.mvgam":  "R/irf.mvgam.R",
                      "validate_obs_formula_brms":  "R/validations.R",
                      "is.mvgam_trend":  "R/validations.R",
                      "how_to_cite":  "R/how_to_cite.R",
                      "validate_correlation_requirements":  "R/validations.R",
                      "plot.mvgam_fevd":  "R/mvgam_fevd-class.R",
                      "generate_rw_trend_stanvars":  "R/stan_assembly.R",
                      "mvgam_formula":  "R/priors.R",
                      "loo.mvgam":  "R/loo.mvgam.R",
                      "split_termlabs":  "R/conditional_effects.R",
                      "varma_recursC":  "R/RcppExports.R",
                      "assemble_mvgam_stan_data":  "R/stan_assembly.R",
                      "detect_shared_trends":  "R/stan_assembly.R",
                      "get_trend_dispatch_function":  "R/trend_system.R",
                      "get_default_validation_rules":  "R/trend_system.R",
                      "mvgam":  "R/mvgam_core.R",
                      "ar3_recursC":  "R/RcppExports.R",
                      "subset_stanfit_parameters":  "R/mvgam_core.R",
                      "generate_innovation_model":  "R/stan_assembly.R",
                      "residuals.mvgam":  "R/residuals.mvgam.R",
                      "mcmc_plot.mvgam":  "R/mcmc_plot.mvgam.R",
                      "is_multivariate_trend_specs":  "R/validations.R",
                      "plot_ecdf":  "R/plot_mvgam_series.R",
                      "generate_hierarchical_functions":  "R/stan_assembly.R",
                      "mvgam_trend_choices":  "R/trend_system.R",
                      "RW":  "R/trend_system.R",
                      "get_trend_validation_patterns":  "R/validations.R",
                      "find_trend_terms":  "R/trend_system.R",
                      "parse_data_declarations":  "R/stan_assembly.R",
                      "plot_time_series":  "R/plot_mvgam_series.R",
                      "are_braces_balanced":  "R/validations.R",
                      "validate_nonlinear_trend_compatibility":  "R/validations.R",
                      "extract_observation_priors":  "R/priors.R",
                      "sort_stanvars":  "R/stan_assembly.R",
                      "assemble_mvgam_stan_code":  "R/stan_assembly.R",
                      "validate_autocor_separation":  "R/validations.R",
                      "print.mvgam_trend":  "R/trend_system.R",
                      "how_to_cite.mvgam":  "R/how_to_cite.R",
                      "as_draws_rvars.mvgam":  "R/as.data.frame.mvgam.R",
                      "generate_forecast_metadata":  "R/trend_system.R",
                      "handle_nonlinear_model":  "R/brms_integration.R",
                      "as.array.mvgam":  "R/as.data.frame.mvgam.R",
                      "validate_trend_time_intervals":  "R/validations.R",
                      "decimalplaces":  "R/conditional_effects.R",
                      "map_trend_priors":  "R/priors.R",
                      "prepare_mvgam_stancode":  "R/stan_assembly.R",
                      "stancode.mvgam_formula":  "R/make_stan.R",
                      "filter_car_forecast_params":  "R/trend_system.R",
                      "apply_response_suffix_to_stanvars":  "R/stan_assembly.R",
                      "mvgam_single_imputation":  "R/mvgam_core.R",
                      "is.trend_param":  "R/trend_system.R",
                      "validate_grouping_arguments":  "R/validations.R",
                      "var_phi":  "R/irf.mvgam.R",
                      "generate_combined_stancode":  "R/stan_assembly.R",
                      "residual_cor":  "R/residual_cor.R",
                      "generate_hierarchical_correlation_model":  "R/stan_assembly.R",
                      "GP":  "R/trend_system.R",
                      "has_mvbind_response":  "R/brms_integration.R",
                      "map_prior_to_stan_string":  "R/priors.R",
                      "generate_combined_stancode_and_data":  "R/mvgam_core.R",
                      "extract_trend_priors_from_enhanced":  "R/priors.R",
                      "generate_ar_monitor_params":  "R/trend_system.R",
                      "mvgam_trend_pattern":  "R/trend_system.R",
                      "generate_car_trend_stanvars":  "R/stan_assembly.R",
                      "get_priority":  "R/stan_assembly.R",
                      "allsame":  "R/ensemble.R",
                      "summary.mvgam_irf":  "R/mvgam_irf-class.R",
                      "create_trend_parameter_prior":  "R/priors.R",
                      "generate_rw_monitor_params":  "R/trend_system.R",
                      "is_multivariate_formula":  "R/brms_integration.R",
                      "combine_stanvars":  "R/stan_assembly.R",
                      "custom_trend":  "R/trend_system.R",
                      "series_to_mvgam":  "R/series_to_mvgam.R",
                      "is_multivariate_brmsfit":  "R/stan_assembly.R",
                      "interpret_mvgam":  "R/interpret_mvgam.R",
                      "parse_model_cmdstanr":  "R/stan_assembly.R",
                      "dyn_to_gphilbert":  "R/interpret_mvgam.R",
                      "ulapply":  "R/backends.R",
                      "repair_names":  "R/backends.R",
                      "get_predict.mvgam":  "R/marginaleffects.mvgam.R",
                      "generate_shared_innovation_stanvars":  "R/stan_assembly.R",
                      "validate_series_variable":  "R/validations.R",
                      "periodic_gp":  "R/sim_mvgam.R",
                      "validate_factor_levels":  "R/validations.R",
                      "trend_param":  "R/trend_system.R",
                      "is_registry_initialized":  "R/trend_system.R",
                      "validate_no_offsets_in_trends":  "R/validations.R",
                      "check_block_semicolons":  "R/validations.R",
                      "create_trend_base_formula":  "R/brms_integration.R",
                      "generate_trend_injection_code":  "R/stan_assembly.R",
                      "is_like_factor":  "R/ppc.mvgam.R",
                      "print_model_specification_simple":  "R/print.mvgam.R",
                      "print.mvgamstancode":  "R/print.mvgam.R",
                      "is_equal":  "R/backends.R",
                      "extract_trend_component_info":  "R/mvgam_core.R",
                      "is_nonlinear_formula":  "R/validations.R",
                      "filter_ar_forecast_params":  "R/trend_system.R",
                      "get_mvgam_trend_defaults":  "R/trend_system.R",
                      "stability":  "R/stability.R",
                      "plot_mvgam_series":  "R/plot_mvgam_series.R",
                      "find_matching_brace":  "R/stan_assembly.R",
                      "clean_ll":  "R/loo.mvgam.R",
                      "fevd.mvgam":  "R/fevd.mvgam.R",
                      "PW":  "R/trend_system.R",
                      "lv_correlations":  "R/lv_correlations.R",
                      "extract_variable_name":  "R/brms_integration.R",
                      "get_prior.brmsformula":  "R/priors.R",
                      "has_trend_priors":  "R/priors.R",
                      "eval_silent":  "R/validations.R",
                      "process_lag_parameters":  "R/validations.R",
                      "core_unloaded":  "R/zzz.R",
                      "extract_trend_priors_only":  "R/priors.R",
                      "roundlabs":  "R/conditional_effects.R",
                      "conditional_effects.mvgam":  "R/conditional_effects.R",
                      "mvgam_trend_registry":  "R/trend_system.R",
                      "add_consistent_dispatch_metadata":  "R/trend_system.R",
                      "pool_parameter_estimates":  "R/mvgam_core.R",
                      "print.mvgam_formula":  "R/priors.R",
                      "apply_suffix_to_stan_code":  "R/stan_assembly.R",
                      "eval_trend_constructor":  "R/trend_system.R",
                      "gather_matrix":  "R/mvgam_residcor-class.R",
                      "repair_variable_names":  "R/backends.R",
                      "validate_pos_integer":  "R/validations.R",
                      "generate_zmvn_trend_stanvars":  "R/stan_assembly.R",
                      "validate_regular_time_intervals":  "R/validations.R",
                      "plot_mvgam_smooth":  "R/plot_mvgam_smooth.R",
                      "extract_response_names":  "R/brms_integration.R",
                      "normalize_trend_type":  "R/trend_system.R",
                      "filter_zmvn_forecast_params":  "R/trend_system.R",
                      "formula2str_mvgam":  "R/validations.R",
                      "Predict.matrix.moi.smooth":  "R/monotonic.R",
                      "validate_no_factor_hierarchical":  "R/validations.R",
                      "fevd_df":  "R/mvgam_fevd-class.R",
                      "validate_multivariate_trend_constraints":  "R/validations.R",
                      "summary.mvgam_forecast":  "R/mvgam_forecast-class.R",
                      "as_draws_df.mvgam":  "R/as.data.frame.mvgam.R",
                      "generate_stan_components_mvgam_formula":  "R/make_stan.R",
                      "plottable":  "R/plot.mvgam.R",
                      "validate_stan_data_structure":  "R/validations.R",
                      "register_trend_type":  "R/trend_system.R",
                      "generate_trend_priors":  "R/priors.R",
                      "plot.mvgam_lfo":  "R/lfo_cv.mvgam.R",
                      "validate_no_brms_autocor_in_trends":  "R/validations.R",
                      "var_trend_properties":  "R/trend_system.R",
                      "as_draws_matrix.mvgam":  "R/as.data.frame.mvgam.R",
                      "list_trend_types":  "R/trend_system.R",
                      "create_pooled_mvgam":  "R/mvgam_core.R",
                      "get_coef.mvgam":  "R/marginaleffects.mvgam.R",
                      "apply_suffix_to_name":  "R/stan_assembly.R",
                      "ensemble.mvgam_forecast":  "R/ensemble.R",
                      "inject_multivariate_trends_into_linear_predictors":  "R/stan_assembly.R",
                      "rename_parameters_in_block":  "R/stan_assembly.R",
                      "generate_summary_labels":  "R/trend_system.R",
                      "generate_trend_priors_stanvar":  "R/stan_assembly.R",
                      "intersect_hist":  "R/plot_mvgam_uncertainty.R",
                      "generate_trend_priors_from_monitor_params":  "R/priors.R",
                      "validate_time_variable":  "R/validations.R",
                      "as.matrix.mvgam":  "R/as.data.frame.mvgam.R",
                      "add_mono_model_file":  "R/monotonic.R",
                      "validate_plot_data":  "R/plot_mvgam_series.R",
                      "extract_mapping_arrays":  "R/stan_assembly.R",
                      "generate_pw_monitor_params":  "R/trend_system.R",
                      "ppc.mvgam":  "R/ppc.mvgam.R",
                      "smooth.construct.moi.smooth.spec":  "R/monotonic.R",
                      "generate_parameter_label":  "R/trend_system.R",
                      "Predict.matrix.mod.smooth":  "R/monotonic.R",
                      "stancode.mvgam_prefit":  "R/print.mvgam.R",
                      "stability.mvgam":  "R/stability.R",
                      "validate_univariate_series_time":  "R/validations.R",
                      "validate_no_addition_terms_in_trends":  "R/validations.R",
                      "add_residuals.mvgam":  "R/add_residuals.R",
                      "setup_brms_lightweight":  "R/brms_integration.R",
                      "validate_multiple_imputation_datasets":  "R/mvgam_core.R",
                      "zmvn_trend_properties":  "R/trend_system.R",
                      "mvgam_attach":  "R/zzz.R",
                      "get_trend_prior_spec":  "R/priors.R",
                      "as_draws_list.mvgam":  "R/as.data.frame.mvgam.R",
                      "set_coef.mvgam":  "R/marginaleffects.mvgam.R",
                      "generate_matrix_z_multiblock_stanvars":  "R/stan_assembly.R",
                      "apply_mvgam_trend_defaults":  "R/trend_system.R",
                      "extract_multivariate_standata":  "R/stan_assembly.R",
                      "extract_hierarchical_info":  "R/stan_assembly.R",
                      "ecdf_plotdat":  "R/ppc.mvgam.R",
                      "create_trend_brmsfit":  "R/mvgam_core.R",
                      "validate_single_trend_formula":  "R/validations.R",
                      "extract_trend_parameters":  "R/mvgam_core.R",
                      "extract_non_likelihood_from_model_block":  "R/stan_assembly.R",
                      "create_times_trend_matrix":  "R/stan_assembly.R",
                      "validate_trend_properties":  "R/trend_system.R",
                      "extract_observation_priors_from_enhanced":  "R/priors.R",
                      "fit_multiple_imputation_models":  "R/mvgam_core.R",
                      "process_trend_validation_rules":  "R/validations.R",
                      "generate_stan_array_declaration":  "R/stan_assembly.R",
                      "find_predictors.mvgam_prefit":  "R/marginaleffects.mvgam.R",
                      "samp_noinf":  "R/loo.mvgam.R",
                      "validate_trend_parameter_class":  "R/validations.R",
                      "var1_recursC":  "R/RcppExports.R",
                      "extract_trend_stanvars_from_setup":  "R/stan_assembly.R",
                      "extract_univariate_standata":  "R/stan_assembly.R",
                      "generate_var_monitor_params":  "R/trend_system.R",
                      "extract_observation_parameters":  "R/mvgam_core.R",
                      "get_prior":  "R/priors.R",
                      "add_complete_metadata":  "R/trend_system.R",
                      "extract_fit_estimates":  "R/mvgam_core.R",
                      "add_summary_labels":  "R/trend_system.R",
                      "fevd":  "R/fevd.mvgam.R",
                      "evaluate_param_conditions":  "R/trend_system.R",
                      "apply_validation_rules":  "R/validations.R",
                      "fit_mvgam_model":  "R/mvgam_core.R",
                      "rename_multivariate_parameters":  "R/stan_assembly.R",
                      "generate_car_monitor_params":  "R/trend_system.R",
                      "apply_safe_parameter_replacement":  "R/stan_assembly.R",
                      "prepare_stan_data":  "R/stan_assembly.R",
                      "dyn_to_gpspline":  "R/interpret_mvgam.R",
                      "print.how_to_cite":  "R/how_to_cite.R",
                      "tidy.mvgam":  "R/tidier_methods.R",
                      "validate_stan_code_fragment":  "R/validations.R",
                      "residual_cor.mvgam":  "R/residual_cor.R",
                      "generate_matrix_z_parameters":  "R/stan_assembly.R",
                      "integrate_nonlinear_with_assembly":  "R/brms_integration.R",
                      "plot.mvgam_residcor":  "R/mvgam_residcor-class.R",
                      "ordinate":  "R/ordinate.jsdgam.R",
                      "is_trend_term":  "R/validations.R",
                      "filter_rw_forecast_params":  "R/trend_system.R",
                      "random_Sigma":  "R/sim_mvgam.R",
                      "extract_and_rename_stan_blocks":  "R/stan_assembly.R",
                      "inject_trend_into_glm_predictor":  "R/stan_assembly.R",
                      "log_mean_exp":  "R/lfo_cv.mvgam.R",
                      "parse_glm_parameters":  "R/stan_assembly.R",
                      "get_car_parameter_prior":  "R/priors.R",
                      "extract_response_from_formula":  "R/brms_integration.R",
                      "plot_mvgam_factors":  "R/plot_mvgam_factors.R",
                      "split_mod_dots":  "R/loo.mvgam.R",
                      "extract_nonlinear_components":  "R/brms_integration.R",
                      "validate_brms_formula":  "R/validations.R",
                      "sum_rows":  "R/lfo_cv.mvgam.R",
                      "plot.mvgam_forecast":  "R/plot_mvgam_fc.R",
                      "dynamic":  "R/dynamic.R",
                      "parse_nonlinear_manually":  "R/brms_integration.R",
                      "extract_time_information":  "R/mvgam_core.R",
                      "car_trend_properties":  "R/trend_system.R",
                      "variables.mvgam":  "R/index-mvgam.R",
                      "extract_code_block":  "R/stan_assembly.R",
                      "parse_trend_formula":  "R/trend_system.R",
                      "add_trend_component_attr":  "R/priors.R",
                      "generate_times_trend_matrices":  "R/stan_assembly.R",
                      "get_validation_rule_dispatch_table":  "R/validations.R",
                      "get_data.mvgam":  "R/marginaleffects.mvgam.R",
                      "get_default_trend_parameter_prior":  "R/priors.R",
                      "augment.mvgam":  "R/tidier_methods.R",
                      "prepare_stanvars_for_brms":  "R/stan_assembly.R",
                      "process_arg":  "R/trend_system.R",
                      "cluster_cormat":  "R/mvgam_residcor-class.R",
                      "validate_list_trend_formula":  "R/validations.R",
                      "pw_trend_properties":  "R/trend_system.R",
                      "warn_default_series_variable":  "R/validations.R",
                      "xts.to.ts":  "R/series_to_mvgam.R",
                      "extract_trend_priors":  "R/priors.R",
                      "validate_bf_trend_formula":  "R/validations.R",
                      "register_core_trends":  "R/trend_system.R",
                      "auto_register_trend_types":  "R/trend_system.R",
                      "split_fc_dots":  "R/ensemble.R",
                      "rename_univariate_parameters":  "R/stan_assembly.R",
                      "generate_base_brms_standata":  "R/stan_assembly.R",
                      "remove_trend_expressions":  "R/validations.R",
                      "validate_multivariate_series_time":  "R/validations.R",
                      "validate_pos_real":  "R/validations.R",
                      "plot_mvgam_fc":  "R/plot_mvgam_fc.R",
                      "generate_obs_trend_mapping":  "R/validations.R",
                      "filter_block_content":  "R/stan_assembly.R",
                      "print.mvgam_conditional_effects":  "R/conditional_effects.R",
                      "transform_glm_call":  "R/stan_assembly.R",
                      "sim_mvgam":  "R/sim_mvgam.R",
                      "validate_trend_formula_brms":  "R/validations.R",
                      "extract_regular_terms":  "R/trend_system.R",
                      "error":  "R/marginaleffects.mvgam.R",
                      "gen_irf":  "R/irf.mvgam.R",
                      "as_draws_array.mvgam":  "R/as.data.frame.mvgam.R",
                      "extract_response_trends":  "R/brms_integration.R",
                      "get_data.mvgam_prefit":  "R/marginaleffects.mvgam.R",
                      "mvgam_multiple":  "R/mvgam_core.R",
                      "VAR":  "R/trend_system.R",
                      "build_trend_label":  "R/trend_system.R",
                      "append_if_not_null":  "R/stan_assembly.R",
                      "sim_seasonal":  "R/sim_mvgam.R",
                      "standardize_brmsprior_columns":  "R/priors.R",
                      "pool_mvgam_fits":  "R/mvgam_core.R",
                      "extract_all_bf_formulas":  "R/validations.R",
                      "validate_and_process_trend_parameters":  "R/validations.R",
                      "validate_stan_code":  "R/validations.R",
                      "validate_mapping_arrays":  "R/stan_assembly.R",
                      "reorder_clusters":  "R/mvgam_residcor-class.R",
                      "extract_mvbind_responses":  "R/brms_integration.R",
                      "plot_mvgam_trend":  "R/plot_mvgam_trend.R",
                      "generate_monitor_params":  "R/trend_system.R",
                      "generate_base_stancode_with_stanvars":  "R/stan_assembly.R",
                      "validate_no_multiple_trend_constructors":  "R/validations.R",
                      "validate_data_code_compatibility":  "R/validations.R",
                      "extract_stan_block_content":  "R/stan_assembly.R",
                      "extract_mvgam_components":  "R/mvgam_core.R",
                      "validate_missing_patterns":  "R/mvgam_core.R",
                      "combine_obs_trend_priors":  "R/priors.R",
                      "plot_histogram":  "R/plot_mvgam_series.R",
                      "find_stan_block":  "R/stan_assembly.R",
                      "deparse0":  "R/validations.R",
                      "validate_trend_dispatch_consistency":  "R/trend_system.R",
                      "generate_zmvn_monitor_params":  "R/trend_system.R",
                      "plot.mvgam_irf":  "R/mvgam_irf-class.R",
                      "extract_time_series_dimensions":  "R/validations.R",
                      "insert_into_stan_block":  "R/stan_assembly.R",
                      "apply_rubins_rules":  "R/mvgam_core.R",
                      "parse_model_rstan":  "R/stan_assembly.R",
                      "extract_stan_identifiers":  "R/stan_assembly.R",
                      "lfo_cv.mvgam":  "R/lfo_cv.mvgam.R",
                      "named_list":  "R/loo.mvgam.R",
                      "validate_grouping_structure":  "R/validations.R",
                      "all_times_avail":  "R/validations.R",
                      "find_predictors.mvgam":  "R/marginaleffects.mvgam.R",
                      "validate_series_time":  "R/validations.R",
                      "stancode.mvgam":  "R/print.mvgam.R",
                      "smooth.construct.mod.smooth.spec":  "R/monotonic.R",
                      "inject_trend_into_linear_predictor":  "R/stan_assembly.R",
                      "insert_after_mu_lines_in_model_block":  "R/stan_assembly.R",
                      "ar_trend_properties":  "R/trend_system.R",
                      "calculate_car_time_distances":  "R/stan_assembly.R",
                      "generate_ar_trend_stanvars":  "R/stan_assembly.R",
                      "plot_mvgam_pterms":  "R/plot_mvgam_pterms.R",
                      "validate_trend_hierarchical_structure":  "R/validations.R",
                      "extract_brmsterms_from_setup":  "R/brms_integration.R",
                      "extract_prior_from_setup":  "R/brms_integration.R",
                      "ordinate.jsdgam":  "R/ordinate.jsdgam.R",
                      "generate_var_trend_stanvars":  "R/stan_assembly.R",
                      "create_mvgam_from_combined_fit":  "R/mvgam_core.R",
                      "as_one_logical":  "R/validations.R",
                      "process_capacity_parameter":  "R/validations.R",
                      "plot.mvgam_conditional_effects":  "R/conditional_effects.R",
                      "plot_mvgam_randomeffects":  "R/plot_mvgam_randomeffects.R",
                      "c.trend_param":  "R/trend_system.R",
                      "handle_nse_param":  "R/validations.R",
                      "extract_observation_priors_only":  "R/priors.R",
                      "ppc":  "R/ppc.mvgam.R",
                      "create_empty_brmsprior":  "R/priors.R",
                      "detect_glm_usage":  "R/stan_assembly.R",
                      "register_custom_trend":  "R/trend_system.R",
                      "validate_trend_specs":  "R/validations.R",
                      "print.mvgam":  "R/print.mvgam.R",
                      "seq_rows":  "R/backends.R",
                      "validate_trend_components":  "R/validations.R",
                      "build_ar_prior_spec":  "R/priors.R",
                      "filter_pw_forecast_params":  "R/trend_system.R",
                      "as_draws.mvgam":  "R/as.data.frame.mvgam.R",
                      "create_observation_brmsfit":  "R/mvgam_core.R",
                      "gen_fevd":  "R/fevd.mvgam.R",
                      "print.mvgam_prefit":  "R/print.mvgam.R",
                      "validate_combined_stancode":  "R/validations.R",
                      "generate_common_trend_data":  "R/stan_assembly.R",
                      "generate_forecast_required_params":  "R/trend_system.R",
                      "ensure_registry_initialized":  "R/trend_system.R",
                      "extract_response_names_from_brmsfit":  "R/stan_assembly.R",
                      "get_vcov.mvgam":  "R/marginaleffects.mvgam.R",
                      "get_prior.mvgam_formula":  "R/priors.R",
                      "get_best_prior_match":  "R/priors.R",
                      "format_matrix_for_stan_array":  "R/stan_assembly.R",
                      "CAR":  "R/trend_system.R",
                      "plot_mvgam_resids":  "R/plot_mvgam_resids.R",
                      "validate_proportional":  "R/validations.R",
                      "standata.mvgam_formula":  "R/make_stan.R",
                      "generate_hierarchical_correlation_parameters":  "R/stan_assembly.R",
                      "plot.mvgam":  "R/plot.mvgam.R",
                      "get_parameter_type_default_prior":  "R/priors.R",
                      "get_prior.default":  "R/priors.R",
                      "add_forecast_metadata":  "R/trend_system.R",
                      "is_valid_stanvar":  "R/validations.R",
                      "has_embedded_families":  "R/priors.R",
                      "generate_pw_trend_stanvars":  "R/stan_assembly.R",
                      "pp_check.mvgam":  "R/ppc.mvgam.R",
                      "extract_series_information":  "R/mvgam_core.R",
                      "modify_stancode_for_nonlinear":  "R/brms_integration.R",
                      "var_psi":  "R/irf.mvgam.R",
                      "generate_trend_computation_tparameters":  "R/stan_assembly.R",
                      "repair_stanfit":  "R/backends.R",
                      "extract_and_rename_trend_parameters":  "R/stan_assembly.R",
                      "validate_setup_components":  "R/validations.R",
                      "generate_matrix_z_tdata":  "R/stan_assembly.R",
                      "check_semicolon_syntax":  "R/validations.R",
                      "plot_acf":  "R/plot_mvgam_series.R",
                      "add_residuals":  "R/add_residuals.R",
                      "process_trend_params":  "R/trend_system.R",
                      "filter_var_forecast_params":  "R/trend_system.R",
                      "validate_trend_correlation":  "R/validations.R",
                      "irf":  "R/irf.mvgam.R",
                      "plot_mvgam_uncertainty":  "R/plot_mvgam_uncertainty.R",
                      "lfo_cv":  "R/lfo_cv.mvgam.R",
                      "generate_factor_model":  "R/stan_assembly.R",
                      "ensemble":  "R/ensemble.R",
                      "add_monitor_params":  "R/trend_system.R",
                      "determine_trend_injection_point":  "R/brms_integration.R",
                      "get_prior.formula":  "R/priors.R",
                      "pairs.mvgam":  "R/pairs.mvgam.R",
                      "extract_pooling_diagnostics":  "R/mvgam_core.R",
                      "validate_trend_grouping":  "R/validations.R",
                      "mvgam_single_dataset":  "R/mvgam_core.R",
                      "generate_trend_specific_stanvars":  "R/stan_assembly.R",
                      "summary.mvgam_fevd":  "R/mvgam_fevd-class.R",
                      "create_mvgam_trend":  "R/trend_system.R",
                      "loo_compare.mvgam":  "R/loo.mvgam.R",
                      "get_ar_parameter_prior":  "R/priors.R",
                      "parse_base_formula_safe":  "R/validations.R",
                      "validate_time_series_for_trends":  "R/validations.R",
                      "validate_factor_compatibility":  "R/validations.R",
                      "parse_multivariate_trends":  "R/brms_integration.R",
                      "validate_stan_code_structure":  "R/validations.R",
                      "extract_stan_block":  "R/stan_assembly.R",
                      "split_hier_Sigma":  "R/tidier_methods.R",
                      "ZMVN":  "R/trend_system.R",
                      "var_fecov":  "R/fevd.mvgam.R",
                      "filter_renameable_identifiers":  "R/stan_assembly.R",
                      "extract_prior_string":  "R/priors.R",
                      "log_sum_exp":  "R/lfo_cv.mvgam.R",
                      "dispatch_validation_rule":  "R/validations.R",
                      "get_default_incompatibility_reason":  "R/trend_system.R",
                      "extract_and_rename_standata_objects":  "R/stan_assembly.R",
                      "is_try_error":  "R/validations.R",
                      "get_stan_reserved_words":  "R/stan_assembly.R",
                      "AR":  "R/trend_system.R",
                      "residual_cor.jsdgam":  "R/residual_cor.R",
                      "validate_trend_parameter_bounds":  "R/validations.R",
                      "as.data.frame.mvgam":  "R/as.data.frame.mvgam.R",
                      "rw_trend_properties":  "R/trend_system.R",
                      "validate_mvgam_trend":  "R/validations.R",
                      "cv_split":  "R/lfo_cv.mvgam.R",
                      "validate_trend_factor_compatibility":  "R/validations.R",
                      "get_trend_info":  "R/trend_system.R",
                      "get_factor_compatible_trends":  "R/trend_system.R",
                      "get_trend_parameter_prior":  "R/priors.R",
                      "print.trend_param":  "R/trend_system.R",
                      "validate_offsets_in_obs":  "R/validations.R",
                      "generate_base_brms_stancode":  "R/stan_assembly.R"
                  },
    "file_purposes":  {
                          "R/tidier_methods.R":  "Method implementations",
                          "R/mvgam_forecast-class.R":  "Class definitions and methods",
                          "R/mvgam-class.R":  "Class definitions and methods",
                          "R/plot_mvgam_factors.R":  "Plotting and visualization",
                          "R/plot.mvgam.R":  "Plotting and visualization",
                          "R/residual_cor.R":  "Residual analysis",
                          "R/zzz.R":  "Package startup and attachment",
                          "R/stan_assembly.R":  "Stan model integration",
                          "R/validations.R":  "Input validation and checks",
                          "R/mvgam_fevd-class.R":  "Class definitions and methods",
                          "R/priors.R":  "Prior specification",
                          "R/print.mvgam.R":  "Print methods for objects",
                          "R/plot_mvgam_trend.R":  "Trend modeling",
                          "R/as.data.frame.mvgam.R":  "Data documentation and loading",
                          "R/plot_mvgam_series.R":  "Plotting and visualization",
                          "R/brms_integration.R":  "brms integration",
                          "R/plot_mvgam_fc.R":  "Plotting and visualization",
                          "R/RcppExports.R":  "Exported functions",
                          "R/mvgam_irf-class.R":  "Class definitions and methods",
                          "R/plot_mvgam_smooth.R":  "Plotting and visualization",
                          "R/portal_data.R":  "Data documentation and loading",
                          "R/marginaleffects.mvgam.R":  "Marginal effects",
                          "R/conditional_effects.R":  "Conditional effects",
                          "R/mvgam_core.R":  "Core package functionality",
                          "R/mcmc_plot.mvgam.R":  "Plotting and visualization",
                          "R/plot_mvgam_resids.R":  "Plotting and visualization",
                          "R/all_neon_tick_data.R":  "Data documentation and loading",
                          "R/utils-pipe.R":  "Utility functions",
                          "R/plot_mvgam_uncertainty.R":  "Plotting and visualization",
                          "R/make_stan.R":  "Stan model integration",
                          "R/mvgam_residcor-class.R":  "Class definitions and methods",
                          "R/trend_system.R":  "Trend modeling",
                          "R/plot_mvgam_pterms.R":  "Plotting and visualization",
                          "R/add_residuals.R":  "Residual analysis",
                          "R/residuals.mvgam.R":  "Residual analysis",
                          "R/plot_mvgam_randomeffects.R":  "Plotting and visualization"
                      },
    "dependencies":  {

                     },
    "exported":  [
                     "%\u003e%",
                     "AR",
                     "CAR",
                     "GP",
                     "PW",
                     "RW",
                     "VAR",
                     "ZMVN",
                     "add_residuals",
                     "as_draws",
                     "as_draws_array",
                     "as_draws_df",
                     "as_draws_list",
                     "as_draws_matrix",
                     "as_draws_rvars",
                     "augment",
                     "avg_predictions",
                     "comparisons",
                     "conditional_effects",
                     "create_mvgam_trend",
                     "custom_trend",
                     "datagrid",
                     "dynamic",
                     "ensemble",
                     "fevd",
                     "get_data",
                     "get_predict",
                     "get_prior",
                     "how_to_cite",
                     "hypotheses",
                     "irf",
                     "is.mvgam_trend",
                     "is.trend_param",
                     "lfo_cv",
                     "list_trend_types",
                     "loo",
                     "loo_compare",
                     "lv_correlations",
                     "mcmc_plot",
                     "mvgam",
                     "mvgam_formula",
                     "mvgam_trend_choices",
                     "ordinate",
                     "plot_comparisons",
                     "plot_mvgam_factors",
                     "plot_mvgam_fc",
                     "plot_mvgam_pterms",
                     "plot_mvgam_randomeffects",
                     "plot_mvgam_resids",
                     "plot_mvgam_series",
                     "plot_mvgam_smooth",
                     "plot_mvgam_trend",
                     "plot_mvgam_uncertainty",
                     "plot_predictions",
                     "plot_slopes",
                     "pp_check",
                     "ppc",
                     "predictions",
                     "register_custom_trend",
                     "register_trend_type",
                     "residual_cor",
                     "series_to_mvgam",
                     "sim_mvgam",
                     "slopes",
                     "stability",
                     "tidy",
                     "trend_param",
                     "variables"
                 ],
    "function_signatures":  {
                                "validate_variables":  "validate_variables = function(x, variable, regex = FALSE) {",
                                "validate_no_multiple_trend_constructors":  "validate_no_multiple_trend_constructors \u003c- function(formula_str) {",
                                "warn_default_time_variable":  "warn_default_time_variable \u003c- function() {",
                                "lkj_corr":  "lkj_corr \u003c- function(n_series, eta = 0.8) {",
                                "irf.mvgam":  "irf.mvgam \u003c- function( object, h = 10, cumulative = FALSE, orthogonal = FALSE, ... ) {",
                                "validate_obs_formula_brms":  "validate_obs_formula_brms \u003c- function(formula) {",
                                "is.mvgam_trend":  "is.mvgam_trend \u003c- function(x) {",
                                "how_to_cite":  "how_to_cite \u003c- function(object, ...) {",
                                "get_trend_info":  "get_trend_info \u003c- function(name) {",
                                "plot.mvgam_fevd":  "plot.mvgam_fevd = function(x, ...) {",
                                "generate_rw_trend_stanvars":  "generate_rw_trend_stanvars \u003c- function(trend_specs, data_info, prior = NULL) {",
                                "mvgam_formula":  "mvgam_formula \u003c- function(formula, trend_formula = NULL) {",
                                "loo.mvgam":  "loo.mvgam \u003c- function(x, incl_dynamics = FALSE, ...) {",
                                "split_termlabs":  "split_termlabs = function(lab) {",
                                "varma_recursC":  "varma_recursC \u003c- function(A, A2, A3, theta, linpreds, errors, drift, last_trends, h) {",
                                "assemble_mvgam_stan_data":  "assemble_mvgam_stan_data \u003c- function(obs_formula, trend_stanvars = NULL, data, family = gaussian()) {",
                                "detect_shared_trends":  "detect_shared_trends \u003c- function(specs) {",
                                "get_default_validation_rules":  "get_default_validation_rules \u003c- function(trend_type) {",
                                "mvgam":  "mvgam \u003c- function(formula, trend_formula = NULL, data = NULL, backend = getOption(\"brms.backend\", \"cmdstanr\"), combine = TRUE, family = poisson(), ...) {",
                                "ar3_recursC":  "ar3_recursC \u003c- function(drift, ar1, ar2, ar3, linpreds, errors, last_trends, h) {",
                                "subset_stanfit_parameters":  "subset_stanfit_parameters \u003c- function(stanfit, param_names) {",
                                "generate_innovation_model":  "generate_innovation_model \u003c- function(effective_dim, cor = FALSE, is_hierarchical = FALSE, prior = NULL) {",
                                "residuals.mvgam":  "residuals.mvgam \u003c- function( object, summary = TRUE, robust = FALSE, probs = c(0.025, 0.975), ... ) {",
                                "mcmc_plot.mvgam":  "mcmc_plot.mvgam = function( object, type = \u0027intervals\u0027, variable = NULL, regex = FALSE, use_alias = TRUE, ... ) {",
                                "is_multivariate_trend_specs":  "is_multivariate_trend_specs \u003c- function(trend_specs) {",
                                "plot_ecdf":  "plot_ecdf \u003c- function(dat, ylab = \u0027y\u0027) {",
                                "generate_hierarchical_functions":  "generate_hierarchical_functions \u003c- function() {",
                                "mvgam_trend_choices":  "mvgam_trend_choices \u003c- function() {",
                                "RW":  "RW = function( time = NA, series = NA, ma = FALSE, cor = FALSE, gr = NA, subgr = NA, n_lv = NULL) {",
                                "get_trend_validation_patterns":  "get_trend_validation_patterns \u003c- function() {",
                                "find_trend_terms":  "find_trend_terms \u003c- function(x) {",
                                "parse_data_declarations":  "parse_data_declarations \u003c- function(data_block) {",
                                "plot_time_series":  "plot_time_series \u003c- function( dat, lines = TRUE, log_scale = FALSE, ylab = \u0027y\u0027, series = \u0027all\u0027 ) {",
                                "validate_nonlinear_trend_compatibility":  "validate_nonlinear_trend_compatibility \u003c- function(nl_components, trend_specs) {",
                                "extract_observation_priors":  "extract_observation_priors \u003c- function(formula, data, family = gaussian(), ...) {",
                                "sort_stanvars":  "sort_stanvars \u003c- function(stanvars) {",
                                "assemble_mvgam_stan_code":  "assemble_mvgam_stan_code \u003c- function(obs_formula, trend_stanvars = NULL, data, family = gaussian(), backend = \"rstan\", validate = TRUE) {",
                                "validate_mvgam_trend":  "validate_mvgam_trend \u003c- function(trend_obj) {",
                                "print.mvgam_trend":  "print.mvgam_trend \u003c- function(x, ...) {",
                                "how_to_cite.mvgam":  "how_to_cite.mvgam \u003c- function(object, ...) {",
                                "as_draws_rvars.mvgam":  "as_draws_rvars.mvgam \u003c- function( x, variable = NULL, regex = FALSE, inc_warmup = FALSE, ... ) {",
                                "handle_nonlinear_model":  "handle_nonlinear_model \u003c- function(formula, trend_specs = NULL) {",
                                "as.array.mvgam":  "as.array.mvgam = function( x, variable = \u0027betas\u0027, regex = FALSE, use_alias = TRUE, ... ) {",
                                "validate_trend_time_intervals":  "validate_trend_time_intervals \u003c- function(trend_spec, data) {",
                                "decimalplaces":  "decimalplaces \u003c- function(x) {",
                                "map_trend_priors":  "map_trend_priors \u003c- function(prior, trend_type) {",
                                "prepare_mvgam_stancode":  "prepare_mvgam_stancode \u003c- function(obs_setup, trend_setup, trend_specs, data = NULL, backend = \"rstan\", validate = TRUE, silent = 1) {",
                                "stancode.mvgam_formula":  "stancode.mvgam_formula \u003c- function(object, data, family = gaussian(), prior = NULL, data2 = NULL, sample_prior = \"no\", sparse = NULL, knots = NULL, drop_unused_levels = TRUE, backend = \"rstan\", threads = getOption(\"mc.cores\", 1), normalize = TRUE, save_model = NULL, stan_funs = NULL, silent = 1L, validate = TRUE, ...) {",
                                "filter_car_forecast_params":  "filter_car_forecast_params \u003c- function(monitor_params, trend_spec) {",
                                "apply_response_suffix_to_stanvars":  "apply_response_suffix_to_stanvars \u003c- function(stanvars, response_suffix) {",
                                "mvgam_single_imputation":  "mvgam_single_imputation \u003c- function(formula, trend_formula, data, backend, imputation_id, ...) {",
                                "is.trend_param":  "is.trend_param \u003c- function(x) {",
                                "validate_grouping_arguments":  "validate_grouping_arguments \u003c- function(gr, subgr) {",
                                "var_phi":  "var_phi \u003c- function(x, h = 10) {",
                                "generate_combined_stancode":  "generate_combined_stancode \u003c- function(obs_setup, trend_setup = NULL, trend_specs = NULL, prior = NULL, backend = \"rstan\", validate = TRUE, silent = 1) {",
                                "residual_cor":  "residual_cor \u003c- function(object, ...) {",
                                "generate_hierarchical_correlation_model":  "generate_hierarchical_correlation_model \u003c- function(n_groups) {",
                                "GP":  "GP = function(time = NA, series = NA, ...) {",
                                "get_best_prior_match":  "get_best_prior_match \u003c- function(matches) {",
                                "has_mvbind_response":  "has_mvbind_response \u003c- function(formula) {",
                                "map_prior_to_stan_string":  "map_prior_to_stan_string \u003c- function(prior_row) {",
                                "generate_combined_stancode_and_data":  "generate_combined_stancode_and_data \u003c- function(obs_setup, trend_setup, mv_spec, validate = TRUE) {",
                                "extract_trend_priors_from_enhanced":  "extract_trend_priors_from_enhanced \u003c- function(prior) {",
                                "generate_ar_monitor_params":  "generate_ar_monitor_params \u003c- function(trend_spec) {",
                                "mvgam_trend_pattern":  "mvgam_trend_pattern \u003c- function() {",
                                "generate_car_trend_stanvars":  "generate_car_trend_stanvars \u003c- function(trend_specs, data_info, prior = NULL) {",
                                "get_priority":  "get_priority \u003c- function(name, scode) {",
                                "allsame":  "allsame \u003c- function(x) length(unique(x)) == 1",
                                "summary.mvgam_irf":  "summary.mvgam_irf = function(object, probs = c(0.025, 0.975), ...) {",
                                "extract_brmsterms_from_setup":  "extract_brmsterms_from_setup \u003c- function(setup_object) {",
                                "create_trend_parameter_prior":  "create_trend_parameter_prior \u003c- function(param_name, trend_obj) {",
                                "generate_rw_monitor_params":  "generate_rw_monitor_params \u003c- function(trend_spec) {",
                                "is_multivariate_formula":  "is_multivariate_formula \u003c- function(formula) {",
                                "combine_stanvars":  "combine_stanvars \u003c- function(...) {",
                                "series_to_mvgam":  "series_to_mvgam \u003c- function(series, freq, train_prop = 0.85) {",
                                "is_multivariate_brmsfit":  "is_multivariate_brmsfit \u003c- function(brmsfit) {",
                                "interpret_mvgam":  "interpret_mvgam = function(formula, N, family) {",
                                "parse_model_cmdstanr":  "parse_model_cmdstanr \u003c- function(model, silent = 1, ...) {",
                                "dyn_to_gphilbert":  "dyn_to_gphilbert = function(term, N) {",
                                "ulapply":  "ulapply \u003c- function(X, FUN, ..., recursive = TRUE, use.names = TRUE) {",
                                "repair_names":  "repair_names \u003c- function(x) {",
                                "get_predict.mvgam":  "get_predict.mvgam \u003c- function( model, newdata, type = \u0027response\u0027, process_error = FALSE, ... ) {",
                                "generate_shared_innovation_stanvars":  "generate_shared_innovation_stanvars \u003c- function(n_lv, n_series, cor = FALSE, factor_model = FALSE, hierarchical_info = NULL) {",
                                "validate_series_variable":  "validate_series_variable \u003c- function(series_var) {",
                                "periodic_gp":  "periodic_gp \u003c- function(T, period = 12, rho = 1) {",
                                "validate_trend_specs":  "validate_trend_specs \u003c- function(trend_specs) {",
                                "trend_param":  "trend_param \u003c- function(name, bounds = NULL, monitor = TRUE, label = NULL, condition = TRUE) {",
                                "is_registry_initialized":  "is_registry_initialized \u003c- function() {",
                                "validate_no_offsets_in_trends":  "validate_no_offsets_in_trends \u003c- function(formula) {",
                                "check_block_semicolons":  "check_block_semicolons \u003c- function(block_content) {",
                                "create_trend_base_formula":  "create_trend_base_formula \u003c- function(trend_specs) {",
                                "generate_trend_injection_code":  "generate_trend_injection_code \u003c- function(mapping_arrays) {",
                                "is_like_factor":  "is_like_factor \u003c- function(x) {",
                                "process_trend_validation_rules":  "process_trend_validation_rules \u003c- function(trend_spec, data) {",
                                "print_model_specification_simple":  "print_model_specification_simple \u003c- function(model_spec) {",
                                "print.mvgamstancode":  "print.mvgamstancode \u003c- function(x, ...) {",
                                "is_equal":  "is_equal \u003c- function(x, y, check.attributes = FALSE, ...) {",
                                "extract_trend_component_info":  "extract_trend_component_info \u003c- function(combined_fit, mv_spec) {",
                                "is_nonlinear_formula":  "is_nonlinear_formula \u003c- function(formula) {",
                                "filter_ar_forecast_params":  "filter_ar_forecast_params \u003c- function(monitor_params, trend_spec) {",
                                "get_mvgam_trend_defaults":  "get_mvgam_trend_defaults \u003c- function() {",
                                "stability":  "stability \u003c- function(object, ...) {",
                                "plot_mvgam_series":  "plot_mvgam_series \u003c- function( object, data, newdata, y = \u0027y\u0027, lines = TRUE, series = 1, n_bins = NULL, log_scale = FALSE ) {",
                                "find_matching_brace":  "find_matching_brace \u003c- function(code_lines, start_line) {",
                                "clean_ll":  "clean_ll = function(x, logliks) {",
                                "filter_var_forecast_params":  "filter_var_forecast_params \u003c- function(monitor_params, trend_spec) {",
                                "PW":  "PW = function(time = NA, series = NA, cap = NA, n_changepoints = 10, changepoint_range = 0.8, changepoint_scale = 0.05, growth = \u0027linear\u0027, n_lv = NULL) {",
                                "lv_correlations":  "lv_correlations = function(object) {",
                                "extract_variable_name":  "extract_variable_name \u003c- function(expr) {",
                                "generate_forecast_metadata":  "generate_forecast_metadata \u003c- function(trend_spec) {",
                                "has_trend_priors":  "has_trend_priors \u003c- function(prior) {",
                                "eval_silent":  "eval_silent \u003c- function( expr, type = \"output\", try = FALSE, silent = TRUE, ... ) {",
                                "process_lag_parameters":  "process_lag_parameters \u003c- function(p, trend_type) {",
                                "core_unloaded":  "core_unloaded \u003c- function() {",
                                "extract_trend_priors_only":  "extract_trend_priors_only \u003c- function(prior) {",
                                "roundlabs":  "roundlabs = function(x) {",
                                "conditional_effects.mvgam":  "conditional_effects.mvgam = function( x, effects = NULL, type = \u0027expected\u0027, points = FALSE, rug = FALSE, ... ) {",
                                "mvgam_trend_registry":  "mvgam_trend_registry \u003c- function() {",
                                "gen_fevd":  "gen_fevd \u003c- function(x, h = 6, ...) {",
                                "add_consistent_dispatch_metadata":  "add_consistent_dispatch_metadata \u003c- function(trend_obj) {",
                                "pool_parameter_estimates":  "pool_parameter_estimates \u003c- function(param_list) {",
                                "print.mvgam_formula":  "print.mvgam_formula \u003c- function(x, ...) {",
                                "apply_suffix_to_stan_code":  "apply_suffix_to_stan_code \u003c- function(stan_code, patterns, suffix) {",
                                "eval_trend_constructor":  "eval_trend_constructor \u003c- function(trend_call) {",
                                "gather_matrix":  "gather_matrix \u003c- function(mat) {",
                                "repair_variable_names":  "repair_variable_names \u003c- function(x) {",
                                "validate_pos_integer":  "validate_pos_integer \u003c- function(x, name = deparse(substitute(x))) {",
                                "generate_zmvn_trend_stanvars":  "generate_zmvn_trend_stanvars \u003c- function(trend_specs, data_info, prior = NULL) {",
                                "validate_data_code_compatibility":  "validate_data_code_compatibility \u003c- function(stan_code, stan_data) {",
                                "plot_mvgam_smooth":  "plot_mvgam_smooth = function( object, trend_effects = FALSE, series = 1, smooth, residuals = FALSE, n_resid_bins = 25, realisations = FALSE, n_realisations = 15, derivatives = FALSE, newdata ) {",
                                "extract_response_names":  "extract_response_names \u003c- function(formula) {",
                                "normalize_trend_type":  "normalize_trend_type \u003c- function(trend_type) {",
                                "filter_zmvn_forecast_params":  "filter_zmvn_forecast_params \u003c- function(monitor_params, trend_spec) {",
                                "validate_autocor_separation":  "validate_autocor_separation \u003c- function(obs_formula, trend_formula = NULL) {",
                                "Predict.matrix.moi.smooth":  "Predict.matrix.moi.smooth \u003c- function(object, data) {",
                                "validate_no_factor_hierarchical":  "validate_no_factor_hierarchical \u003c- function(trend_specs, n_series, trend_name) {",
                                "fevd_df":  "fevd_df = function(x, ynames) {",
                                "validate_multivariate_trend_constraints":  "validate_multivariate_trend_constraints \u003c- function(trend_formula, response_name) {",
                                "summary.mvgam_forecast":  "summary.mvgam_forecast = function(object, probs = c(0.025, 0.975), ...) {",
                                "as_draws_df.mvgam":  "as_draws_df.mvgam \u003c- function( x, variable = NULL, regex = FALSE, inc_warmup = FALSE, use_alias = TRUE, ... ) {",
                                "generate_stan_components_mvgam_formula":  "generate_stan_components_mvgam_formula \u003c- function(formula, data, family = gaussian(), prior = NULL, data2 = NULL, sample_prior = \"no\", sparse = NULL, knots = NULL, drop_unused_levels = TRUE, backend = \"rstan\", threads = getOption(\"mc.cores\", 1), normalize = TRUE, save_model = NULL, stan_funs = NULL, silent = 1L, stanvars = NULL, validate = TRUE, ...) {",
                                "plottable":  "plottable = function(x) {",
                                "validate_stan_data_structure":  "validate_stan_data_structure \u003c- function(stan_data) {",
                                "register_trend_type":  "register_trend_type \u003c- function(name, supports_factors = FALSE, generator_func, incompatibility_reason = NULL, prior_spec = NULL) {",
                                "generate_trend_priors":  "generate_trend_priors \u003c- function(trend_spec, data, response_names = NULL) {",
                                "plot.mvgam_lfo":  "plot.mvgam_lfo = function(x, ...) {",
                                "validate_no_brms_autocor_in_trends":  "validate_no_brms_autocor_in_trends \u003c- function(formula_str) {",
                                "var_trend_properties":  "var_trend_properties \u003c- function() {",
                                "as_draws_matrix.mvgam":  "as_draws_matrix.mvgam \u003c- function( x, variable = NULL, regex = FALSE, inc_warmup = FALSE, use_alias = TRUE, ... ) {",
                                "list_trend_types":  "list_trend_types \u003c- function() {",
                                "create_pooled_mvgam":  "create_pooled_mvgam \u003c- function(template_fit, pooled_estimates) {",
                                "get_coef.mvgam":  "get_coef.mvgam \u003c- function(model, trend_effects = FALSE, ...) {",
                                "apply_suffix_to_name":  "apply_suffix_to_name \u003c- function(name, patterns, suffix) {",
                                "ensemble.mvgam_forecast":  "ensemble.mvgam_forecast \u003c- function(object, ..., ndraws = 5000) {",
                                "inject_multivariate_trends_into_linear_predictors":  "inject_multivariate_trends_into_linear_predictors \u003c- function( base_stancode, trend_stanvars, responses_with_trends ) {",
                                "rename_parameters_in_block":  "rename_parameters_in_block \u003c- function(block_code, suffix, mapping, block_type, is_multivariate, response_names) {",
                                "generate_summary_labels":  "generate_summary_labels \u003c- function(trend_spec) {",
                                "generate_trend_priors_stanvar":  "generate_trend_priors_stanvar \u003c- function(param_names, prior = NULL, stanvar_name = \"trend_priors\") {",
                                "intersect_hist":  "intersect_hist = function(fullpreds, gampreds) {",
                                "generate_trend_priors_from_monitor_params":  "generate_trend_priors_from_monitor_params \u003c- function(trend_obj) {",
                                "validate_time_variable":  "validate_time_variable \u003c- function(time_var) {",
                                "add_mono_model_file":  "add_mono_model_file = function(model_file, model_data, mgcv_model) {",
                                "validate_plot_data":  "validate_plot_data \u003c- function(data, y) {",
                                "extract_mapping_arrays":  "extract_mapping_arrays \u003c- function(trend_stanvars) {",
                                "generate_pw_monitor_params":  "generate_pw_monitor_params \u003c- function(trend_spec) {",
                                "ppc.mvgam":  "ppc.mvgam \u003c- function( object, newdata, data_test, series = 1, type = \"hist\", n_bins, legend_position, xlab, ylab, ... ) {",
                                "smooth.construct.moi.smooth.spec":  "smooth.construct.moi.smooth.spec \u003c- function(object, data, knots) {",
                                "generate_parameter_label":  "generate_parameter_label \u003c- function(param_name, trend_type, trend_spec) {",
                                "Predict.matrix.mod.smooth":  "Predict.matrix.mod.smooth \u003c- function(object, data) {",
                                "stancode.mvgam_prefit":  "stancode.mvgam_prefit \u003c- function(object, ...) {",
                                "stability.mvgam":  "stability.mvgam = function(object, ...) {",
                                "validate_univariate_series_time":  "validate_univariate_series_time \u003c- function(data, name, time_var, series_var, check_levels, check_times) {",
                                "validate_no_addition_terms_in_trends":  "validate_no_addition_terms_in_trends \u003c- function(formula_str) {",
                                "add_residuals.mvgam":  "add_residuals.mvgam = function(object, ...) {",
                                "setup_brms_lightweight":  "setup_brms_lightweight \u003c- function(formula, data, family = gaussian(), trend_formula = NULL, stanvars = NULL, ...) {",
                                "validate_multiple_imputation_datasets":  "validate_multiple_imputation_datasets \u003c- function(data_list) {",
                                "zmvn_trend_properties":  "zmvn_trend_properties \u003c- function() {",
                                "mvgam_attach":  "mvgam_attach \u003c- function() {",
                                "get_trend_prior_spec":  "get_trend_prior_spec \u003c- function(trend_type) {",
                                "as_draws_list.mvgam":  "as_draws_list.mvgam \u003c- function( x, variable = NULL, regex = FALSE, inc_warmup = FALSE, use_alias = TRUE, ... ) {",
                                "set_coef.mvgam":  "set_coef.mvgam \u003c- function(model, coefs, trend_effects = FALSE, ...) {",
                                "generate_matrix_z_multiblock_stanvars":  "generate_matrix_z_multiblock_stanvars \u003c- function(is_factor_model, n_lv, n_series) {",
                                "apply_mvgam_trend_defaults":  "apply_mvgam_trend_defaults \u003c- function(trend_obj) {",
                                "extract_multivariate_standata":  "extract_multivariate_standata \u003c- function(standata, suffix, mapping, response_names) {",
                                "extract_hierarchical_info":  "extract_hierarchical_info \u003c- function(data_info, trend_specs) {",
                                "validate_factor_levels":  "validate_factor_levels \u003c- function(data, var_name, data_name = \"data\", auto_drop = FALSE) {",
                                "ecdf_plotdat":  "ecdf_plotdat \u003c- function(vals, x) {",
                                "create_trend_brmsfit":  "create_trend_brmsfit \u003c- function(combined_fit, trend_setup, mv_spec) {",
                                "validate_single_trend_formula":  "validate_single_trend_formula \u003c- function(formula, context = NULL, allow_response = FALSE) {",
                                "extract_non_likelihood_from_model_block":  "extract_non_likelihood_from_model_block \u003c- function(model_block) {",
                                "create_times_trend_matrix":  "create_times_trend_matrix \u003c- function(n_time, n_series, unique_times, unique_series, matrix_name) {",
                                "ordinate.jsdgam":  "ordinate.jsdgam \u003c- function( object, which_lvs = c(1, 2), biplot = TRUE, alpha = 0.5, label_sites = TRUE, ... ) {",
                                "extract_observation_priors_from_enhanced":  "extract_observation_priors_from_enhanced \u003c- function(prior) {",
                                "fit_multiple_imputation_models":  "fit_multiple_imputation_models \u003c- function(formula, trend_formula, data_list, backend, ...) {",
                                "are_braces_balanced":  "are_braces_balanced \u003c- function(stan_code) {",
                                "generate_stan_array_declaration":  "generate_stan_array_declaration \u003c- function(var_name, var_type, dimensions, data_matrix) {",
                                "find_predictors.mvgam_prefit":  "find_predictors.mvgam_prefit = function( x, effects = c(\u0027fixed\u0027, \u0027random\u0027, \u0027all\u0027), component = c( \u0027all\u0027, \u0027conditional\u0027, \u0027zi\u0027, \u0027zero_inflated\u0027, \u0027dispersion\u0027, \u0027instruments\u0027, \u0027correlation\u0027, \u0027smooth_terms\u0027 ), flatten = FALSE, verbose = TRUE, ... ) {",
                                "samp_noinf":  "samp_noinf = function(x) {",
                                "validate_trend_parameter_class":  "validate_trend_parameter_class \u003c- function(class) {",
                                "var1_recursC":  "var1_recursC \u003c- function(A, linpreds, errors, drift, last_trends, h) {",
                                "extract_trend_stanvars_from_setup":  "extract_trend_stanvars_from_setup \u003c- function(trend_setup, trend_specs, response_suffix = \"\", response_name = NULL, obs_setup = NULL) {",
                                "extract_univariate_standata":  "extract_univariate_standata \u003c- function(standata, suffix, mapping) {",
                                "generate_var_monitor_params":  "generate_var_monitor_params \u003c- function(trend_spec) {",
                                "extract_observation_parameters":  "extract_observation_parameters \u003c- function(combined_fit) {",
                                "get_prior":  "get_prior \u003c- function(object, ...) {",
                                "add_complete_metadata":  "add_complete_metadata \u003c- function(trend_obj) {",
                                "extract_fit_estimates":  "extract_fit_estimates \u003c- function(fit) {",
                                "add_summary_labels":  "add_summary_labels \u003c- function(trend_obj) {",
                                "fevd":  "fevd \u003c- function(object, ...) {",
                                "get_prior.brmsformula":  "get_prior.brmsformula \u003c- function(object, ...) {",
                                "get_prior.mvgam_formula":  "get_prior.mvgam_formula \u003c- function(object, data, family = gaussian(), ...) {",
                                "fit_mvgam_model":  "fit_mvgam_model \u003c- function(stancode, standata, backend = \"cmdstanr\", ...) {",
                                "rename_multivariate_parameters":  "rename_multivariate_parameters \u003c- function(code, suffix, mapping, response_names) {",
                                "generate_car_monitor_params":  "generate_car_monitor_params \u003c- function(trend_spec) {",
                                "apply_safe_parameter_replacement":  "apply_safe_parameter_replacement \u003c- function(code, old_name, new_name) {",
                                "prepare_stan_data":  "prepare_stan_data \u003c- function(data, variable_info) {",
                                "apply_validation_rules":  "apply_validation_rules \u003c- function(trend_specs, data) {",
                                "dyn_to_gpspline":  "dyn_to_gpspline = function(term, N) {",
                                "print.how_to_cite":  "print.how_to_cite \u003c- function(x, ...) {",
                                "tidy.mvgam":  "tidy.mvgam \u003c- function(x, probs = c(0.025, 0.5, 0.975), ...) {",
                                "validate_stan_code_fragment":  "validate_stan_code_fragment \u003c- function(fragment, expected_content = NULL, expected_block = NULL) {",
                                "residual_cor.mvgam":  "residual_cor.mvgam \u003c- function( object, summary = TRUE, robust = FALSE, probs = c(0.025, 0.975), ... ) {",
                                "generate_matrix_z_parameters":  "generate_matrix_z_parameters \u003c- function(is_factor_model, n_lv, n_series) {",
                                "parse_trend_formula":  "parse_trend_formula \u003c- function(trend_formula, data = NULL) {",
                                "integrate_nonlinear_with_assembly":  "integrate_nonlinear_with_assembly \u003c- function(obs_setup, trend_specs) {",
                                "plot.mvgam_residcor":  "plot.mvgam_residcor = function(x, cluster = FALSE, ...) {",
                                "ordinate":  "ordinate \u003c- function(object, ...) {",
                                "is_trend_term":  "is_trend_term \u003c- function(expr, trend_patterns) {",
                                "filter_rw_forecast_params":  "filter_rw_forecast_params \u003c- function(monitor_params, trend_spec) {",
                                "random_Sigma":  "random_Sigma = function(N) {",
                                "extract_and_rename_stan_blocks":  "extract_and_rename_stan_blocks \u003c- function(stancode, suffix, mapping, is_multivariate, response_names, standata = NULL) {",
                                "inject_trend_into_glm_predictor":  "inject_trend_into_glm_predictor \u003c- function(base_stancode, trend_stanvars, glm_type) {",
                                "log_mean_exp":  "log_mean_exp \u003c- function(x) {",
                                "parse_glm_parameters":  "parse_glm_parameters \u003c- function(stan_code, glm_type) {",
                                "get_car_parameter_prior":  "get_car_parameter_prior \u003c- function(param_name, trend_obj) {",
                                "extract_response_from_formula":  "extract_response_from_formula \u003c- function(formula) {",
                                "plot_mvgam_factors":  "plot_mvgam_factors = function(object, plot = TRUE) {",
                                "split_mod_dots":  "split_mod_dots = function(x, ..., model_names = NULL, other = TRUE) {",
                                "extract_nonlinear_components":  "extract_nonlinear_components \u003c- function(formula) {",
                                "validate_brms_formula":  "validate_brms_formula \u003c- function(formula) {",
                                "sum_rows":  "sum_rows = function(x) {",
                                "plot.mvgam_forecast":  "plot.mvgam_forecast = function( x, series = 1, realisations = FALSE, n_realisations = 15, xlab, ylab, ylim, ... ) {",
                                "dynamic":  "dynamic = function(variable, k, rho = 5, stationary = TRUE, scale = TRUE) {",
                                "parse_nonlinear_manually":  "parse_nonlinear_manually \u003c- function(formula) {",
                                "extract_time_information":  "extract_time_information \u003c- function(data) {",
                                "extract_trend_parameters":  "extract_trend_parameters \u003c- function(combined_fit, mv_spec) {",
                                "variables.mvgam":  "variables.mvgam = function(x, ...) {",
                                "extract_code_block":  "extract_code_block \u003c- function(code_lines, block_name) {",
                                "get_trend_dispatch_function":  "get_trend_dispatch_function \u003c- function(trend_type, function_type) {",
                                "add_trend_component_attr":  "add_trend_component_attr \u003c- function(prior, component = NULL) {",
                                "generate_times_trend_matrices":  "generate_times_trend_matrices \u003c- function(n_time, n_series, unique_times, unique_series, is_multivariate, response_names) {",
                                "get_validation_rule_dispatch_table":  "get_validation_rule_dispatch_table \u003c- function() {",
                                "get_data.mvgam":  "get_data.mvgam = function(x, source = \"environment\", verbose = TRUE, ...) {",
                                "get_default_trend_parameter_prior":  "get_default_trend_parameter_prior \u003c- function(param_name, trend_obj) {",
                                "augment.mvgam":  "augment.mvgam \u003c- function(x, robust = FALSE, probs = c(0.025, 0.975), ...) {",
                                "prepare_stanvars_for_brms":  "prepare_stanvars_for_brms \u003c- function(stanvars) {",
                                "process_arg":  "process_arg \u003c- function(x) {",
                                "cluster_cormat":  "cluster_cormat \u003c- function(cormat, ...) {",
                                "validate_list_trend_formula":  "validate_list_trend_formula \u003c- function(formula_list) {",
                                "pw_trend_properties":  "pw_trend_properties \u003c- function() {",
                                "warn_default_series_variable":  "warn_default_series_variable \u003c- function() {",
                                "xts.to.ts":  "xts.to.ts \u003c- function(x, freq = 52) {",
                                "extract_trend_priors":  "extract_trend_priors \u003c- function(trend_formula, data, response_names = NULL) {",
                                "validate_bf_trend_formula":  "validate_bf_trend_formula \u003c- function(bf_obj) {",
                                "register_core_trends":  "register_core_trends \u003c- function() {",
                                "auto_register_trend_types":  "auto_register_trend_types \u003c- function() {",
                                "split_fc_dots":  "split_fc_dots = function(x, ..., model_names = NULL, other = TRUE) {",
                                "rename_univariate_parameters":  "rename_univariate_parameters \u003c- function(code, suffix, mapping) {",
                                "generate_base_brms_standata":  "generate_base_brms_standata \u003c- function(formula, data, family = gaussian(), stanvars = NULL) {",
                                "remove_trend_expressions":  "remove_trend_expressions \u003c- function(expr, trend_patterns, depth = 0) {",
                                "validate_multivariate_series_time":  "validate_multivariate_series_time \u003c- function(data, name, time_var, check_times) {",
                                "validate_pos_real":  "validate_pos_real \u003c- function(x, name = deparse(substitute(x))) {",
                                "plot_mvgam_fc":  "plot_mvgam_fc = function( object, series = 1, newdata, data_test, realisations = FALSE, n_realisations = 15, hide_xlabels = FALSE, xlab, ylab, ylim, n_cores = 1, return_forecasts = FALSE, return_score = FALSE, ... ) {",
                                "generate_obs_trend_mapping":  "generate_obs_trend_mapping \u003c- function(data, response_var, time_var = \"time\", series_var = \"series\", dimensions = NULL) {",
                                "filter_block_content":  "filter_block_content \u003c- function(block_content, block_type = \"model\") {",
                                "print.mvgam_conditional_effects":  "print.mvgam_conditional_effects \u003c- function(x, ...) {",
                                "transform_glm_call":  "transform_glm_call \u003c- function(stan_code, glm_type, params) {",
                                "sim_mvgam":  "sim_mvgam = function( T = 100, n_series = 3, seasonality = \u0027shared\u0027, use_lv = FALSE, n_lv = 0, trend_model = RW(), drift = FALSE, prop_trend = 0.2, trend_rel, freq = 12, family = poisson(), phi, shape, sigma, nu, mu, prop_missing = 0, prop_train = 0.85 ) {",
                                "validate_trend_formula_brms":  "validate_trend_formula_brms \u003c- function(trend_formula) {",
                                "extract_regular_terms":  "extract_regular_terms \u003c- function(formula_terms) {",
                                "error":  "error = function(x) {",
                                "gen_irf":  "gen_irf \u003c- function(x, h = 6, cumulative = TRUE, orthogonal = FALSE) {",
                                "as_draws_array.mvgam":  "as_draws_array.mvgam \u003c- function( x, variable = NULL, regex = FALSE, inc_warmup = FALSE, use_alias = TRUE, ... ) {",
                                "extract_response_trends":  "extract_response_trends \u003c- function(trend_formula, response_names, validate_separate = FALSE) {",
                                "get_data.mvgam_prefit":  "get_data.mvgam_prefit = function( x, source = \"environment\", verbose = TRUE, ... ) {",
                                "mvgam_multiple":  "mvgam_multiple \u003c- function(formula, trend_formula = NULL, data_list, backend = NULL, combine = TRUE, ...) {",
                                "build_trend_label":  "build_trend_label \u003c- function(type, cor = FALSE, ma = FALSE, gr = \u0027NA\u0027, n_lv = NULL, p = NULL) {",
                                "append_if_not_null":  "append_if_not_null \u003c- function(components, new_component) {",
                                "sim_seasonal":  "sim_seasonal = function(T, freq = 12) {",
                                "standardize_brmsprior_columns":  "standardize_brmsprior_columns \u003c- function(prior_obj) {",
                                "pool_mvgam_fits":  "pool_mvgam_fits \u003c- function(fits) {",
                                "extract_all_bf_formulas":  "extract_all_bf_formulas \u003c- function(bf_obj) {",
                                "validate_and_process_trend_parameters":  "validate_and_process_trend_parameters \u003c- function(trend_spec, data) {",
                                "validate_stan_code":  "validate_stan_code \u003c- function(stan_code, backend = \"rstan\", silent = TRUE, ...) {",
                                "validate_mapping_arrays":  "validate_mapping_arrays \u003c- function(mapping_arrays) {",
                                "reorder_clusters":  "reorder_clusters \u003c- function(x, dis, ...) {",
                                "extract_mvbind_responses":  "extract_mvbind_responses \u003c- function(formula) {",
                                "plot_mvgam_trend":  "plot_mvgam_trend = function( object, series = 1, newdata, data_test, realisations = FALSE, n_realisations = 15, n_cores = 1, derivatives = FALSE, xlab, ylab ) {",
                                "validate_regular_time_intervals":  "validate_regular_time_intervals \u003c- function(time_values, time_var = \"time\") {",
                                "generate_monitor_params":  "generate_monitor_params \u003c- function(trend_spec) {",
                                "generate_base_stancode_with_stanvars":  "generate_base_stancode_with_stanvars \u003c- function(obs_setup, trend_stanvars, backend = \"rstan\", silent = 1) {",
                                "extract_stan_block_content":  "extract_stan_block_content \u003c- function(stancode, block_name) {",
                                "extract_mvgam_components":  "extract_mvgam_components \u003c- function(combined_fit, obs_setup, trend_setup, mv_spec) {",
                                "validate_correlation_requirements":  "validate_correlation_requirements \u003c- function(gr, cor) {",
                                "validate_missing_patterns":  "validate_missing_patterns \u003c- function(data_list) {",
                                "combine_obs_trend_priors":  "combine_obs_trend_priors \u003c- function(obs_priors, trend_priors) {",
                                "plot_histogram":  "plot_histogram \u003c- function(dat, ylab = \u0027y\u0027, n_bins = NULL) {",
                                "as.matrix.mvgam":  "as.matrix.mvgam = function( x, variable = \u0027betas\u0027, regex = FALSE, use_alias = TRUE, ... ) {",
                                "deparse0":  "deparse0 \u003c- function(expr, ...) {",
                                "generate_zmvn_monitor_params":  "generate_zmvn_monitor_params \u003c- function(trend_spec) {",
                                "plot.mvgam_irf":  "plot.mvgam_irf = function(x, series = 1, ...) {",
                                "extract_time_series_dimensions":  "extract_time_series_dimensions \u003c- function(data, time_var = \"time\", series_var = \"series\", trend_type = NULL, trend_specs = NULL, response_vars = NULL) {",
                                "insert_into_stan_block":  "insert_into_stan_block \u003c- function(code_lines, block_name, insertion_code) {",
                                "apply_rubins_rules":  "apply_rubins_rules \u003c- function(estimates_list) {",
                                "parse_model_rstan":  "parse_model_rstan \u003c- function(model, silent = 1, ...) {",
                                "fevd.mvgam":  "fevd.mvgam \u003c- function(object, h = 10, ...) {",
                                "extract_stan_identifiers":  "extract_stan_identifiers \u003c- function(stan_code) {",
                                "lfo_cv.mvgam":  "lfo_cv.mvgam = function( object, data, min_t, fc_horizon = 1, pareto_k_threshold = 0.7, silent = 1, ... ) {",
                                "named_list":  "named_list = function(names, values = NULL) {",
                                "validate_grouping_structure":  "validate_grouping_structure = function(data, trend_model, name = \u0027data\u0027) {",
                                "all_times_avail":  "all_times_avail = function(time, min_time, max_time) {",
                                "find_predictors.mvgam":  "find_predictors.mvgam = function( x, effects = c(\u0027fixed\u0027, \u0027random\u0027, \u0027all\u0027), component = c( \u0027all\u0027, \u0027conditional\u0027, \u0027zi\u0027, \u0027zero_inflated\u0027, \u0027dispersion\u0027, \u0027instruments\u0027, \u0027correlation\u0027, \u0027smooth_terms\u0027 ), flatten = FALSE, verbose = TRUE, ... ) {",
                                "validate_series_time":  "validate_series_time = function( data, name = \u0027data\u0027, time_var, series_var = NULL, check_levels = TRUE, check_times = TRUE, is_multivariate = FALSE ) {",
                                "stancode.mvgam":  "stancode.mvgam \u003c- function(object, ...) {",
                                "smooth.construct.mod.smooth.spec":  "smooth.construct.mod.smooth.spec \u003c- function(object, data, knots) {",
                                "inject_trend_into_linear_predictor":  "inject_trend_into_linear_predictor \u003c- function(base_stancode, trend_stanvars) {",
                                "insert_after_mu_lines_in_model_block":  "insert_after_mu_lines_in_model_block \u003c- function(code_lines, trend_injection_code) {",
                                "ar_trend_properties":  "ar_trend_properties \u003c- function() {",
                                "calculate_car_time_distances":  "calculate_car_time_distances \u003c- function(data_info) {",
                                "generate_ar_trend_stanvars":  "generate_ar_trend_stanvars \u003c- function(trend_specs, data_info, prior = NULL) {",
                                "plot_mvgam_pterms":  "plot_mvgam_pterms = function(object, trend_effects = FALSE) {",
                                "formula2str_mvgam":  "formula2str_mvgam \u003c- function(formula, space = \"trim\") {",
                                "validate_trend_hierarchical_structure":  "validate_trend_hierarchical_structure \u003c- function(trend_spec, data) {",
                                "validate_trend_dispatch_consistency":  "validate_trend_dispatch_consistency \u003c- function(trend_obj) {",
                                "extract_prior_from_setup":  "extract_prior_from_setup \u003c- function(setup_object) {",
                                "generate_var_trend_stanvars":  "generate_var_trend_stanvars \u003c- function(trend_specs, data_info, prior = NULL) {",
                                "create_mvgam_from_combined_fit":  "create_mvgam_from_combined_fit \u003c- function(combined_fit, obs_setup, trend_setup = NULL, mv_spec = NULL) {",
                                "as_one_logical":  "as_one_logical = function(x, allow_na = FALSE) {",
                                "process_capacity_parameter":  "process_capacity_parameter \u003c- function(cap, data) {",
                                "plot.mvgam_conditional_effects":  "plot.mvgam_conditional_effects = function(x, plot = TRUE, ask = FALSE, ...) {",
                                "plot_mvgam_randomeffects":  "plot_mvgam_randomeffects = function(object, trend_effects = FALSE) {",
                                "c.trend_param":  "c.trend_param \u003c- function(x, ..., replace = FALSE) {",
                                "handle_nse_param":  "handle_nse_param \u003c- function(expr) {",
                                "extract_observation_priors_only":  "extract_observation_priors_only \u003c- function(prior) {",
                                "ppc":  "ppc \u003c- function(object, ...) {",
                                "create_empty_brmsprior":  "create_empty_brmsprior \u003c- function() {",
                                "detect_glm_usage":  "detect_glm_usage \u003c- function(stan_code, response_names = NULL) {",
                                "register_custom_trend":  "register_custom_trend \u003c- function(name, supports_factors = FALSE, generator_func, incompatibility_reason = NULL) {",
                                "evaluate_param_conditions":  "evaluate_param_conditions \u003c- function(param_spec, envir = parent.frame()) {",
                                "print.mvgam":  "print.mvgam = function(x, ...) {",
                                "seq_rows":  "seq_rows = function(x) {",
                                "validate_trend_components":  "validate_trend_components \u003c- function(trend_components) {",
                                "build_ar_prior_spec":  "build_ar_prior_spec \u003c- function(lags, ar_prior_base = NULL, include_sigma = TRUE, include_common = TRUE) {",
                                "filter_pw_forecast_params":  "filter_pw_forecast_params \u003c- function(monitor_params, trend_spec) {",
                                "as_draws.mvgam":  "as_draws.mvgam \u003c- function( x, variable = NULL, regex = FALSE, inc_warmup = FALSE, use_alias = TRUE, ... ) {",
                                "create_observation_brmsfit":  "create_observation_brmsfit \u003c- function(combined_fit, obs_setup, mv_spec) {",
                                "VAR":  "VAR = function(time = NA, series = NA, p = 1, ma = FALSE, gr = NA, subgr = NA, n_lv = NULL) {",
                                "print.mvgam_prefit":  "print.mvgam_prefit = function(x, ...) {",
                                "validate_combined_stancode":  "validate_combined_stancode \u003c- function(result, silent = FALSE) {",
                                "generate_common_trend_data":  "generate_common_trend_data \u003c- function(n_obs, n_series, n_lv = NULL, is_factor_model = NULL) {",
                                "generate_forecast_required_params":  "generate_forecast_required_params \u003c- function(trend_spec, trend_type) {",
                                "ensure_registry_initialized":  "ensure_registry_initialized \u003c- function() {",
                                "extract_response_names_from_brmsfit":  "extract_response_names_from_brmsfit \u003c- function(brmsfit) {",
                                "get_vcov.mvgam":  "get_vcov.mvgam \u003c- function(model, vcov = NULL, ...) {",
                                "custom_trend":  "custom_trend \u003c- function(trend, tpars, forecast_fun, stancode_fun, standata_fun = NULL, bounds = list(), characteristics = list(), ...) {",
                                "find_stan_block":  "find_stan_block \u003c- function(code_lines, block_name) {",
                                "format_matrix_for_stan_array":  "format_matrix_for_stan_array \u003c- function(matrix) {",
                                "CAR":  "CAR = function(time = NA, series = NA) {",
                                "plot_mvgam_resids":  "plot_mvgam_resids = function( object, series = 1, n_draws = 100L, n_points = 1000L ) {",
                                "validate_proportional":  "validate_proportional \u003c- function(x, name = deparse(substitute(x))) {",
                                "standata.mvgam_formula":  "standata.mvgam_formula \u003c- function(object, data, family = gaussian(), prior = NULL, data2 = NULL, sample_prior = \"no\", sparse = NULL, knots = NULL, drop_unused_levels = TRUE, stanvars = NULL, threads = getOption(\"mc.cores\", 1), ...) {",
                                "generate_hierarchical_correlation_parameters":  "generate_hierarchical_correlation_parameters \u003c- function(n_groups, n_subgroups) {",
                                "plot.mvgam":  "plot.mvgam = function( x, type = \u0027residuals\u0027, series = 1, residuals = FALSE, newdata, data_test, trend_effects = FALSE, ... ) {",
                                "get_parameter_type_default_prior":  "get_parameter_type_default_prior \u003c- function(param_name) {",
                                "get_prior.default":  "get_prior.default \u003c- function(object, ...) {",
                                "add_forecast_metadata":  "add_forecast_metadata \u003c- function(trend_obj) {",
                                "is_valid_stanvar":  "is_valid_stanvar \u003c- function(stanvar) {",
                                "has_embedded_families":  "has_embedded_families \u003c- function(formula) {",
                                "generate_pw_trend_stanvars":  "generate_pw_trend_stanvars \u003c- function(trend_specs, data_info, growth = NULL, prior = NULL) {",
                                "pp_check.mvgam":  "pp_check.mvgam \u003c- function( object, type, ndraws = NULL, prefix = c(\"ppc\", \"ppd\"), group = NULL, x = NULL, newdata = NULL, ... ) {",
                                "extract_series_information":  "extract_series_information \u003c- function(data, mv_spec) {",
                                "modify_stancode_for_nonlinear":  "modify_stancode_for_nonlinear \u003c- function(stancode, nl_info, trend_specs) {",
                                "var_psi":  "var_psi \u003c- function(x, h = 10) {",
                                "generate_trend_computation_tparameters":  "generate_trend_computation_tparameters \u003c- function(n_lv, n_series) {",
                                "repair_stanfit":  "repair_stanfit \u003c- function(x) {",
                                "extract_and_rename_trend_parameters":  "extract_and_rename_trend_parameters \u003c- function(trend_setup, dimensions, suffix = \"_trend\") {",
                                "validate_setup_components":  "validate_setup_components \u003c- function(components) {",
                                "generate_matrix_z_tdata":  "generate_matrix_z_tdata \u003c- function(is_factor_model, n_lv, n_series) {",
                                "check_semicolon_syntax":  "check_semicolon_syntax \u003c- function(stan_code) {",
                                "plot_acf":  "plot_acf \u003c- function(dat) {",
                                "add_residuals":  "add_residuals \u003c- function(object, ...) {",
                                "process_trend_params":  "process_trend_params \u003c- function(param_specs, envir = parent.frame()) {",
                                "check_brms_autocor_usage":  "check_brms_autocor_usage \u003c- function(formula_str) {",
                                "validate_trend_correlation":  "validate_trend_correlation \u003c- function(trend_spec, data) {",
                                "irf":  "irf \u003c- function(object, ...) {",
                                "plot_mvgam_uncertainty":  "plot_mvgam_uncertainty = function( object, series = 1, newdata, data_test, legend_position = \u0027topleft\u0027, hide_xlabels = FALSE ) {",
                                "lfo_cv":  "lfo_cv \u003c- function(object, ...) {",
                                "generate_factor_model":  "generate_factor_model \u003c- function(is_factor_model, n_lv) {",
                                "ensemble":  "ensemble \u003c- function(object, ...) {",
                                "add_monitor_params":  "add_monitor_params \u003c- function(trend_obj) {",
                                "determine_trend_injection_point":  "determine_trend_injection_point \u003c- function(nl_components, trend_specs) {",
                                "get_prior.formula":  "get_prior.formula \u003c- function(object, ...) {",
                                "pairs.mvgam":  "pairs.mvgam \u003c- function( x, variable = NULL, regex = FALSE, use_alias = TRUE, ... ) {",
                                "extract_pooling_diagnostics":  "extract_pooling_diagnostics \u003c- function(pooled_estimates) {",
                                "validate_trend_grouping":  "validate_trend_grouping \u003c- function(trend_spec, data) {",
                                "mvgam_single_dataset":  "mvgam_single_dataset \u003c- function(formula, trend_formula, data, backend, family, ...) {",
                                "generate_trend_specific_stanvars":  "generate_trend_specific_stanvars \u003c- function(trend_specs, data_info, response_suffix = \"\", prior = NULL) {",
                                "summary.mvgam_fevd":  "summary.mvgam_fevd = function(object, probs = c(0.025, 0.975), ...) {",
                                "create_mvgam_trend":  "create_mvgam_trend \u003c- function(trend_type, ..., .time = NULL, .series = NULL, .gr = NULL, .subgr = NULL, .cap = NULL, .validation_rules = NULL) {",
                                "loo_compare.mvgam":  "loo_compare.mvgam \u003c- function( x, ..., model_names = NULL, incl_dynamics = FALSE ) {",
                                "get_ar_parameter_prior":  "get_ar_parameter_prior \u003c- function(param_name, trend_obj) {",
                                "parse_base_formula_safe":  "parse_base_formula_safe \u003c- function(trend_formula, trend_terms) {",
                                "validate_time_series_for_trends":  "validate_time_series_for_trends \u003c- function(data, trend_specs, silent = 1, response_vars = NULL) {",
                                "validate_factor_compatibility":  "validate_factor_compatibility \u003c- function(trend_spec) {",
                                "parse_multivariate_trends":  "parse_multivariate_trends \u003c- function(formula, trend_formula = NULL) {",
                                "validate_stan_code_structure":  "validate_stan_code_structure \u003c- function(stan_code) {",
                                "extract_stan_block":  "extract_stan_block \u003c- function(stancode, block_name) {",
                                "split_hier_Sigma":  "split_hier_Sigma \u003c- function(object, params) {",
                                "ZMVN":  "ZMVN = function(time = NA, series = NA, gr = NA, subgr = NA, n_lv = NULL) {",
                                "var_fecov":  "var_fecov \u003c- function(x, h) {",
                                "filter_renameable_identifiers":  "filter_renameable_identifiers \u003c- function(identifiers) {",
                                "extract_prior_string":  "extract_prior_string \u003c- function(prior_frame, class_name, coef_name = NULL, handle_suffix = TRUE) {",
                                "log_sum_exp":  "log_sum_exp \u003c- function(x) {",
                                "dispatch_validation_rule":  "dispatch_validation_rule \u003c- function(rule, trend_spec, data) {",
                                "get_default_incompatibility_reason":  "get_default_incompatibility_reason \u003c- function(name) {",
                                "extract_and_rename_standata_objects":  "extract_and_rename_standata_objects \u003c- function(standata, suffix, mapping, is_multivariate, response_names) {",
                                "is_try_error":  "is_try_error \u003c- function(x) {",
                                "get_stan_reserved_words":  "get_stan_reserved_words \u003c- function() {",
                                "AR":  "AR = function(time = NA, series = NA, p = 1, ma = FALSE, cor = FALSE, gr = NA, subgr = NA, n_lv = NULL) {",
                                "residual_cor.jsdgam":  "residual_cor.jsdgam \u003c- function( object, summary = TRUE, robust = FALSE, probs = c(0.025, 0.975), ... ) {",
                                "validate_trend_parameter_bounds":  "validate_trend_parameter_bounds \u003c- function(class, lb, ub) {",
                                "as.data.frame.mvgam":  "as.data.frame.mvgam = function( x, row.names = NULL, optional = TRUE, variable = \u0027betas\u0027, use_alias = TRUE, regex = FALSE, ... ) {",
                                "rw_trend_properties":  "rw_trend_properties \u003c- function() {",
                                "cv_split":  "cv_split = function(data, last_train, fc_horizon = 1) {",
                                "validate_trend_factor_compatibility":  "validate_trend_factor_compatibility \u003c- function(trend_spec, data) {",
                                "validate_trend_properties":  "validate_trend_properties \u003c- function(trend_info, trend_type, func_name) {",
                                "get_factor_compatible_trends":  "get_factor_compatible_trends \u003c- function() {",
                                "get_trend_parameter_prior":  "get_trend_parameter_prior \u003c- function(prior = NULL, param_name) {",
                                "print.trend_param":  "print.trend_param \u003c- function(x, ...) {",
                                "validate_offsets_in_obs":  "validate_offsets_in_obs \u003c- function(formula) {",
                                "car_trend_properties":  "car_trend_properties \u003c- function() {",
                                "generate_base_brms_stancode":  "generate_base_brms_stancode \u003c- function(formula, data, family = gaussian(), stanvars = NULL, backend = \"rstan\") {"
                            },
    "detailed_analysis":  {
                              "validate_variables":  {
                                                         "s3_class":  "",
                                                         "s3_method":  "",
                                                         "signature":  "validate_variables = function(x, variable, regex = FALSE) {",
                                                         "is_s3_method":  false,
                                                         "arguments":  [
                                                                           "x",
                                                                           "variable",
                                                                           "regex"
                                                                       ]
                                                     },
                              "validate_no_multiple_trend_constructors":  {
                                                                              "s3_class":  "",
                                                                              "s3_method":  "",
                                                                              "signature":  "validate_no_multiple_trend_constructors \u003c- function(formula_str) {",
                                                                              "is_s3_method":  false,
                                                                              "arguments":  "formula_str"
                                                                          },
                              "warn_default_time_variable":  {
                                                                 "s3_class":  "",
                                                                 "s3_method":  "",
                                                                 "signature":  "warn_default_time_variable \u003c- function() {",
                                                                 "is_s3_method":  false,
                                                                 "arguments":  null
                                                             },
                              "lkj_corr":  {
                                               "s3_class":  "",
                                               "s3_method":  "",
                                               "signature":  "lkj_corr \u003c- function(n_series, eta = 0.8) {",
                                               "is_s3_method":  false,
                                               "arguments":  [
                                                                 "n_series",
                                                                 "eta"
                                                             ]
                                           },
                              "irf.mvgam":  {
                                                "s3_class":  "mvgam",
                                                "s3_method":  "irf",
                                                "signature":  "irf.mvgam \u003c- function( object, h = 10, cumulative = FALSE, orthogonal = FALSE, ... ) {",
                                                "is_s3_method":  true,
                                                "arguments":  [
                                                                  "object",
                                                                  "h",
                                                                  "cumulative",
                                                                  "orthogonal"
                                                              ]
                                            },
                              "is.mvgam_trend":  {
                                                     "s3_class":  "mvgam_trend",
                                                     "s3_method":  "is",
                                                     "signature":  "is.mvgam_trend \u003c- function(x) {",
                                                     "is_s3_method":  true,
                                                     "arguments":  "x"
                                                 },
                              "how_to_cite":  {
                                                  "s3_class":  "",
                                                  "s3_method":  "",
                                                  "signature":  "how_to_cite \u003c- function(object, ...) {",
                                                  "is_s3_method":  false,
                                                  "arguments":  "object"
                                              },
                              "validate_correlation_requirements":  {
                                                                        "s3_class":  "",
                                                                        "s3_method":  "",
                                                                        "signature":  "validate_correlation_requirements \u003c- function(gr, cor) {",
                                                                        "is_s3_method":  false,
                                                                        "arguments":  [
                                                                                          "gr",
                                                                                          "cor"
                                                                                      ]
                                                                    },
                              "plot.mvgam_fevd":  {
                                                      "s3_class":  "mvgam_fevd",
                                                      "s3_method":  "plot",
                                                      "signature":  "plot.mvgam_fevd = function(x, ...) {",
                                                      "is_s3_method":  true,
                                                      "arguments":  "x"
                                                  },
                              "generate_rw_trend_stanvars":  {
                                                                 "s3_class":  "",
                                                                 "s3_method":  "",
                                                                 "signature":  "generate_rw_trend_stanvars \u003c- function(trend_specs, data_info, prior = NULL) {",
                                                                 "is_s3_method":  false,
                                                                 "arguments":  [
                                                                                   "trend_specs",
                                                                                   "data_info",
                                                                                   "prior"
                                                                               ]
                                                             },
                              "plot_acf":  {
                                               "s3_class":  "",
                                               "s3_method":  "",
                                               "signature":  "plot_acf \u003c- function(dat) {",
                                               "is_s3_method":  false,
                                               "arguments":  "dat"
                                           },
                              "mvgam_formula":  {
                                                    "s3_class":  "",
                                                    "s3_method":  "",
                                                    "signature":  "mvgam_formula \u003c- function(formula, trend_formula = NULL) {",
                                                    "is_s3_method":  false,
                                                    "arguments":  [
                                                                      "formula",
                                                                      "trend_formula"
                                                                  ]
                                                },
                              "loo.mvgam":  {
                                                "s3_class":  "mvgam",
                                                "s3_method":  "loo",
                                                "signature":  "loo.mvgam \u003c- function(x, incl_dynamics = FALSE, ...) {",
                                                "is_s3_method":  true,
                                                "arguments":  [
                                                                  "x",
                                                                  "incl_dynamics"
                                                              ]
                                            },
                              "split_termlabs":  {
                                                     "s3_class":  "",
                                                     "s3_method":  "",
                                                     "signature":  "split_termlabs = function(lab) {",
                                                     "is_s3_method":  false,
                                                     "arguments":  "lab"
                                                 },
                              "varma_recursC":  {
                                                    "s3_class":  "",
                                                    "s3_method":  "",
                                                    "signature":  "varma_recursC \u003c- function(A, A2, A3, theta, linpreds, errors, drift, last_trends, h) {",
                                                    "is_s3_method":  false,
                                                    "arguments":  [
                                                                      "A",
                                                                      "A2",
                                                                      "A3",
                                                                      "theta",
                                                                      "linpreds",
                                                                      "errors",
                                                                      "drift",
                                                                      "last_trends",
                                                                      "h"
                                                                  ]
                                                },
                              "filter_car_forecast_params":  {
                                                                 "s3_class":  "",
                                                                 "s3_method":  "",
                                                                 "signature":  "filter_car_forecast_params \u003c- function(monitor_params, trend_spec) {",
                                                                 "is_s3_method":  false,
                                                                 "arguments":  [
                                                                                   "monitor_params",
                                                                                   "trend_spec"
                                                                               ]
                                                             },
                              "detect_shared_trends":  {
                                                           "s3_class":  "",
                                                           "s3_method":  "",
                                                           "signature":  "detect_shared_trends \u003c- function(specs) {",
                                                           "is_s3_method":  false,
                                                           "arguments":  "specs"
                                                       },
                              "get_trend_dispatch_function":  {
                                                                  "s3_class":  "",
                                                                  "s3_method":  "",
                                                                  "signature":  "get_trend_dispatch_function \u003c- function(trend_type, function_type) {",
                                                                  "is_s3_method":  false,
                                                                  "arguments":  [
                                                                                    "trend_type",
                                                                                    "function_type"
                                                                                ]
                                                              },
                              "get_default_validation_rules":  {
                                                                   "s3_class":  "",
                                                                   "s3_method":  "",
                                                                   "signature":  "get_default_validation_rules \u003c- function(trend_type) {",
                                                                   "is_s3_method":  false,
                                                                   "arguments":  "trend_type"
                                                               },
                              "mvgam":  {
                                            "s3_class":  "",
                                            "s3_method":  "",
                                            "signature":  "mvgam \u003c- function(formula, trend_formula = NULL, data = NULL, backend = getOption(\"brms.backend\", \"cmdstanr\"), combine = TRUE, family = poisson(), ...) {",
                                            "is_s3_method":  false,
                                            "arguments":  [
                                                              "formula",
                                                              "trend_formula",
                                                              "data",
                                                              "backend"
                                                          ]
                                        },
                              "ar3_recursC":  {
                                                  "s3_class":  "",
                                                  "s3_method":  "",
                                                  "signature":  "ar3_recursC \u003c- function(drift, ar1, ar2, ar3, linpreds, errors, last_trends, h) {",
                                                  "is_s3_method":  false,
                                                  "arguments":  [
                                                                    "drift",
                                                                    "ar1",
                                                                    "ar2",
                                                                    "ar3",
                                                                    "linpreds",
                                                                    "errors",
                                                                    "last_trends",
                                                                    "h"
                                                                ]
                                              },
                              "subset_stanfit_parameters":  {
                                                                "s3_class":  "",
                                                                "s3_method":  "",
                                                                "signature":  "subset_stanfit_parameters \u003c- function(stanfit, param_names) {",
                                                                "is_s3_method":  false,
                                                                "arguments":  [
                                                                                  "stanfit",
                                                                                  "param_names"
                                                                              ]
                                                            },
                              "generate_zmvn_monitor_params":  {
                                                                   "s3_class":  "",
                                                                   "s3_method":  "",
                                                                   "signature":  "generate_zmvn_monitor_params \u003c- function(trend_spec) {",
                                                                   "is_s3_method":  false,
                                                                   "arguments":  "trend_spec"
                                                               },
                              "residuals.mvgam":  {
                                                      "s3_class":  "mvgam",
                                                      "s3_method":  "residuals",
                                                      "signature":  "residuals.mvgam \u003c- function( object, summary = TRUE, robust = FALSE, probs = c(0.025, 0.975), ... ) {",
                                                      "is_s3_method":  true,
                                                      "arguments":  [
                                                                        "object",
                                                                        "summary",
                                                                        "robust",
                                                                        "probs"
                                                                    ]
                                                  },
                              "mcmc_plot.mvgam":  {
                                                      "s3_class":  "mvgam",
                                                      "s3_method":  "mcmc_plot",
                                                      "signature":  "mcmc_plot.mvgam = function( object, type = \u0027intervals\u0027, variable = NULL, regex = FALSE, use_alias = TRUE, ... ) {",
                                                      "is_s3_method":  true,
                                                      "arguments":  [
                                                                        "object",
                                                                        "type",
                                                                        "variable",
                                                                        "regex",
                                                                        "use_alias"
                                                                    ]
                                                  },
                              "is_multivariate_trend_specs":  {
                                                                  "s3_class":  "",
                                                                  "s3_method":  "",
                                                                  "signature":  "is_multivariate_trend_specs \u003c- function(trend_specs) {",
                                                                  "is_s3_method":  false,
                                                                  "arguments":  "trend_specs"
                                                              },
                              "plot_ecdf":  {
                                                "s3_class":  "",
                                                "s3_method":  "",
                                                "signature":  "plot_ecdf \u003c- function(dat, ylab = \u0027y\u0027) {",
                                                "is_s3_method":  false,
                                                "arguments":  [
                                                                  "dat",
                                                                  "ylab"
                                                              ]
                                            },
                              "generate_hierarchical_functions":  {
                                                                      "s3_class":  "",
                                                                      "s3_method":  "",
                                                                      "signature":  "generate_hierarchical_functions \u003c- function() {",
                                                                      "is_s3_method":  false,
                                                                      "arguments":  null
                                                                  },
                              "validate_trend_specs":  {
                                                           "s3_class":  "",
                                                           "s3_method":  "",
                                                           "signature":  "validate_trend_specs \u003c- function(trend_specs) {",
                                                           "is_s3_method":  false,
                                                           "arguments":  "trend_specs"
                                                       },
                              "RW":  {
                                         "s3_class":  "",
                                         "s3_method":  "",
                                         "signature":  "RW = function( time = NA, series = NA, ma = FALSE, cor = FALSE, gr = NA, subgr = NA, n_lv = NULL) {",
                                         "is_s3_method":  false,
                                         "arguments":  [
                                                           "time",
                                                           "series",
                                                           "ma",
                                                           "cor",
                                                           "gr",
                                                           "subgr",
                                                           "n_lv"
                                                       ]
                                     },
                              "plot_mvgam_smooth":  {
                                                        "s3_class":  "",
                                                        "s3_method":  "",
                                                        "signature":  "plot_mvgam_smooth = function( object, trend_effects = FALSE, series = 1, smooth, residuals = FALSE, n_resid_bins = 25, realisations = FALSE, n_realisations = 15, derivatives = FALSE, newdata ) {",
                                                        "is_s3_method":  false,
                                                        "arguments":  [
                                                                          "object",
                                                                          "trend_effects",
                                                                          "series",
                                                                          "smooth",
                                                                          "residuals",
                                                                          "n_resid_bins",
                                                                          "realisations",
                                                                          "n_realisations",
                                                                          "derivatives",
                                                                          "newdata"
                                                                      ]
                                                    },
                              "extract_pooling_diagnostics":  {
                                                                  "s3_class":  "",
                                                                  "s3_method":  "",
                                                                  "signature":  "extract_pooling_diagnostics \u003c- function(pooled_estimates) {",
                                                                  "is_s3_method":  false,
                                                                  "arguments":  "pooled_estimates"
                                                              },
                              "find_trend_terms":  {
                                                       "s3_class":  "",
                                                       "s3_method":  "",
                                                       "signature":  "find_trend_terms \u003c- function(x) {",
                                                       "is_s3_method":  false,
                                                       "arguments":  "x"
                                                   },
                              "parse_data_declarations":  {
                                                              "s3_class":  "",
                                                              "s3_method":  "",
                                                              "signature":  "parse_data_declarations \u003c- function(data_block) {",
                                                              "is_s3_method":  false,
                                                              "arguments":  "data_block"
                                                          },
                              "plot_time_series":  {
                                                       "s3_class":  "",
                                                       "s3_method":  "",
                                                       "signature":  "plot_time_series \u003c- function( dat, lines = TRUE, log_scale = FALSE, ylab = \u0027y\u0027, series = \u0027all\u0027 ) {",
                                                       "is_s3_method":  false,
                                                       "arguments":  [
                                                                         "dat",
                                                                         "lines",
                                                                         "log_scale",
                                                                         "ylab",
                                                                         "series"
                                                                     ]
                                                   },
                              "seq_rows":  {
                                               "s3_class":  "",
                                               "s3_method":  "",
                                               "signature":  "seq_rows = function(x) {",
                                               "is_s3_method":  false,
                                               "arguments":  "x"
                                           },
                              "validate_nonlinear_trend_compatibility":  {
                                                                             "s3_class":  "",
                                                                             "s3_method":  "",
                                                                             "signature":  "validate_nonlinear_trend_compatibility \u003c- function(nl_components, trend_specs) {",
                                                                             "is_s3_method":  false,
                                                                             "arguments":  [
                                                                                               "nl_components",
                                                                                               "trend_specs"
                                                                                           ]
                                                                         },
                              "extract_observation_priors":  {
                                                                 "s3_class":  "",
                                                                 "s3_method":  "",
                                                                 "signature":  "extract_observation_priors \u003c- function(formula, data, family = gaussian(), ...) {",
                                                                 "is_s3_method":  false,
                                                                 "arguments":  [
                                                                                   "formula",
                                                                                   "data",
                                                                                   "family"
                                                                               ]
                                                             },
                              "sort_stanvars":  {
                                                    "s3_class":  "",
                                                    "s3_method":  "",
                                                    "signature":  "sort_stanvars \u003c- function(stanvars) {",
                                                    "is_s3_method":  false,
                                                    "arguments":  "stanvars"
                                                },
                              "assemble_mvgam_stan_code":  {
                                                               "s3_class":  "",
                                                               "s3_method":  "",
                                                               "signature":  "assemble_mvgam_stan_code \u003c- function(obs_formula, trend_stanvars = NULL, data, family = gaussian(), backend = \"rstan\", validate = TRUE) {",
                                                               "is_s3_method":  false,
                                                               "arguments":  [
                                                                                 "obs_formula",
                                                                                 "trend_stanvars",
                                                                                 "data",
                                                                                 "family"
                                                                             ]
                                                           },
                              "how_to_cite.mvgam":  {
                                                        "s3_class":  "mvgam",
                                                        "s3_method":  "how_to_cite",
                                                        "signature":  "how_to_cite.mvgam \u003c- function(object, ...) {",
                                                        "is_s3_method":  true,
                                                        "arguments":  "object"
                                                    },
                              "as_draws_rvars.mvgam":  {
                                                           "s3_class":  "mvgam",
                                                           "s3_method":  "as_draws_rvars",
                                                           "signature":  "as_draws_rvars.mvgam \u003c- function( x, variable = NULL, regex = FALSE, inc_warmup = FALSE, ... ) {",
                                                           "is_s3_method":  true,
                                                           "arguments":  [
                                                                             "x",
                                                                             "variable",
                                                                             "regex",
                                                                             "inc_warmup"
                                                                         ]
                                                       },
                              "handle_nonlinear_model":  {
                                                             "s3_class":  "",
                                                             "s3_method":  "",
                                                             "signature":  "handle_nonlinear_model \u003c- function(formula, trend_specs = NULL) {",
                                                             "is_s3_method":  false,
                                                             "arguments":  [
                                                                               "formula",
                                                                               "trend_specs"
                                                                           ]
                                                         },
                              "as.array.mvgam":  {
                                                     "s3_class":  "array.mvgam",
                                                     "s3_method":  "as",
                                                     "signature":  "as.array.mvgam = function( x, variable = \u0027betas\u0027, regex = FALSE, use_alias = TRUE, ... ) {",
                                                     "is_s3_method":  true,
                                                     "arguments":  [
                                                                       "x",
                                                                       "variable",
                                                                       "regex",
                                                                       "use_alias"
                                                                   ]
                                                 },
                              "validate_trend_time_intervals":  {
                                                                    "s3_class":  "",
                                                                    "s3_method":  "",
                                                                    "signature":  "validate_trend_time_intervals \u003c- function(trend_spec, data) {",
                                                                    "is_s3_method":  false,
                                                                    "arguments":  [
                                                                                      "trend_spec",
                                                                                      "data"
                                                                                  ]
                                                                },
                              "decimalplaces":  {
                                                    "s3_class":  "",
                                                    "s3_method":  "",
                                                    "signature":  "decimalplaces \u003c- function(x) {",
                                                    "is_s3_method":  false,
                                                    "arguments":  "x"
                                                },
                              "plot_mvgam_series":  {
                                                        "s3_class":  "",
                                                        "s3_method":  "",
                                                        "signature":  "plot_mvgam_series \u003c- function( object, data, newdata, y = \u0027y\u0027, lines = TRUE, series = 1, n_bins = NULL, log_scale = FALSE ) {",
                                                        "is_s3_method":  false,
                                                        "arguments":  [
                                                                          "object",
                                                                          "data",
                                                                          "newdata",
                                                                          "y",
                                                                          "lines",
                                                                          "series",
                                                                          "n_bins",
                                                                          "log_scale"
                                                                      ]
                                                    },
                              "map_trend_priors":  {
                                                       "s3_class":  "",
                                                       "s3_method":  "",
                                                       "signature":  "map_trend_priors \u003c- function(prior, trend_type) {",
                                                       "is_s3_method":  false,
                                                       "arguments":  [
                                                                         "prior",
                                                                         "trend_type"
                                                                     ]
                                                   },
                              "prepare_mvgam_stancode":  {
                                                             "s3_class":  "",
                                                             "s3_method":  "",
                                                             "signature":  "prepare_mvgam_stancode \u003c- function(obs_setup, trend_setup, trend_specs, data = NULL, backend = \"rstan\", validate = TRUE, silent = 1) {",
                                                             "is_s3_method":  false,
                                                             "arguments":  [
                                                                               "obs_setup",
                                                                               "trend_setup",
                                                                               "trend_specs",
                                                                               "data",
                                                                               "backend",
                                                                               "validate",
                                                                               "silent"
                                                                           ]
                                                         },
                              "stancode.mvgam_formula":  {
                                                             "s3_class":  "mvgam_formula",
                                                             "s3_method":  "stancode",
                                                             "signature":  "stancode.mvgam_formula \u003c- function(object, data, family = gaussian(), prior = NULL, data2 = NULL, sample_prior = \"no\", sparse = NULL, knots = NULL, drop_unused_levels = TRUE, backend = \"rstan\", threads = getOption(\"mc.cores\", 1), normalize = TRUE, save_model = NULL, stan_funs = NULL, silent = 1L, validate = TRUE, ...) {",
                                                             "is_s3_method":  true,
                                                             "arguments":  [
                                                                               "object",
                                                                               "data",
                                                                               "family"
                                                                           ]
                                                         },
                              "extract_response_names_from_brmsfit":  {
                                                                          "s3_class":  "",
                                                                          "s3_method":  "",
                                                                          "signature":  "extract_response_names_from_brmsfit \u003c- function(brmsfit) {",
                                                                          "is_s3_method":  false,
                                                                          "arguments":  "brmsfit"
                                                                      },
                              "apply_response_suffix_to_stanvars":  {
                                                                        "s3_class":  "",
                                                                        "s3_method":  "",
                                                                        "signature":  "apply_response_suffix_to_stanvars \u003c- function(stanvars, response_suffix) {",
                                                                        "is_s3_method":  false,
                                                                        "arguments":  [
                                                                                          "stanvars",
                                                                                          "response_suffix"
                                                                                      ]
                                                                    },
                              "mvgam_single_imputation":  {
                                                              "s3_class":  "",
                                                              "s3_method":  "",
                                                              "signature":  "mvgam_single_imputation \u003c- function(formula, trend_formula, data, backend, imputation_id, ...) {",
                                                              "is_s3_method":  false,
                                                              "arguments":  [
                                                                                "formula",
                                                                                "trend_formula",
                                                                                "data",
                                                                                "backend",
                                                                                "imputation_id"
                                                                            ]
                                                          },
                              "validate_grouping_arguments":  {
                                                                  "s3_class":  "",
                                                                  "s3_method":  "",
                                                                  "signature":  "validate_grouping_arguments \u003c- function(gr, subgr) {",
                                                                  "is_s3_method":  false,
                                                                  "arguments":  [
                                                                                    "gr",
                                                                                    "subgr"
                                                                                ]
                                                              },
                              "fit_multiple_imputation_models":  {
                                                                     "s3_class":  "",
                                                                     "s3_method":  "",
                                                                     "signature":  "fit_multiple_imputation_models \u003c- function(formula, trend_formula, data_list, backend, ...) {",
                                                                     "is_s3_method":  false,
                                                                     "arguments":  [
                                                                                       "formula",
                                                                                       "trend_formula",
                                                                                       "data_list",
                                                                                       "backend"
                                                                                   ]
                                                                 },
                              "generate_combined_stancode":  {
                                                                 "s3_class":  "",
                                                                 "s3_method":  "",
                                                                 "signature":  "generate_combined_stancode \u003c- function(obs_setup, trend_setup = NULL, trend_specs = NULL, prior = NULL, backend = \"rstan\", validate = TRUE, silent = 1) {",
                                                                 "is_s3_method":  false,
                                                                 "arguments":  [
                                                                                   "obs_setup",
                                                                                   "trend_setup",
                                                                                   "trend_specs",
                                                                                   "prior",
                                                                                   "backend",
                                                                                   "validate",
                                                                                   "silent"
                                                                               ]
                                                             },
                              "irf":  {
                                          "s3_class":  "",
                                          "s3_method":  "",
                                          "signature":  "irf \u003c- function(object, ...) {",
                                          "is_s3_method":  false,
                                          "arguments":  "object"
                                      },
                              "residual_cor":  {
                                                   "s3_class":  "",
                                                   "s3_method":  "",
                                                   "signature":  "residual_cor \u003c- function(object, ...) {",
                                                   "is_s3_method":  false,
                                                   "arguments":  "object"
                                               },
                              "generate_hierarchical_correlation_model":  {
                                                                              "s3_class":  "",
                                                                              "s3_method":  "",
                                                                              "signature":  "generate_hierarchical_correlation_model \u003c- function(n_groups) {",
                                                                              "is_s3_method":  false,
                                                                              "arguments":  "n_groups"
                                                                          },
                              "GP":  {
                                         "s3_class":  "",
                                         "s3_method":  "",
                                         "signature":  "GP = function(time = NA, series = NA, ...) {",
                                         "is_s3_method":  false,
                                         "arguments":  [
                                                           "time",
                                                           "series"
                                                       ]
                                     },
                              "has_mvbind_response":  {
                                                          "s3_class":  "",
                                                          "s3_method":  "",
                                                          "signature":  "has_mvbind_response \u003c- function(formula) {",
                                                          "is_s3_method":  false,
                                                          "arguments":  "formula"
                                                      },
                              "map_prior_to_stan_string":  {
                                                               "s3_class":  "",
                                                               "s3_method":  "",
                                                               "signature":  "map_prior_to_stan_string \u003c- function(prior_row) {",
                                                               "is_s3_method":  false,
                                                               "arguments":  "prior_row"
                                                           },
                              "generate_combined_stancode_and_data":  {
                                                                          "s3_class":  "",
                                                                          "s3_method":  "",
                                                                          "signature":  "generate_combined_stancode_and_data \u003c- function(obs_setup, trend_setup, mv_spec, validate = TRUE) {",
                                                                          "is_s3_method":  false,
                                                                          "arguments":  [
                                                                                            "obs_setup",
                                                                                            "trend_setup",
                                                                                            "mv_spec",
                                                                                            "validate"
                                                                                        ]
                                                                      },
                              "extract_trend_priors_from_enhanced":  {
                                                                         "s3_class":  "",
                                                                         "s3_method":  "",
                                                                         "signature":  "extract_trend_priors_from_enhanced \u003c- function(prior) {",
                                                                         "is_s3_method":  false,
                                                                         "arguments":  "prior"
                                                                     },
                              "validate_stan_code":  {
                                                         "s3_class":  "",
                                                         "s3_method":  "",
                                                         "signature":  "validate_stan_code \u003c- function(stan_code, backend = \"rstan\", silent = TRUE, ...) {",
                                                         "is_s3_method":  false,
                                                         "arguments":  [
                                                                           "stan_code",
                                                                           "backend",
                                                                           "silent"
                                                                       ]
                                                     },
                              "generate_car_trend_stanvars":  {
                                                                  "s3_class":  "",
                                                                  "s3_method":  "",
                                                                  "signature":  "generate_car_trend_stanvars \u003c- function(trend_specs, data_info, prior = NULL) {",
                                                                  "is_s3_method":  false,
                                                                  "arguments":  [
                                                                                    "trend_specs",
                                                                                    "data_info",
                                                                                    "prior"
                                                                                ]
                                                              },
                              "get_priority":  {
                                                   "s3_class":  "",
                                                   "s3_method":  "",
                                                   "signature":  "get_priority \u003c- function(name, scode) {",
                                                   "is_s3_method":  false,
                                                   "arguments":  [
                                                                     "name",
                                                                     "scode"
                                                                 ]
                                               },
                              "allsame":  {
                                              "s3_class":  "",
                                              "s3_method":  "",
                                              "signature":  "allsame \u003c- function(x) length(unique(x)) == 1",
                                              "is_s3_method":  false,
                                              "arguments":  "x"
                                          },
                              "summary.mvgam_irf":  {
                                                        "s3_class":  "mvgam_irf",
                                                        "s3_method":  "summary",
                                                        "signature":  "summary.mvgam_irf = function(object, probs = c(0.025, 0.975), ...) {",
                                                        "is_s3_method":  true,
                                                        "arguments":  [
                                                                          "object",
                                                                          "probs"
                                                                      ]
                                                    },
                              "create_trend_parameter_prior":  {
                                                                   "s3_class":  "",
                                                                   "s3_method":  "",
                                                                   "signature":  "create_trend_parameter_prior \u003c- function(param_name, trend_obj) {",
                                                                   "is_s3_method":  false,
                                                                   "arguments":  [
                                                                                     "param_name",
                                                                                     "trend_obj"
                                                                                 ]
                                                               },
                              "generate_rw_monitor_params":  {
                                                                 "s3_class":  "",
                                                                 "s3_method":  "",
                                                                 "signature":  "generate_rw_monitor_params \u003c- function(trend_spec) {",
                                                                 "is_s3_method":  false,
                                                                 "arguments":  "trend_spec"
                                                             },
                              "residual_cor.jsdgam":  {
                                                          "s3_class":  "jsdgam",
                                                          "s3_method":  "residual_cor",
                                                          "signature":  "residual_cor.jsdgam \u003c- function( object, summary = TRUE, robust = FALSE, probs = c(0.025, 0.975), ... ) {",
                                                          "is_s3_method":  true,
                                                          "arguments":  [
                                                                            "object",
                                                                            "summary",
                                                                            "robust",
                                                                            "probs"
                                                                        ]
                                                      },
                              "standata.mvgam_formula":  {
                                                             "s3_class":  "mvgam_formula",
                                                             "s3_method":  "standata",
                                                             "signature":  "standata.mvgam_formula \u003c- function(object, data, family = gaussian(), prior = NULL, data2 = NULL, sample_prior = \"no\", sparse = NULL, knots = NULL, drop_unused_levels = TRUE, stanvars = NULL, threads = getOption(\"mc.cores\", 1), ...) {",
                                                             "is_s3_method":  true,
                                                             "arguments":  [
                                                                               "object",
                                                                               "data",
                                                                               "family"
                                                                           ]
                                                         },
                              "print.mvgamstancode":  {
                                                          "s3_class":  "mvgamstancode",
                                                          "s3_method":  "print",
                                                          "signature":  "print.mvgamstancode \u003c- function(x, ...) {",
                                                          "is_s3_method":  true,
                                                          "arguments":  "x"
                                                      },
                              "combine_stanvars":  {
                                                       "s3_class":  "",
                                                       "s3_method":  "",
                                                       "signature":  "combine_stanvars \u003c- function(...) {",
                                                       "is_s3_method":  false,
                                                       "arguments":  null
                                                   },
                              "custom_trend":  {
                                                   "s3_class":  "",
                                                   "s3_method":  "",
                                                   "signature":  "custom_trend \u003c- function(trend, tpars, forecast_fun, stancode_fun, standata_fun = NULL, bounds = list(), characteristics = list(), ...) {",
                                                   "is_s3_method":  false,
                                                   "arguments":  [
                                                                     "trend",
                                                                     "tpars",
                                                                     "forecast_fun",
                                                                     "stancode_fun",
                                                                     "standata_fun",
                                                                     "bounds"
                                                                 ]
                                               },
                              "series_to_mvgam":  {
                                                      "s3_class":  "",
                                                      "s3_method":  "",
                                                      "signature":  "series_to_mvgam \u003c- function(series, freq, train_prop = 0.85) {",
                                                      "is_s3_method":  false,
                                                      "arguments":  [
                                                                        "series",
                                                                        "freq",
                                                                        "train_prop"
                                                                    ]
                                                  },
                              "is_multivariate_brmsfit":  {
                                                              "s3_class":  "",
                                                              "s3_method":  "",
                                                              "signature":  "is_multivariate_brmsfit \u003c- function(brmsfit) {",
                                                              "is_s3_method":  false,
                                                              "arguments":  "brmsfit"
                                                          },
                              "interpret_mvgam":  {
                                                      "s3_class":  "",
                                                      "s3_method":  "",
                                                      "signature":  "interpret_mvgam = function(formula, N, family) {",
                                                      "is_s3_method":  false,
                                                      "arguments":  [
                                                                        "formula",
                                                                        "N",
                                                                        "family"
                                                                    ]
                                                  },
                              "parse_model_cmdstanr":  {
                                                           "s3_class":  "",
                                                           "s3_method":  "",
                                                           "signature":  "parse_model_cmdstanr \u003c- function(model, silent = 1, ...) {",
                                                           "is_s3_method":  false,
                                                           "arguments":  [
                                                                             "model",
                                                                             "silent"
                                                                         ]
                                                       },
                              "dyn_to_gphilbert":  {
                                                       "s3_class":  "",
                                                       "s3_method":  "",
                                                       "signature":  "dyn_to_gphilbert = function(term, N) {",
                                                       "is_s3_method":  false,
                                                       "arguments":  [
                                                                         "term",
                                                                         "N"
                                                                     ]
                                                   },
                              "ulapply":  {
                                              "s3_class":  "",
                                              "s3_method":  "",
                                              "signature":  "ulapply \u003c- function(X, FUN, ..., recursive = TRUE, use.names = TRUE) {",
                                              "is_s3_method":  false,
                                              "arguments":  [
                                                                "X",
                                                                "FUN",
                                                                "recursive",
                                                                "use.names"
                                                            ]
                                          },
                              "repair_names":  {
                                                   "s3_class":  "",
                                                   "s3_method":  "",
                                                   "signature":  "repair_names \u003c- function(x) {",
                                                   "is_s3_method":  false,
                                                   "arguments":  "x"
                                               },
                              "get_predict.mvgam":  {
                                                        "s3_class":  "mvgam",
                                                        "s3_method":  "get_predict",
                                                        "signature":  "get_predict.mvgam \u003c- function( model, newdata, type = \u0027response\u0027, process_error = FALSE, ... ) {",
                                                        "is_s3_method":  true,
                                                        "arguments":  [
                                                                          "model",
                                                                          "newdata",
                                                                          "type",
                                                                          "process_error"
                                                                      ]
                                                    },
                              "generate_shared_innovation_stanvars":  {
                                                                          "s3_class":  "",
                                                                          "s3_method":  "",
                                                                          "signature":  "generate_shared_innovation_stanvars \u003c- function(n_lv, n_series, cor = FALSE, factor_model = FALSE, hierarchical_info = NULL) {",
                                                                          "is_s3_method":  false,
                                                                          "arguments":  [
                                                                                            "n_lv",
                                                                                            "n_series",
                                                                                            "cor",
                                                                                            "factor_model",
                                                                                            "hierarchical_info"
                                                                                        ]
                                                                      },
                              "validate_series_variable":  {
                                                               "s3_class":  "",
                                                               "s3_method":  "",
                                                               "signature":  "validate_series_variable \u003c- function(series_var) {",
                                                               "is_s3_method":  false,
                                                               "arguments":  "series_var"
                                                           },
                              "periodic_gp":  {
                                                  "s3_class":  "",
                                                  "s3_method":  "",
                                                  "signature":  "periodic_gp \u003c- function(T, period = 12, rho = 1) {",
                                                  "is_s3_method":  false,
                                                  "arguments":  [
                                                                    "T",
                                                                    "period",
                                                                    "rho"
                                                                ]
                                              },
                              "validate_factor_levels":  {
                                                             "s3_class":  "",
                                                             "s3_method":  "",
                                                             "signature":  "validate_factor_levels \u003c- function(data, var_name, data_name = \"data\", auto_drop = FALSE) {",
                                                             "is_s3_method":  false,
                                                             "arguments":  [
                                                                               "data",
                                                                               "var_name",
                                                                               "data_name",
                                                                               "auto_drop"
                                                                           ]
                                                         },
                              "get_stan_reserved_words":  {
                                                              "s3_class":  "",
                                                              "s3_method":  "",
                                                              "signature":  "get_stan_reserved_words \u003c- function() {",
                                                              "is_s3_method":  false,
                                                              "arguments":  null
                                                          },
                              "trend_param":  {
                                                  "s3_class":  "",
                                                  "s3_method":  "",
                                                  "signature":  "trend_param \u003c- function(name, bounds = NULL, monitor = TRUE, label = NULL, condition = TRUE) {",
                                                  "is_s3_method":  false,
                                                  "arguments":  [
                                                                    "name",
                                                                    "bounds",
                                                                    "monitor",
                                                                    "label",
                                                                    "condition"
                                                                ]
                                              },
                              "is_registry_initialized":  {
                                                              "s3_class":  "",
                                                              "s3_method":  "",
                                                              "signature":  "is_registry_initialized \u003c- function() {",
                                                              "is_s3_method":  false,
                                                              "arguments":  null
                                                          },
                              "validate_no_offsets_in_trends":  {
                                                                    "s3_class":  "",
                                                                    "s3_method":  "",
                                                                    "signature":  "validate_no_offsets_in_trends \u003c- function(formula) {",
                                                                    "is_s3_method":  false,
                                                                    "arguments":  "formula"
                                                                },
                              "create_trend_base_formula":  {
                                                                "s3_class":  "",
                                                                "s3_method":  "",
                                                                "signature":  "create_trend_base_formula \u003c- function(trend_specs) {",
                                                                "is_s3_method":  false,
                                                                "arguments":  "trend_specs"
                                                            },
                              "check_brms_autocor_usage":  {
                                                               "s3_class":  "",
                                                               "s3_method":  "",
                                                               "signature":  "check_brms_autocor_usage \u003c- function(formula_str) {",
                                                               "is_s3_method":  false,
                                                               "arguments":  "formula_str"
                                                           },
                              "is_like_factor":  {
                                                     "s3_class":  "",
                                                     "s3_method":  "",
                                                     "signature":  "is_like_factor \u003c- function(x) {",
                                                     "is_s3_method":  false,
                                                     "arguments":  "x"
                                                 },
                              "process_trend_validation_rules":  {
                                                                     "s3_class":  "",
                                                                     "s3_method":  "",
                                                                     "signature":  "process_trend_validation_rules \u003c- function(trend_spec, data) {",
                                                                     "is_s3_method":  false,
                                                                     "arguments":  [
                                                                                       "trend_spec",
                                                                                       "data"
                                                                                   ]
                                                                 },
                              "print_model_specification_simple":  {
                                                                       "s3_class":  "",
                                                                       "s3_method":  "",
                                                                       "signature":  "print_model_specification_simple \u003c- function(model_spec) {",
                                                                       "is_s3_method":  false,
                                                                       "arguments":  "model_spec"
                                                                   },
                              "process_trend_params":  {
                                                           "s3_class":  "",
                                                           "s3_method":  "",
                                                           "signature":  "process_trend_params \u003c- function(param_specs, envir = parent.frame()) {",
                                                           "is_s3_method":  false,
                                                           "arguments":  [
                                                                             "param_specs",
                                                                             "envir"
                                                                         ]
                                                       },
                              "extract_trend_component_info":  {
                                                                   "s3_class":  "",
                                                                   "s3_method":  "",
                                                                   "signature":  "extract_trend_component_info \u003c- function(combined_fit, mv_spec) {",
                                                                   "is_s3_method":  false,
                                                                   "arguments":  [
                                                                                     "combined_fit",
                                                                                     "mv_spec"
                                                                                 ]
                                                               },
                              "extract_and_rename_trend_parameters":  {
                                                                          "s3_class":  "",
                                                                          "s3_method":  "",
                                                                          "signature":  "extract_and_rename_trend_parameters \u003c- function(trend_setup, dimensions, suffix = \"_trend\") {",
                                                                          "is_s3_method":  false,
                                                                          "arguments":  [
                                                                                            "trend_setup",
                                                                                            "dimensions",
                                                                                            "suffix"
                                                                                        ]
                                                                      },
                              "is_nonlinear_formula":  {
                                                           "s3_class":  "",
                                                           "s3_method":  "",
                                                           "signature":  "is_nonlinear_formula \u003c- function(formula) {",
                                                           "is_s3_method":  false,
                                                           "arguments":  "formula"
                                                       },
                              "filter_ar_forecast_params":  {
                                                                "s3_class":  "",
                                                                "s3_method":  "",
                                                                "signature":  "filter_ar_forecast_params \u003c- function(monitor_params, trend_spec) {",
                                                                "is_s3_method":  false,
                                                                "arguments":  [
                                                                                  "monitor_params",
                                                                                  "trend_spec"
                                                                              ]
                                                            },
                              "stability":  {
                                                "s3_class":  "",
                                                "s3_method":  "",
                                                "signature":  "stability \u003c- function(object, ...) {",
                                                "is_s3_method":  false,
                                                "arguments":  "object"
                                            },
                              "validate_multivariate_trend_constraints":  {
                                                                              "s3_class":  "",
                                                                              "s3_method":  "",
                                                                              "signature":  "validate_multivariate_trend_constraints \u003c- function(trend_formula, response_name) {",
                                                                              "is_s3_method":  false,
                                                                              "arguments":  [
                                                                                                "trend_formula",
                                                                                                "response_name"
                                                                                            ]
                                                                          },
                              "find_matching_brace":  {
                                                          "s3_class":  "",
                                                          "s3_method":  "",
                                                          "signature":  "find_matching_brace \u003c- function(code_lines, start_line) {",
                                                          "is_s3_method":  false,
                                                          "arguments":  [
                                                                            "code_lines",
                                                                            "start_line"
                                                                        ]
                                                      },
                              "clean_ll":  {
                                               "s3_class":  "",
                                               "s3_method":  "",
                                               "signature":  "clean_ll = function(x, logliks) {",
                                               "is_s3_method":  false,
                                               "arguments":  [
                                                                 "x",
                                                                 "logliks"
                                                             ]
                                           },
                              "filter_var_forecast_params":  {
                                                                 "s3_class":  "",
                                                                 "s3_method":  "",
                                                                 "signature":  "filter_var_forecast_params \u003c- function(monitor_params, trend_spec) {",
                                                                 "is_s3_method":  false,
                                                                 "arguments":  [
                                                                                   "monitor_params",
                                                                                   "trend_spec"
                                                                               ]
                                                             },
                              "lv_correlations":  {
                                                      "s3_class":  "",
                                                      "s3_method":  "",
                                                      "signature":  "lv_correlations = function(object) {",
                                                      "is_s3_method":  false,
                                                      "arguments":  "object"
                                                  },
                              "generate_trend_computation_tparameters":  {
                                                                             "s3_class":  "",
                                                                             "s3_method":  "",
                                                                             "signature":  "generate_trend_computation_tparameters \u003c- function(n_lv, n_series) {",
                                                                             "is_s3_method":  false,
                                                                             "arguments":  [
                                                                                               "n_lv",
                                                                                               "n_series"
                                                                                           ]
                                                                         },
                              "extract_variable_name":  {
                                                            "s3_class":  "",
                                                            "s3_method":  "",
                                                            "signature":  "extract_variable_name \u003c- function(expr) {",
                                                            "is_s3_method":  false,
                                                            "arguments":  "expr"
                                                        },
                              "generate_forecast_metadata":  {
                                                                 "s3_class":  "",
                                                                 "s3_method":  "",
                                                                 "signature":  "generate_forecast_metadata \u003c- function(trend_spec) {",
                                                                 "is_s3_method":  false,
                                                                 "arguments":  "trend_spec"
                                                             },
                              "has_trend_priors":  {
                                                       "s3_class":  "",
                                                       "s3_method":  "",
                                                       "signature":  "has_trend_priors \u003c- function(prior) {",
                                                       "is_s3_method":  false,
                                                       "arguments":  "prior"
                                                   },
                              "eval_silent":  {
                                                  "s3_class":  "",
                                                  "s3_method":  "",
                                                  "signature":  "eval_silent \u003c- function( expr, type = \"output\", try = FALSE, silent = TRUE, ... ) {",
                                                  "is_s3_method":  false,
                                                  "arguments":  [
                                                                    "expr",
                                                                    "type",
                                                                    "try",
                                                                    "silent"
                                                                ]
                                              },
                              "process_lag_parameters":  {
                                                             "s3_class":  "",
                                                             "s3_method":  "",
                                                             "signature":  "process_lag_parameters \u003c- function(p, trend_type) {",
                                                             "is_s3_method":  false,
                                                             "arguments":  [
                                                                               "p",
                                                                               "trend_type"
                                                                           ]
                                                         },
                              "core_unloaded":  {
                                                    "s3_class":  "",
                                                    "s3_method":  "",
                                                    "signature":  "core_unloaded \u003c- function() {",
                                                    "is_s3_method":  false,
                                                    "arguments":  null
                                                },
                              "extract_trend_priors_only":  {
                                                                "s3_class":  "",
                                                                "s3_method":  "",
                                                                "signature":  "extract_trend_priors_only \u003c- function(prior) {",
                                                                "is_s3_method":  false,
                                                                "arguments":  "prior"
                                                            },
                              "roundlabs":  {
                                                "s3_class":  "",
                                                "s3_method":  "",
                                                "signature":  "roundlabs = function(x) {",
                                                "is_s3_method":  false,
                                                "arguments":  "x"
                                            },
                              "add_residuals":  {
                                                    "s3_class":  "",
                                                    "s3_method":  "",
                                                    "signature":  "add_residuals \u003c- function(object, ...) {",
                                                    "is_s3_method":  false,
                                                    "arguments":  "object"
                                                },
                              "mvgam_trend_registry":  {
                                                           "s3_class":  "",
                                                           "s3_method":  "",
                                                           "signature":  "mvgam_trend_registry \u003c- function() {",
                                                           "is_s3_method":  false,
                                                           "arguments":  null
                                                       },
                              "add_consistent_dispatch_metadata":  {
                                                                       "s3_class":  "",
                                                                       "s3_method":  "",
                                                                       "signature":  "add_consistent_dispatch_metadata \u003c- function(trend_obj) {",
                                                                       "is_s3_method":  false,
                                                                       "arguments":  "trend_obj"
                                                                   },
                              "pool_parameter_estimates":  {
                                                               "s3_class":  "",
                                                               "s3_method":  "",
                                                               "signature":  "pool_parameter_estimates \u003c- function(param_list) {",
                                                               "is_s3_method":  false,
                                                               "arguments":  "param_list"
                                                           },
                              "print.mvgam_formula":  {
                                                          "s3_class":  "mvgam_formula",
                                                          "s3_method":  "print",
                                                          "signature":  "print.mvgam_formula \u003c- function(x, ...) {",
                                                          "is_s3_method":  true,
                                                          "arguments":  "x"
                                                      },
                              "apply_suffix_to_stan_code":  {
                                                                "s3_class":  "",
                                                                "s3_method":  "",
                                                                "signature":  "apply_suffix_to_stan_code \u003c- function(stan_code, patterns, suffix) {",
                                                                "is_s3_method":  false,
                                                                "arguments":  [
                                                                                  "stan_code",
                                                                                  "patterns",
                                                                                  "suffix"
                                                                              ]
                                                            },
                              "eval_trend_constructor":  {
                                                             "s3_class":  "",
                                                             "s3_method":  "",
                                                             "signature":  "eval_trend_constructor \u003c- function(trend_call) {",
                                                             "is_s3_method":  false,
                                                             "arguments":  "trend_call"
                                                         },
                              "gather_matrix":  {
                                                    "s3_class":  "",
                                                    "s3_method":  "",
                                                    "signature":  "gather_matrix \u003c- function(mat) {",
                                                    "is_s3_method":  false,
                                                    "arguments":  "mat"
                                                },
                              "repair_variable_names":  {
                                                            "s3_class":  "",
                                                            "s3_method":  "",
                                                            "signature":  "repair_variable_names \u003c- function(x) {",
                                                            "is_s3_method":  false,
                                                            "arguments":  "x"
                                                        },
                              "validate_pos_integer":  {
                                                           "s3_class":  "",
                                                           "s3_method":  "",
                                                           "signature":  "validate_pos_integer \u003c- function(x, name = deparse(substitute(x))) {",
                                                           "is_s3_method":  false,
                                                           "arguments":  [
                                                                             "x",
                                                                             "name"
                                                                         ]
                                                       },
                              "validate_mvgam_trend":  {
                                                           "s3_class":  "",
                                                           "s3_method":  "",
                                                           "signature":  "validate_mvgam_trend \u003c- function(trend_obj) {",
                                                           "is_s3_method":  false,
                                                           "arguments":  "trend_obj"
                                                       },
                              "validate_data_code_compatibility":  {
                                                                       "s3_class":  "",
                                                                       "s3_method":  "",
                                                                       "signature":  "validate_data_code_compatibility \u003c- function(stan_code, stan_data) {",
                                                                       "is_s3_method":  false,
                                                                       "arguments":  [
                                                                                         "stan_code",
                                                                                         "stan_data"
                                                                                     ]
                                                                   },
                              "plot_mvgam_trend":  {
                                                       "s3_class":  "",
                                                       "s3_method":  "",
                                                       "signature":  "plot_mvgam_trend = function( object, series = 1, newdata, data_test, realisations = FALSE, n_realisations = 15, n_cores = 1, derivatives = FALSE, xlab, ylab ) {",
                                                       "is_s3_method":  false,
                                                       "arguments":  [
                                                                         "object",
                                                                         "series",
                                                                         "newdata",
                                                                         "data_test",
                                                                         "realisations",
                                                                         "n_realisations",
                                                                         "n_cores",
                                                                         "derivatives",
                                                                         "xlab",
                                                                         "ylab"
                                                                     ]
                                                   },
                              "split_mod_dots":  {
                                                     "s3_class":  "",
                                                     "s3_method":  "",
                                                     "signature":  "split_mod_dots = function(x, ..., model_names = NULL, other = TRUE) {",
                                                     "is_s3_method":  false,
                                                     "arguments":  [
                                                                       "x",
                                                                       "model_names",
                                                                       "other"
                                                                   ]
                                                 },
                              "normalize_trend_type":  {
                                                           "s3_class":  "",
                                                           "s3_method":  "",
                                                           "signature":  "normalize_trend_type \u003c- function(trend_type) {",
                                                           "is_s3_method":  false,
                                                           "arguments":  "trend_type"
                                                       },
                              "filter_zmvn_forecast_params":  {
                                                                  "s3_class":  "",
                                                                  "s3_method":  "",
                                                                  "signature":  "filter_zmvn_forecast_params \u003c- function(monitor_params, trend_spec) {",
                                                                  "is_s3_method":  false,
                                                                  "arguments":  [
                                                                                    "monitor_params",
                                                                                    "trend_spec"
                                                                                ]
                                                              },
                              "formula2str_mvgam":  {
                                                        "s3_class":  "",
                                                        "s3_method":  "",
                                                        "signature":  "formula2str_mvgam \u003c- function(formula, space = \"trim\") {",
                                                        "is_s3_method":  false,
                                                        "arguments":  [
                                                                          "formula",
                                                                          "space"
                                                                      ]
                                                    },
                              "Predict.matrix.moi.smooth":  {
                                                                "s3_class":  "matrix.moi.smooth",
                                                                "s3_method":  "Predict",
                                                                "signature":  "Predict.matrix.moi.smooth \u003c- function(object, data) {",
                                                                "is_s3_method":  true,
                                                                "arguments":  [
                                                                                  "object",
                                                                                  "data"
                                                                              ]
                                                            },
                              "validate_no_factor_hierarchical":  {
                                                                      "s3_class":  "",
                                                                      "s3_method":  "",
                                                                      "signature":  "validate_no_factor_hierarchical \u003c- function(trend_specs, n_series, trend_name) {",
                                                                      "is_s3_method":  false,
                                                                      "arguments":  [
                                                                                        "trend_specs",
                                                                                        "n_series",
                                                                                        "trend_name"
                                                                                    ]
                                                                  },
                              "fevd_df":  {
                                              "s3_class":  "",
                                              "s3_method":  "",
                                              "signature":  "fevd_df = function(x, ynames) {",
                                              "is_s3_method":  false,
                                              "arguments":  [
                                                                "x",
                                                                "ynames"
                                                            ]
                                          },
                              "generate_stan_components_mvgam_formula":  {
                                                                             "s3_class":  "",
                                                                             "s3_method":  "",
                                                                             "signature":  "generate_stan_components_mvgam_formula \u003c- function(formula, data, family = gaussian(), prior = NULL, data2 = NULL, sample_prior = \"no\", sparse = NULL, knots = NULL, drop_unused_levels = TRUE, backend = \"rstan\", threads = getOption(\"mc.cores\", 1), normalize = TRUE, save_model = NULL, stan_funs = NULL, silent = 1L, stanvars = NULL, validate = TRUE, ...) {",
                                                                             "is_s3_method":  false,
                                                                             "arguments":  [
                                                                                               "formula",
                                                                                               "data",
                                                                                               "family"
                                                                                           ]
                                                                         },
                              "as_draws_df.mvgam":  {
                                                        "s3_class":  "mvgam",
                                                        "s3_method":  "as_draws_df",
                                                        "signature":  "as_draws_df.mvgam \u003c- function( x, variable = NULL, regex = FALSE, inc_warmup = FALSE, use_alias = TRUE, ... ) {",
                                                        "is_s3_method":  true,
                                                        "arguments":  [
                                                                          "x",
                                                                          "variable",
                                                                          "regex",
                                                                          "inc_warmup",
                                                                          "use_alias"
                                                                      ]
                                                    },
                              "plottable":  {
                                                "s3_class":  "",
                                                "s3_method":  "",
                                                "signature":  "plottable = function(x) {",
                                                "is_s3_method":  false,
                                                "arguments":  "x"
                                            },
                              "validate_stan_data_structure":  {
                                                                   "s3_class":  "",
                                                                   "s3_method":  "",
                                                                   "signature":  "validate_stan_data_structure \u003c- function(stan_data) {",
                                                                   "is_s3_method":  false,
                                                                   "arguments":  "stan_data"
                                                               },
                              "register_trend_type":  {
                                                          "s3_class":  "",
                                                          "s3_method":  "",
                                                          "signature":  "register_trend_type \u003c- function(name, supports_factors = FALSE, generator_func, incompatibility_reason = NULL, prior_spec = NULL) {",
                                                          "is_s3_method":  false,
                                                          "arguments":  [
                                                                            "name",
                                                                            "supports_factors",
                                                                            "generator_func",
                                                                            "incompatibility_reason",
                                                                            "prior_spec"
                                                                        ]
                                                      },
                              "generate_trend_priors":  {
                                                            "s3_class":  "",
                                                            "s3_method":  "",
                                                            "signature":  "generate_trend_priors \u003c- function(trend_spec, data, response_names = NULL) {",
                                                            "is_s3_method":  false,
                                                            "arguments":  [
                                                                              "trend_spec",
                                                                              "data",
                                                                              "response_names"
                                                                          ]
                                                        },
                              "plot.mvgam_lfo":  {
                                                     "s3_class":  "mvgam_lfo",
                                                     "s3_method":  "plot",
                                                     "signature":  "plot.mvgam_lfo = function(x, ...) {",
                                                     "is_s3_method":  true,
                                                     "arguments":  "x"
                                                 },
                              "validate_no_brms_autocor_in_trends":  {
                                                                         "s3_class":  "",
                                                                         "s3_method":  "",
                                                                         "signature":  "validate_no_brms_autocor_in_trends \u003c- function(formula_str) {",
                                                                         "is_s3_method":  false,
                                                                         "arguments":  "formula_str"
                                                                     },
                              "var_trend_properties":  {
                                                           "s3_class":  "",
                                                           "s3_method":  "",
                                                           "signature":  "var_trend_properties \u003c- function() {",
                                                           "is_s3_method":  false,
                                                           "arguments":  null
                                                       },
                              "list_trend_types":  {
                                                       "s3_class":  "",
                                                       "s3_method":  "",
                                                       "signature":  "list_trend_types \u003c- function() {",
                                                       "is_s3_method":  false,
                                                       "arguments":  null
                                                   },
                              "create_pooled_mvgam":  {
                                                          "s3_class":  "",
                                                          "s3_method":  "",
                                                          "signature":  "create_pooled_mvgam \u003c- function(template_fit, pooled_estimates) {",
                                                          "is_s3_method":  false,
                                                          "arguments":  [
                                                                            "template_fit",
                                                                            "pooled_estimates"
                                                                        ]
                                                      },
                              "get_coef.mvgam":  {
                                                     "s3_class":  "mvgam",
                                                     "s3_method":  "get_coef",
                                                     "signature":  "get_coef.mvgam \u003c- function(model, trend_effects = FALSE, ...) {",
                                                     "is_s3_method":  true,
                                                     "arguments":  [
                                                                       "model",
                                                                       "trend_effects"
                                                                   ]
                                                 },
                              "add_residuals.mvgam":  {
                                                          "s3_class":  "mvgam",
                                                          "s3_method":  "add_residuals",
                                                          "signature":  "add_residuals.mvgam = function(object, ...) {",
                                                          "is_s3_method":  true,
                                                          "arguments":  "object"
                                                      },
                              "ensemble.mvgam_forecast":  {
                                                              "s3_class":  "mvgam_forecast",
                                                              "s3_method":  "ensemble",
                                                              "signature":  "ensemble.mvgam_forecast \u003c- function(object, ..., ndraws = 5000) {",
                                                              "is_s3_method":  true,
                                                              "arguments":  [
                                                                                "object",
                                                                                "ndraws"
                                                                            ]
                                                          },
                              "inject_multivariate_trends_into_linear_predictors":  {
                                                                                        "s3_class":  "",
                                                                                        "s3_method":  "",
                                                                                        "signature":  "inject_multivariate_trends_into_linear_predictors \u003c- function( base_stancode, trend_stanvars, responses_with_trends ) {",
                                                                                        "is_s3_method":  false,
                                                                                        "arguments":  [
                                                                                                          "base_stancode",
                                                                                                          "trend_stanvars",
                                                                                                          "responses_with_trends"
                                                                                                      ]
                                                                                    },
                              "generate_pw_trend_stanvars":  {
                                                                 "s3_class":  "",
                                                                 "s3_method":  "",
                                                                 "signature":  "generate_pw_trend_stanvars \u003c- function(trend_specs, data_info, growth = NULL, prior = NULL) {",
                                                                 "is_s3_method":  false,
                                                                 "arguments":  [
                                                                                   "trend_specs",
                                                                                   "data_info",
                                                                                   "growth",
                                                                                   "prior"
                                                                               ]
                                                             },
                              "rename_parameters_in_block":  {
                                                                 "s3_class":  "",
                                                                 "s3_method":  "",
                                                                 "signature":  "rename_parameters_in_block \u003c- function(block_code, suffix, mapping, block_type, is_multivariate, response_names) {",
                                                                 "is_s3_method":  false,
                                                                 "arguments":  [
                                                                                   "block_code",
                                                                                   "suffix",
                                                                                   "mapping",
                                                                                   "block_type",
                                                                                   "is_multivariate",
                                                                                   "response_names"
                                                                               ]
                                                             },
                              "generate_summary_labels":  {
                                                              "s3_class":  "",
                                                              "s3_method":  "",
                                                              "signature":  "generate_summary_labels \u003c- function(trend_spec) {",
                                                              "is_s3_method":  false,
                                                              "arguments":  "trend_spec"
                                                          },
                              "generate_trend_priors_stanvar":  {
                                                                    "s3_class":  "",
                                                                    "s3_method":  "",
                                                                    "signature":  "generate_trend_priors_stanvar \u003c- function(param_names, prior = NULL, stanvar_name = \"trend_priors\") {",
                                                                    "is_s3_method":  false,
                                                                    "arguments":  [
                                                                                      "param_names",
                                                                                      "prior",
                                                                                      "stanvar_name"
                                                                                  ]
                                                                },
                              "intersect_hist":  {
                                                     "s3_class":  "",
                                                     "s3_method":  "",
                                                     "signature":  "intersect_hist = function(fullpreds, gampreds) {",
                                                     "is_s3_method":  false,
                                                     "arguments":  [
                                                                       "fullpreds",
                                                                       "gampreds"
                                                                   ]
                                                 },
                              "generate_trend_priors_from_monitor_params":  {
                                                                                "s3_class":  "",
                                                                                "s3_method":  "",
                                                                                "signature":  "generate_trend_priors_from_monitor_params \u003c- function(trend_obj) {",
                                                                                "is_s3_method":  false,
                                                                                "arguments":  "trend_obj"
                                                                            },
                              "validate_time_variable":  {
                                                             "s3_class":  "",
                                                             "s3_method":  "",
                                                             "signature":  "validate_time_variable \u003c- function(time_var) {",
                                                             "is_s3_method":  false,
                                                             "arguments":  "time_var"
                                                         },
                              "validate_multivariate_series_time":  {
                                                                        "s3_class":  "",
                                                                        "s3_method":  "",
                                                                        "signature":  "validate_multivariate_series_time \u003c- function(data, name, time_var, check_times) {",
                                                                        "is_s3_method":  false,
                                                                        "arguments":  [
                                                                                          "data",
                                                                                          "name",
                                                                                          "time_var",
                                                                                          "check_times"
                                                                                      ]
                                                                    },
                              "add_mono_model_file":  {
                                                          "s3_class":  "",
                                                          "s3_method":  "",
                                                          "signature":  "add_mono_model_file = function(model_file, model_data, mgcv_model) {",
                                                          "is_s3_method":  false,
                                                          "arguments":  [
                                                                            "model_file",
                                                                            "model_data",
                                                                            "mgcv_model"
                                                                        ]
                                                      },
                              "extract_mapping_arrays":  {
                                                             "s3_class":  "",
                                                             "s3_method":  "",
                                                             "signature":  "extract_mapping_arrays \u003c- function(trend_stanvars) {",
                                                             "is_s3_method":  false,
                                                             "arguments":  "trend_stanvars"
                                                         },
                              "generate_pw_monitor_params":  {
                                                                 "s3_class":  "",
                                                                 "s3_method":  "",
                                                                 "signature":  "generate_pw_monitor_params \u003c- function(trend_spec) {",
                                                                 "is_s3_method":  false,
                                                                 "arguments":  "trend_spec"
                                                             },
                              "ppc.mvgam":  {
                                                "s3_class":  "mvgam",
                                                "s3_method":  "ppc",
                                                "signature":  "ppc.mvgam \u003c- function( object, newdata, data_test, series = 1, type = \"hist\", n_bins, legend_position, xlab, ylab, ... ) {",
                                                "is_s3_method":  true,
                                                "arguments":  [
                                                                  "object",
                                                                  "newdata",
                                                                  "data_test",
                                                                  "series",
                                                                  "type",
                                                                  "n_bins",
                                                                  "legend_position",
                                                                  "xlab",
                                                                  "ylab"
                                                              ]
                                            },
                              "insert_after_mu_lines_in_model_block":  {
                                                                           "s3_class":  "",
                                                                           "s3_method":  "",
                                                                           "signature":  "insert_after_mu_lines_in_model_block \u003c- function(code_lines, trend_injection_code) {",
                                                                           "is_s3_method":  false,
                                                                           "arguments":  [
                                                                                             "code_lines",
                                                                                             "trend_injection_code"
                                                                                         ]
                                                                       },
                              "generate_parameter_label":  {
                                                               "s3_class":  "",
                                                               "s3_method":  "",
                                                               "signature":  "generate_parameter_label \u003c- function(param_name, trend_type, trend_spec) {",
                                                               "is_s3_method":  false,
                                                               "arguments":  [
                                                                                 "param_name",
                                                                                 "trend_type",
                                                                                 "trend_spec"
                                                                             ]
                                                           },
                              "Predict.matrix.mod.smooth":  {
                                                                "s3_class":  "matrix.mod.smooth",
                                                                "s3_method":  "Predict",
                                                                "signature":  "Predict.matrix.mod.smooth \u003c- function(object, data) {",
                                                                "is_s3_method":  true,
                                                                "arguments":  [
                                                                                  "object",
                                                                                  "data"
                                                                              ]
                                                            },
                              "stancode.mvgam_prefit":  {
                                                            "s3_class":  "mvgam_prefit",
                                                            "s3_method":  "stancode",
                                                            "signature":  "stancode.mvgam_prefit \u003c- function(object, ...) {",
                                                            "is_s3_method":  true,
                                                            "arguments":  "object"
                                                        },
                              "stability.mvgam":  {
                                                      "s3_class":  "mvgam",
                                                      "s3_method":  "stability",
                                                      "signature":  "stability.mvgam = function(object, ...) {",
                                                      "is_s3_method":  true,
                                                      "arguments":  "object"
                                                  },
                              "validate_no_addition_terms_in_trends":  {
                                                                           "s3_class":  "",
                                                                           "s3_method":  "",
                                                                           "signature":  "validate_no_addition_terms_in_trends \u003c- function(formula_str) {",
                                                                           "is_s3_method":  false,
                                                                           "arguments":  "formula_str"
                                                                       },
                              "check_block_semicolons":  {
                                                             "s3_class":  "",
                                                             "s3_method":  "",
                                                             "signature":  "check_block_semicolons \u003c- function(block_content) {",
                                                             "is_s3_method":  false,
                                                             "arguments":  "block_content"
                                                         },
                              "setup_brms_lightweight":  {
                                                             "s3_class":  "",
                                                             "s3_method":  "",
                                                             "signature":  "setup_brms_lightweight \u003c- function(formula, data, family = gaussian(), trend_formula = NULL, stanvars = NULL, ...) {",
                                                             "is_s3_method":  false,
                                                             "arguments":  [
                                                                               "formula",
                                                                               "data",
                                                                               "family"
                                                                           ]
                                                         },
                              "validate_multiple_imputation_datasets":  {
                                                                            "s3_class":  "",
                                                                            "s3_method":  "",
                                                                            "signature":  "validate_multiple_imputation_datasets \u003c- function(data_list) {",
                                                                            "is_s3_method":  false,
                                                                            "arguments":  "data_list"
                                                                        },
                              "loo_compare.mvgam":  {
                                                        "s3_class":  "mvgam",
                                                        "s3_method":  "loo_compare",
                                                        "signature":  "loo_compare.mvgam \u003c- function( x, ..., model_names = NULL, incl_dynamics = FALSE ) {",
                                                        "is_s3_method":  true,
                                                        "arguments":  [
                                                                          "x",
                                                                          "model_names",
                                                                          "incl_dynamics"
                                                                      ]
                                                    },
                              "zmvn_trend_properties":  {
                                                            "s3_class":  "",
                                                            "s3_method":  "",
                                                            "signature":  "zmvn_trend_properties \u003c- function() {",
                                                            "is_s3_method":  false,
                                                            "arguments":  null
                                                        },
                              "mvgam_attach":  {
                                                   "s3_class":  "",
                                                   "s3_method":  "",
                                                   "signature":  "mvgam_attach \u003c- function() {",
                                                   "is_s3_method":  false,
                                                   "arguments":  null
                                               },
                              "summary.mvgam_forecast":  {
                                                             "s3_class":  "mvgam_forecast",
                                                             "s3_method":  "summary",
                                                             "signature":  "summary.mvgam_forecast = function(object, probs = c(0.025, 0.975), ...) {",
                                                             "is_s3_method":  true,
                                                             "arguments":  [
                                                                               "object",
                                                                               "probs"
                                                                           ]
                                                         },
                              "assemble_mvgam_stan_data":  {
                                                               "s3_class":  "",
                                                               "s3_method":  "",
                                                               "signature":  "assemble_mvgam_stan_data \u003c- function(obs_formula, trend_stanvars = NULL, data, family = gaussian()) {",
                                                               "is_s3_method":  false,
                                                               "arguments":  [
                                                                                 "obs_formula",
                                                                                 "trend_stanvars",
                                                                                 "data",
                                                                                 "family"
                                                                             ]
                                                           },
                              "get_trend_prior_spec":  {
                                                           "s3_class":  "",
                                                           "s3_method":  "",
                                                           "signature":  "get_trend_prior_spec \u003c- function(trend_type) {",
                                                           "is_s3_method":  false,
                                                           "arguments":  "trend_type"
                                                       },
                              "as_draws_list.mvgam":  {
                                                          "s3_class":  "mvgam",
                                                          "s3_method":  "as_draws_list",
                                                          "signature":  "as_draws_list.mvgam \u003c- function( x, variable = NULL, regex = FALSE, inc_warmup = FALSE, use_alias = TRUE, ... ) {",
                                                          "is_s3_method":  true,
                                                          "arguments":  [
                                                                            "x",
                                                                            "variable",
                                                                            "regex",
                                                                            "inc_warmup",
                                                                            "use_alias"
                                                                        ]
                                                      },
                              "validate_trend_properties":  {
                                                                "s3_class":  "",
                                                                "s3_method":  "",
                                                                "signature":  "validate_trend_properties \u003c- function(trend_info, trend_type, func_name) {",
                                                                "is_s3_method":  false,
                                                                "arguments":  [
                                                                                  "trend_info",
                                                                                  "trend_type",
                                                                                  "func_name"
                                                                              ]
                                                            },
                              "set_coef.mvgam":  {
                                                     "s3_class":  "mvgam",
                                                     "s3_method":  "set_coef",
                                                     "signature":  "set_coef.mvgam \u003c- function(model, coefs, trend_effects = FALSE, ...) {",
                                                     "is_s3_method":  true,
                                                     "arguments":  [
                                                                       "model",
                                                                       "coefs",
                                                                       "trend_effects"
                                                                   ]
                                                 },
                              "generate_matrix_z_multiblock_stanvars":  {
                                                                            "s3_class":  "",
                                                                            "s3_method":  "",
                                                                            "signature":  "generate_matrix_z_multiblock_stanvars \u003c- function(is_factor_model, n_lv, n_series) {",
                                                                            "is_s3_method":  false,
                                                                            "arguments":  [
                                                                                              "is_factor_model",
                                                                                              "n_lv",
                                                                                              "n_series"
                                                                                          ]
                                                                        },
                              "apply_mvgam_trend_defaults":  {
                                                                 "s3_class":  "",
                                                                 "s3_method":  "",
                                                                 "signature":  "apply_mvgam_trend_defaults \u003c- function(trend_obj) {",
                                                                 "is_s3_method":  false,
                                                                 "arguments":  "trend_obj"
                                                             },
                              "extract_multivariate_standata":  {
                                                                    "s3_class":  "",
                                                                    "s3_method":  "",
                                                                    "signature":  "extract_multivariate_standata \u003c- function(standata, suffix, mapping, response_names) {",
                                                                    "is_s3_method":  false,
                                                                    "arguments":  [
                                                                                      "standata",
                                                                                      "suffix",
                                                                                      "mapping",
                                                                                      "response_names"
                                                                                  ]
                                                                },
                              "conditional_effects.mvgam":  {
                                                                "s3_class":  "mvgam",
                                                                "s3_method":  "conditional_effects",
                                                                "signature":  "conditional_effects.mvgam = function( x, effects = NULL, type = \u0027expected\u0027, points = FALSE, rug = FALSE, ... ) {",
                                                                "is_s3_method":  true,
                                                                "arguments":  [
                                                                                  "x",
                                                                                  "effects",
                                                                                  "type",
                                                                                  "points",
                                                                                  "rug"
                                                                              ]
                                                            },
                              "mvgam_single_dataset":  {
                                                           "s3_class":  "",
                                                           "s3_method":  "",
                                                           "signature":  "mvgam_single_dataset \u003c- function(formula, trend_formula, data, backend, family, ...) {",
                                                           "is_s3_method":  false,
                                                           "arguments":  [
                                                                             "formula",
                                                                             "trend_formula",
                                                                             "data",
                                                                             "backend",
                                                                             "family"
                                                                         ]
                                                       },
                              "ecdf_plotdat":  {
                                                   "s3_class":  "",
                                                   "s3_method":  "",
                                                   "signature":  "ecdf_plotdat \u003c- function(vals, x) {",
                                                   "is_s3_method":  false,
                                                   "arguments":  [
                                                                     "vals",
                                                                     "x"
                                                                 ]
                                               },
                              "create_trend_brmsfit":  {
                                                           "s3_class":  "",
                                                           "s3_method":  "",
                                                           "signature":  "create_trend_brmsfit \u003c- function(combined_fit, trend_setup, mv_spec) {",
                                                           "is_s3_method":  false,
                                                           "arguments":  [
                                                                             "combined_fit",
                                                                             "trend_setup",
                                                                             "mv_spec"
                                                                         ]
                                                       },
                              "handle_nse_param":  {
                                                       "s3_class":  "",
                                                       "s3_method":  "",
                                                       "signature":  "handle_nse_param \u003c- function(expr) {",
                                                       "is_s3_method":  false,
                                                       "arguments":  "expr"
                                                   },
                              "get_parameter_type_default_prior":  {
                                                                       "s3_class":  "",
                                                                       "s3_method":  "",
                                                                       "signature":  "get_parameter_type_default_prior \u003c- function(param_name) {",
                                                                       "is_s3_method":  false,
                                                                       "arguments":  "param_name"
                                                                   },
                              "extract_non_likelihood_from_model_block":  {
                                                                              "s3_class":  "",
                                                                              "s3_method":  "",
                                                                              "signature":  "extract_non_likelihood_from_model_block \u003c- function(model_block) {",
                                                                              "is_s3_method":  false,
                                                                              "arguments":  "model_block"
                                                                          },
                              "create_times_trend_matrix":  {
                                                                "s3_class":  "",
                                                                "s3_method":  "",
                                                                "signature":  "create_times_trend_matrix \u003c- function(n_time, n_series, unique_times, unique_series, matrix_name) {",
                                                                "is_s3_method":  false,
                                                                "arguments":  [
                                                                                  "n_time",
                                                                                  "n_series",
                                                                                  "unique_times",
                                                                                  "unique_series",
                                                                                  "matrix_name"
                                                                              ]
                                                            },
                              "validate_single_trend_formula":  {
                                                                    "s3_class":  "",
                                                                    "s3_method":  "",
                                                                    "signature":  "validate_single_trend_formula \u003c- function(formula, context = NULL, allow_response = FALSE) {",
                                                                    "is_s3_method":  false,
                                                                    "arguments":  [
                                                                                      "formula",
                                                                                      "context",
                                                                                      "allow_response"
                                                                                  ]
                                                                },
                              "extract_observation_priors_from_enhanced":  {
                                                                               "s3_class":  "",
                                                                               "s3_method":  "",
                                                                               "signature":  "extract_observation_priors_from_enhanced \u003c- function(prior) {",
                                                                               "is_s3_method":  false,
                                                                               "arguments":  "prior"
                                                                           },
                              "validate_proportional":  {
                                                            "s3_class":  "",
                                                            "s3_method":  "",
                                                            "signature":  "validate_proportional \u003c- function(x, name = deparse(substitute(x))) {",
                                                            "is_s3_method":  false,
                                                            "arguments":  [
                                                                              "x",
                                                                              "name"
                                                                          ]
                                                        },
                              "are_braces_balanced":  {
                                                          "s3_class":  "",
                                                          "s3_method":  "",
                                                          "signature":  "are_braces_balanced \u003c- function(stan_code) {",
                                                          "is_s3_method":  false,
                                                          "arguments":  "stan_code"
                                                      },
                              "generate_stan_array_declaration":  {
                                                                      "s3_class":  "",
                                                                      "s3_method":  "",
                                                                      "signature":  "generate_stan_array_declaration \u003c- function(var_name, var_type, dimensions, data_matrix) {",
                                                                      "is_s3_method":  false,
                                                                      "arguments":  [
                                                                                        "var_name",
                                                                                        "var_type",
                                                                                        "dimensions",
                                                                                        "data_matrix"
                                                                                    ]
                                                                  },
                              "var_fecov":  {
                                                "s3_class":  "",
                                                "s3_method":  "",
                                                "signature":  "var_fecov \u003c- function(x, h) {",
                                                "is_s3_method":  false,
                                                "arguments":  [
                                                                  "x",
                                                                  "h"
                                                              ]
                                            },
                              "find_predictors.mvgam_prefit":  {
                                                                   "s3_class":  "mvgam_prefit",
                                                                   "s3_method":  "find_predictors",
                                                                   "signature":  "find_predictors.mvgam_prefit = function( x, effects = c(\u0027fixed\u0027, \u0027random\u0027, \u0027all\u0027), component = c( \u0027all\u0027, \u0027conditional\u0027, \u0027zi\u0027, \u0027zero_inflated\u0027, \u0027dispersion\u0027, \u0027instruments\u0027, \u0027correlation\u0027, \u0027smooth_terms\u0027 ), flatten = FALSE, verbose = TRUE, ... ) {",
                                                                   "is_s3_method":  true,
                                                                   "arguments":  [
                                                                                     "x",
                                                                                     "effects"
                                                                                 ]
                                                               },
                              "samp_noinf":  {
                                                 "s3_class":  "",
                                                 "s3_method":  "",
                                                 "signature":  "samp_noinf = function(x) {",
                                                 "is_s3_method":  false,
                                                 "arguments":  "x"
                                             },
                              "var1_recursC":  {
                                                   "s3_class":  "",
                                                   "s3_method":  "",
                                                   "signature":  "var1_recursC \u003c- function(A, linpreds, errors, drift, last_trends, h) {",
                                                   "is_s3_method":  false,
                                                   "arguments":  [
                                                                     "A",
                                                                     "linpreds",
                                                                     "errors",
                                                                     "drift",
                                                                     "last_trends",
                                                                     "h"
                                                                 ]
                                               },
                              "plot.mvgam_conditional_effects":  {
                                                                     "s3_class":  "mvgam_conditional_effects",
                                                                     "s3_method":  "plot",
                                                                     "signature":  "plot.mvgam_conditional_effects = function(x, plot = TRUE, ask = FALSE, ...) {",
                                                                     "is_s3_method":  true,
                                                                     "arguments":  [
                                                                                       "x",
                                                                                       "plot",
                                                                                       "ask"
                                                                                   ]
                                                                 },
                              "extract_trend_stanvars_from_setup":  {
                                                                        "s3_class":  "",
                                                                        "s3_method":  "",
                                                                        "signature":  "extract_trend_stanvars_from_setup \u003c- function(trend_setup, trend_specs, response_suffix = \"\", response_name = NULL, obs_setup = NULL) {",
                                                                        "is_s3_method":  false,
                                                                        "arguments":  [
                                                                                          "trend_setup",
                                                                                          "trend_specs",
                                                                                          "response_suffix",
                                                                                          "response_name",
                                                                                          "obs_setup"
                                                                                      ]
                                                                    },
                              "extract_univariate_standata":  {
                                                                  "s3_class":  "",
                                                                  "s3_method":  "",
                                                                  "signature":  "extract_univariate_standata \u003c- function(standata, suffix, mapping) {",
                                                                  "is_s3_method":  false,
                                                                  "arguments":  [
                                                                                    "standata",
                                                                                    "suffix",
                                                                                    "mapping"
                                                                                ]
                                                              },
                              "generate_var_monitor_params":  {
                                                                  "s3_class":  "",
                                                                  "s3_method":  "",
                                                                  "signature":  "generate_var_monitor_params \u003c- function(trend_spec) {",
                                                                  "is_s3_method":  false,
                                                                  "arguments":  "trend_spec"
                                                              },
                              "extract_observation_parameters":  {
                                                                     "s3_class":  "",
                                                                     "s3_method":  "",
                                                                     "signature":  "extract_observation_parameters \u003c- function(combined_fit) {",
                                                                     "is_s3_method":  false,
                                                                     "arguments":  "combined_fit"
                                                                 },
                              "get_prior":  {
                                                "s3_class":  "",
                                                "s3_method":  "",
                                                "signature":  "get_prior \u003c- function(object, ...) {",
                                                "is_s3_method":  false,
                                                "arguments":  "object"
                                            },
                              "add_complete_metadata":  {
                                                            "s3_class":  "",
                                                            "s3_method":  "",
                                                            "signature":  "add_complete_metadata \u003c- function(trend_obj) {",
                                                            "is_s3_method":  false,
                                                            "arguments":  "trend_obj"
                                                        },
                              "extract_fit_estimates":  {
                                                            "s3_class":  "",
                                                            "s3_method":  "",
                                                            "signature":  "extract_fit_estimates \u003c- function(fit) {",
                                                            "is_s3_method":  false,
                                                            "arguments":  "fit"
                                                        },
                              "add_summary_labels":  {
                                                         "s3_class":  "",
                                                         "s3_method":  "",
                                                         "signature":  "add_summary_labels \u003c- function(trend_obj) {",
                                                         "is_s3_method":  false,
                                                         "arguments":  "trend_obj"
                                                     },
                              "fevd":  {
                                           "s3_class":  "",
                                           "s3_method":  "",
                                           "signature":  "fevd \u003c- function(object, ...) {",
                                           "is_s3_method":  false,
                                           "arguments":  "object"
                                       },
                              "evaluate_param_conditions":  {
                                                                "s3_class":  "",
                                                                "s3_method":  "",
                                                                "signature":  "evaluate_param_conditions \u003c- function(param_spec, envir = parent.frame()) {",
                                                                "is_s3_method":  false,
                                                                "arguments":  [
                                                                                  "param_spec",
                                                                                  "envir"
                                                                              ]
                                                            },
                              "apply_validation_rules":  {
                                                             "s3_class":  "",
                                                             "s3_method":  "",
                                                             "signature":  "apply_validation_rules \u003c- function(trend_specs, data) {",
                                                             "is_s3_method":  false,
                                                             "arguments":  [
                                                                               "trend_specs",
                                                                               "data"
                                                                           ]
                                                         },
                              "fit_mvgam_model":  {
                                                      "s3_class":  "",
                                                      "s3_method":  "",
                                                      "signature":  "fit_mvgam_model \u003c- function(stancode, standata, backend = \"cmdstanr\", ...) {",
                                                      "is_s3_method":  false,
                                                      "arguments":  [
                                                                        "stancode",
                                                                        "standata",
                                                                        "backend"
                                                                    ]
                                                  },
                              "rename_multivariate_parameters":  {
                                                                     "s3_class":  "",
                                                                     "s3_method":  "",
                                                                     "signature":  "rename_multivariate_parameters \u003c- function(code, suffix, mapping, response_names) {",
                                                                     "is_s3_method":  false,
                                                                     "arguments":  [
                                                                                       "code",
                                                                                       "suffix",
                                                                                       "mapping",
                                                                                       "response_names"
                                                                                   ]
                                                                 },
                              "generate_car_monitor_params":  {
                                                                  "s3_class":  "",
                                                                  "s3_method":  "",
                                                                  "signature":  "generate_car_monitor_params \u003c- function(trend_spec) {",
                                                                  "is_s3_method":  false,
                                                                  "arguments":  "trend_spec"
                                                              },
                              "apply_safe_parameter_replacement":  {
                                                                       "s3_class":  "",
                                                                       "s3_method":  "",
                                                                       "signature":  "apply_safe_parameter_replacement \u003c- function(code, old_name, new_name) {",
                                                                       "is_s3_method":  false,
                                                                       "arguments":  [
                                                                                         "code",
                                                                                         "old_name",
                                                                                         "new_name"
                                                                                     ]
                                                                   },
                              "prepare_stan_data":  {
                                                        "s3_class":  "",
                                                        "s3_method":  "",
                                                        "signature":  "prepare_stan_data \u003c- function(data, variable_info) {",
                                                        "is_s3_method":  false,
                                                        "arguments":  [
                                                                          "data",
                                                                          "variable_info"
                                                                      ]
                                                    },
                              "print.mvgam":  {
                                                  "s3_class":  "mvgam",
                                                  "s3_method":  "print",
                                                  "signature":  "print.mvgam = function(x, ...) {",
                                                  "is_s3_method":  true,
                                                  "arguments":  "x"
                                              },
                              "dyn_to_gpspline":  {
                                                      "s3_class":  "",
                                                      "s3_method":  "",
                                                      "signature":  "dyn_to_gpspline = function(term, N) {",
                                                      "is_s3_method":  false,
                                                      "arguments":  [
                                                                        "term",
                                                                        "N"
                                                                    ]
                                                  },
                              "print.how_to_cite":  {
                                                        "s3_class":  "how_to_cite",
                                                        "s3_method":  "print",
                                                        "signature":  "print.how_to_cite \u003c- function(x, ...) {",
                                                        "is_s3_method":  true,
                                                        "arguments":  "x"
                                                    },
                              "tidy.mvgam":  {
                                                 "s3_class":  "mvgam",
                                                 "s3_method":  "tidy",
                                                 "signature":  "tidy.mvgam \u003c- function(x, probs = c(0.025, 0.5, 0.975), ...) {",
                                                 "is_s3_method":  true,
                                                 "arguments":  [
                                                                   "x",
                                                                   "probs"
                                                               ]
                                             },
                              "residual_cor.mvgam":  {
                                                         "s3_class":  "mvgam",
                                                         "s3_method":  "residual_cor",
                                                         "signature":  "residual_cor.mvgam \u003c- function( object, summary = TRUE, robust = FALSE, probs = c(0.025, 0.975), ... ) {",
                                                         "is_s3_method":  true,
                                                         "arguments":  [
                                                                           "object",
                                                                           "summary",
                                                                           "robust",
                                                                           "probs"
                                                                       ]
                                                     },
                              "generate_matrix_z_parameters":  {
                                                                   "s3_class":  "",
                                                                   "s3_method":  "",
                                                                   "signature":  "generate_matrix_z_parameters \u003c- function(is_factor_model, n_lv, n_series) {",
                                                                   "is_s3_method":  false,
                                                                   "arguments":  [
                                                                                     "is_factor_model",
                                                                                     "n_lv",
                                                                                     "n_series"
                                                                                 ]
                                                               },
                              "integrate_nonlinear_with_assembly":  {
                                                                        "s3_class":  "",
                                                                        "s3_method":  "",
                                                                        "signature":  "integrate_nonlinear_with_assembly \u003c- function(obs_setup, trend_specs) {",
                                                                        "is_s3_method":  false,
                                                                        "arguments":  [
                                                                                          "obs_setup",
                                                                                          "trend_specs"
                                                                                      ]
                                                                    },
                              "plot.mvgam_residcor":  {
                                                          "s3_class":  "mvgam_residcor",
                                                          "s3_method":  "plot",
                                                          "signature":  "plot.mvgam_residcor = function(x, cluster = FALSE, ...) {",
                                                          "is_s3_method":  true,
                                                          "arguments":  [
                                                                            "x",
                                                                            "cluster"
                                                                        ]
                                                      },
                              "ordinate":  {
                                               "s3_class":  "",
                                               "s3_method":  "",
                                               "signature":  "ordinate \u003c- function(object, ...) {",
                                               "is_s3_method":  false,
                                               "arguments":  "object"
                                           },
                              "validate_pos_real":  {
                                                        "s3_class":  "",
                                                        "s3_method":  "",
                                                        "signature":  "validate_pos_real \u003c- function(x, name = deparse(substitute(x))) {",
                                                        "is_s3_method":  false,
                                                        "arguments":  [
                                                                          "x",
                                                                          "name"
                                                                      ]
                                                    },
                              "random_Sigma":  {
                                                   "s3_class":  "",
                                                   "s3_method":  "",
                                                   "signature":  "random_Sigma = function(N) {",
                                                   "is_s3_method":  false,
                                                   "arguments":  "N"
                                               },
                              "extract_and_rename_stan_blocks":  {
                                                                     "s3_class":  "",
                                                                     "s3_method":  "",
                                                                     "signature":  "extract_and_rename_stan_blocks \u003c- function(stancode, suffix, mapping, is_multivariate, response_names, standata = NULL) {",
                                                                     "is_s3_method":  false,
                                                                     "arguments":  [
                                                                                       "stancode",
                                                                                       "suffix",
                                                                                       "mapping",
                                                                                       "is_multivariate",
                                                                                       "response_names",
                                                                                       "standata"
                                                                                   ]
                                                                 },
                              "inject_trend_into_glm_predictor":  {
                                                                      "s3_class":  "",
                                                                      "s3_method":  "",
                                                                      "signature":  "inject_trend_into_glm_predictor \u003c- function(base_stancode, trend_stanvars, glm_type) {",
                                                                      "is_s3_method":  false,
                                                                      "arguments":  [
                                                                                        "base_stancode",
                                                                                        "trend_stanvars",
                                                                                        "glm_type"
                                                                                    ]
                                                                  },
                              "log_mean_exp":  {
                                                   "s3_class":  "",
                                                   "s3_method":  "",
                                                   "signature":  "log_mean_exp \u003c- function(x) {",
                                                   "is_s3_method":  false,
                                                   "arguments":  "x"
                                               },
                              "parse_glm_parameters":  {
                                                           "s3_class":  "",
                                                           "s3_method":  "",
                                                           "signature":  "parse_glm_parameters \u003c- function(stan_code, glm_type) {",
                                                           "is_s3_method":  false,
                                                           "arguments":  [
                                                                             "stan_code",
                                                                             "glm_type"
                                                                         ]
                                                       },
                              "get_car_parameter_prior":  {
                                                              "s3_class":  "",
                                                              "s3_method":  "",
                                                              "signature":  "get_car_parameter_prior \u003c- function(param_name, trend_obj) {",
                                                              "is_s3_method":  false,
                                                              "arguments":  [
                                                                                "param_name",
                                                                                "trend_obj"
                                                                            ]
                                                          },
                              "extract_response_from_formula":  {
                                                                    "s3_class":  "",
                                                                    "s3_method":  "",
                                                                    "signature":  "extract_response_from_formula \u003c- function(formula) {",
                                                                    "is_s3_method":  false,
                                                                    "arguments":  "formula"
                                                                },
                              "validate_offsets_in_obs":  {
                                                              "s3_class":  "",
                                                              "s3_method":  "",
                                                              "signature":  "validate_offsets_in_obs \u003c- function(formula) {",
                                                              "is_s3_method":  false,
                                                              "arguments":  "formula"
                                                          },
                              "plot_mvgam_factors":  {
                                                         "s3_class":  "",
                                                         "s3_method":  "",
                                                         "signature":  "plot_mvgam_factors = function(object, plot = TRUE) {",
                                                         "is_s3_method":  false,
                                                         "arguments":  [
                                                                           "object",
                                                                           "plot"
                                                                       ]
                                                     },
                              "get_trend_parameter_prior":  {
                                                                "s3_class":  "",
                                                                "s3_method":  "",
                                                                "signature":  "get_trend_parameter_prior \u003c- function(prior = NULL, param_name) {",
                                                                "is_s3_method":  false,
                                                                "arguments":  [
                                                                                  "prior",
                                                                                  "param_name"
                                                                              ]
                                                            },
                              "validate_brms_formula":  {
                                                            "s3_class":  "",
                                                            "s3_method":  "",
                                                            "signature":  "validate_brms_formula \u003c- function(formula) {",
                                                            "is_s3_method":  false,
                                                            "arguments":  "formula"
                                                        },
                              "dynamic":  {
                                              "s3_class":  "",
                                              "s3_method":  "",
                                              "signature":  "dynamic = function(variable, k, rho = 5, stationary = TRUE, scale = TRUE) {",
                                              "is_s3_method":  false,
                                              "arguments":  [
                                                                "variable",
                                                                "k",
                                                                "rho",
                                                                "stationary",
                                                                "scale"
                                                            ]
                                          },
                              "extract_time_information":  {
                                                               "s3_class":  "",
                                                               "s3_method":  "",
                                                               "signature":  "extract_time_information \u003c- function(data) {",
                                                               "is_s3_method":  false,
                                                               "arguments":  "data"
                                                           },
                              "extract_trend_parameters":  {
                                                               "s3_class":  "",
                                                               "s3_method":  "",
                                                               "signature":  "extract_trend_parameters \u003c- function(combined_fit, mv_spec) {",
                                                               "is_s3_method":  false,
                                                               "arguments":  [
                                                                                 "combined_fit",
                                                                                 "mv_spec"
                                                                             ]
                                                           },
                              "variables.mvgam":  {
                                                      "s3_class":  "mvgam",
                                                      "s3_method":  "variables",
                                                      "signature":  "variables.mvgam = function(x, ...) {",
                                                      "is_s3_method":  true,
                                                      "arguments":  "x"
                                                  },
                              "extract_code_block":  {
                                                         "s3_class":  "",
                                                         "s3_method":  "",
                                                         "signature":  "extract_code_block \u003c- function(code_lines, block_name) {",
                                                         "is_s3_method":  false,
                                                         "arguments":  [
                                                                           "code_lines",
                                                                           "block_name"
                                                                       ]
                                                     },
                              "parse_trend_formula":  {
                                                          "s3_class":  "",
                                                          "s3_method":  "",
                                                          "signature":  "parse_trend_formula \u003c- function(trend_formula, data = NULL) {",
                                                          "is_s3_method":  false,
                                                          "arguments":  [
                                                                            "trend_formula",
                                                                            "data"
                                                                        ]
                                                      },
                              "add_trend_component_attr":  {
                                                               "s3_class":  "",
                                                               "s3_method":  "",
                                                               "signature":  "add_trend_component_attr \u003c- function(prior, component = NULL) {",
                                                               "is_s3_method":  false,
                                                               "arguments":  [
                                                                                 "prior",
                                                                                 "component"
                                                                             ]
                                                           },
                              "generate_times_trend_matrices":  {
                                                                    "s3_class":  "",
                                                                    "s3_method":  "",
                                                                    "signature":  "generate_times_trend_matrices \u003c- function(n_time, n_series, unique_times, unique_series, is_multivariate, response_names) {",
                                                                    "is_s3_method":  false,
                                                                    "arguments":  [
                                                                                      "n_time",
                                                                                      "n_series",
                                                                                      "unique_times",
                                                                                      "unique_series",
                                                                                      "is_multivariate",
                                                                                      "response_names"
                                                                                  ]
                                                                },
                              "get_data.mvgam":  {
                                                     "s3_class":  "mvgam",
                                                     "s3_method":  "get_data",
                                                     "signature":  "get_data.mvgam = function(x, source = \"environment\", verbose = TRUE, ...) {",
                                                     "is_s3_method":  true,
                                                     "arguments":  [
                                                                       "x",
                                                                       "source",
                                                                       "verbose"
                                                                   ]
                                                 },
                              "get_default_trend_parameter_prior":  {
                                                                        "s3_class":  "",
                                                                        "s3_method":  "",
                                                                        "signature":  "get_default_trend_parameter_prior \u003c- function(param_name, trend_obj) {",
                                                                        "is_s3_method":  false,
                                                                        "arguments":  [
                                                                                          "param_name",
                                                                                          "trend_obj"
                                                                                      ]
                                                                    },
                              "augment.mvgam":  {
                                                    "s3_class":  "mvgam",
                                                    "s3_method":  "augment",
                                                    "signature":  "augment.mvgam \u003c- function(x, robust = FALSE, probs = c(0.025, 0.975), ...) {",
                                                    "is_s3_method":  true,
                                                    "arguments":  [
                                                                      "x",
                                                                      "robust",
                                                                      "probs"
                                                                  ]
                                                },
                              "prepare_stanvars_for_brms":  {
                                                                "s3_class":  "",
                                                                "s3_method":  "",
                                                                "signature":  "prepare_stanvars_for_brms \u003c- function(stanvars) {",
                                                                "is_s3_method":  false,
                                                                "arguments":  "stanvars"
                                                            },
                              "process_arg":  {
                                                  "s3_class":  "",
                                                  "s3_method":  "",
                                                  "signature":  "process_arg \u003c- function(x) {",
                                                  "is_s3_method":  false,
                                                  "arguments":  "x"
                                              },
                              "apply_suffix_to_name":  {
                                                           "s3_class":  "",
                                                           "s3_method":  "",
                                                           "signature":  "apply_suffix_to_name \u003c- function(name, patterns, suffix) {",
                                                           "is_s3_method":  false,
                                                           "arguments":  [
                                                                             "name",
                                                                             "patterns",
                                                                             "suffix"
                                                                         ]
                                                       },
                              "cluster_cormat":  {
                                                     "s3_class":  "",
                                                     "s3_method":  "",
                                                     "signature":  "cluster_cormat \u003c- function(cormat, ...) {",
                                                     "is_s3_method":  false,
                                                     "arguments":  "cormat"
                                                 },
                              "validate_list_trend_formula":  {
                                                                  "s3_class":  "",
                                                                  "s3_method":  "",
                                                                  "signature":  "validate_list_trend_formula \u003c- function(formula_list) {",
                                                                  "is_s3_method":  false,
                                                                  "arguments":  "formula_list"
                                                              },
                              "pw_trend_properties":  {
                                                          "s3_class":  "",
                                                          "s3_method":  "",
                                                          "signature":  "pw_trend_properties \u003c- function() {",
                                                          "is_s3_method":  false,
                                                          "arguments":  null
                                                      },
                              "xts.to.ts":  {
                                                "s3_class":  "to.ts",
                                                "s3_method":  "xts",
                                                "signature":  "xts.to.ts \u003c- function(x, freq = 52) {",
                                                "is_s3_method":  true,
                                                "arguments":  [
                                                                  "x",
                                                                  "freq"
                                                              ]
                                            },
                              "extract_trend_priors":  {
                                                           "s3_class":  "",
                                                           "s3_method":  "",
                                                           "signature":  "extract_trend_priors \u003c- function(trend_formula, data, response_names = NULL) {",
                                                           "is_s3_method":  false,
                                                           "arguments":  [
                                                                             "trend_formula",
                                                                             "data",
                                                                             "response_names"
                                                                         ]
                                                       },
                              "validate_bf_trend_formula":  {
                                                                "s3_class":  "",
                                                                "s3_method":  "",
                                                                "signature":  "validate_bf_trend_formula \u003c- function(bf_obj) {",
                                                                "is_s3_method":  false,
                                                                "arguments":  "bf_obj"
                                                            },
                              "register_core_trends":  {
                                                           "s3_class":  "",
                                                           "s3_method":  "",
                                                           "signature":  "register_core_trends \u003c- function() {",
                                                           "is_s3_method":  false,
                                                           "arguments":  null
                                                       },
                              "auto_register_trend_types":  {
                                                                "s3_class":  "",
                                                                "s3_method":  "",
                                                                "signature":  "auto_register_trend_types \u003c- function() {",
                                                                "is_s3_method":  false,
                                                                "arguments":  null
                                                            },
                              "split_fc_dots":  {
                                                    "s3_class":  "",
                                                    "s3_method":  "",
                                                    "signature":  "split_fc_dots = function(x, ..., model_names = NULL, other = TRUE) {",
                                                    "is_s3_method":  false,
                                                    "arguments":  [
                                                                      "x",
                                                                      "model_names",
                                                                      "other"
                                                                  ]
                                                },
                              "rename_univariate_parameters":  {
                                                                   "s3_class":  "",
                                                                   "s3_method":  "",
                                                                   "signature":  "rename_univariate_parameters \u003c- function(code, suffix, mapping) {",
                                                                   "is_s3_method":  false,
                                                                   "arguments":  [
                                                                                     "code",
                                                                                     "suffix",
                                                                                     "mapping"
                                                                                 ]
                                                               },
                              "generate_base_brms_standata":  {
                                                                  "s3_class":  "",
                                                                  "s3_method":  "",
                                                                  "signature":  "generate_base_brms_standata \u003c- function(formula, data, family = gaussian(), stanvars = NULL) {",
                                                                  "is_s3_method":  false,
                                                                  "arguments":  [
                                                                                    "formula",
                                                                                    "data",
                                                                                    "family"
                                                                                ]
                                                              },
                              "validate_setup_components":  {
                                                                "s3_class":  "",
                                                                "s3_method":  "",
                                                                "signature":  "validate_setup_components \u003c- function(components) {",
                                                                "is_s3_method":  false,
                                                                "arguments":  "components"
                                                            },
                              "create_observation_brmsfit":  {
                                                                 "s3_class":  "",
                                                                 "s3_method":  "",
                                                                 "signature":  "create_observation_brmsfit \u003c- function(combined_fit, obs_setup, mv_spec) {",
                                                                 "is_s3_method":  false,
                                                                 "arguments":  [
                                                                                   "combined_fit",
                                                                                   "obs_setup",
                                                                                   "mv_spec"
                                                                               ]
                                                             },
                              "remove_trend_expressions":  {
                                                               "s3_class":  "",
                                                               "s3_method":  "",
                                                               "signature":  "remove_trend_expressions \u003c- function(expr, trend_patterns, depth = 0) {",
                                                               "is_s3_method":  false,
                                                               "arguments":  [
                                                                                 "expr",
                                                                                 "trend_patterns",
                                                                                 "depth"
                                                                             ]
                                                           },
                              "plot_mvgam_fc":  {
                                                    "s3_class":  "",
                                                    "s3_method":  "",
                                                    "signature":  "plot_mvgam_fc = function( object, series = 1, newdata, data_test, realisations = FALSE, n_realisations = 15, hide_xlabels = FALSE, xlab, ylab, ylim, n_cores = 1, return_forecasts = FALSE, return_score = FALSE, ... ) {",
                                                    "is_s3_method":  false,
                                                    "arguments":  [
                                                                      "object",
                                                                      "series",
                                                                      "newdata",
                                                                      "data_test",
                                                                      "realisations",
                                                                      "n_realisations",
                                                                      "hide_xlabels",
                                                                      "xlab",
                                                                      "ylab",
                                                                      "ylim",
                                                                      "n_cores",
                                                                      "return_forecasts",
                                                                      "return_score"
                                                                  ]
                                                },
                              "generate_obs_trend_mapping":  {
                                                                 "s3_class":  "",
                                                                 "s3_method":  "",
                                                                 "signature":  "generate_obs_trend_mapping \u003c- function(data, response_var, time_var = \"time\", series_var = \"series\", dimensions = NULL) {",
                                                                 "is_s3_method":  false,
                                                                 "arguments":  [
                                                                                   "data",
                                                                                   "response_var",
                                                                                   "time_var",
                                                                                   "series_var",
                                                                                   "dimensions"
                                                                               ]
                                                             },
                              "filter_block_content":  {
                                                           "s3_class":  "",
                                                           "s3_method":  "",
                                                           "signature":  "filter_block_content \u003c- function(block_content, block_type = \"model\") {",
                                                           "is_s3_method":  false,
                                                           "arguments":  [
                                                                             "block_content",
                                                                             "block_type"
                                                                         ]
                                                       },
                              "print.mvgam_conditional_effects":  {
                                                                      "s3_class":  "mvgam_conditional_effects",
                                                                      "s3_method":  "print",
                                                                      "signature":  "print.mvgam_conditional_effects \u003c- function(x, ...) {",
                                                                      "is_s3_method":  true,
                                                                      "arguments":  "x"
                                                                  },
                              "transform_glm_call":  {
                                                         "s3_class":  "",
                                                         "s3_method":  "",
                                                         "signature":  "transform_glm_call \u003c- function(stan_code, glm_type, params) {",
                                                         "is_s3_method":  false,
                                                         "arguments":  [
                                                                           "stan_code",
                                                                           "glm_type",
                                                                           "params"
                                                                       ]
                                                     },
                              "sim_mvgam":  {
                                                "s3_class":  "",
                                                "s3_method":  "",
                                                "signature":  "sim_mvgam = function( T = 100, n_series = 3, seasonality = \u0027shared\u0027, use_lv = FALSE, n_lv = 0, trend_model = RW(), drift = FALSE, prop_trend = 0.2, trend_rel, freq = 12, family = poisson(), phi, shape, sigma, nu, mu, prop_missing = 0, prop_train = 0.85 ) {",
                                                "is_s3_method":  false,
                                                "arguments":  [
                                                                  "T",
                                                                  "n_series",
                                                                  "seasonality",
                                                                  "use_lv",
                                                                  "n_lv",
                                                                  "trend_model"
                                                              ]
                                            },
                              "validate_trend_formula_brms":  {
                                                                  "s3_class":  "",
                                                                  "s3_method":  "",
                                                                  "signature":  "validate_trend_formula_brms \u003c- function(trend_formula) {",
                                                                  "is_s3_method":  false,
                                                                  "arguments":  "trend_formula"
                                                              },
                              "extract_regular_terms":  {
                                                            "s3_class":  "",
                                                            "s3_method":  "",
                                                            "signature":  "extract_regular_terms \u003c- function(formula_terms) {",
                                                            "is_s3_method":  false,
                                                            "arguments":  "formula_terms"
                                                        },
                              "error":  {
                                            "s3_class":  "",
                                            "s3_method":  "",
                                            "signature":  "error = function(x) {",
                                            "is_s3_method":  false,
                                            "arguments":  "x"
                                        },
                              "gen_irf":  {
                                              "s3_class":  "",
                                              "s3_method":  "",
                                              "signature":  "gen_irf \u003c- function(x, h = 6, cumulative = TRUE, orthogonal = FALSE) {",
                                              "is_s3_method":  false,
                                              "arguments":  [
                                                                "x",
                                                                "h",
                                                                "cumulative",
                                                                "orthogonal"
                                                            ]
                                          },
                              "as_draws_array.mvgam":  {
                                                           "s3_class":  "mvgam",
                                                           "s3_method":  "as_draws_array",
                                                           "signature":  "as_draws_array.mvgam \u003c- function( x, variable = NULL, regex = FALSE, inc_warmup = FALSE, use_alias = TRUE, ... ) {",
                                                           "is_s3_method":  true,
                                                           "arguments":  [
                                                                             "x",
                                                                             "variable",
                                                                             "regex",
                                                                             "inc_warmup",
                                                                             "use_alias"
                                                                         ]
                                                       },
                              "plot.mvgam":  {
                                                 "s3_class":  "mvgam",
                                                 "s3_method":  "plot",
                                                 "signature":  "plot.mvgam = function( x, type = \u0027residuals\u0027, series = 1, residuals = FALSE, newdata, data_test, trend_effects = FALSE, ... ) {",
                                                 "is_s3_method":  true,
                                                 "arguments":  [
                                                                   "x",
                                                                   "type",
                                                                   "series",
                                                                   "residuals",
                                                                   "newdata",
                                                                   "data_test",
                                                                   "trend_effects"
                                                               ]
                                             },
                              "extract_response_trends":  {
                                                              "s3_class":  "",
                                                              "s3_method":  "",
                                                              "signature":  "extract_response_trends \u003c- function(trend_formula, response_names, validate_separate = FALSE) {",
                                                              "is_s3_method":  false,
                                                              "arguments":  [
                                                                                "trend_formula",
                                                                                "response_names",
                                                                                "validate_separate"
                                                                            ]
                                                          },
                              "get_data.mvgam_prefit":  {
                                                            "s3_class":  "mvgam_prefit",
                                                            "s3_method":  "get_data",
                                                            "signature":  "get_data.mvgam_prefit = function( x, source = \"environment\", verbose = TRUE, ... ) {",
                                                            "is_s3_method":  true,
                                                            "arguments":  [
                                                                              "x",
                                                                              "source",
                                                                              "verbose"
                                                                          ]
                                                        },
                              "mvgam_multiple":  {
                                                     "s3_class":  "",
                                                     "s3_method":  "",
                                                     "signature":  "mvgam_multiple \u003c- function(formula, trend_formula = NULL, data_list, backend = NULL, combine = TRUE, ...) {",
                                                     "is_s3_method":  false,
                                                     "arguments":  [
                                                                       "formula",
                                                                       "trend_formula",
                                                                       "data_list",
                                                                       "backend",
                                                                       "combine"
                                                                   ]
                                                 },
                              "VAR":  {
                                          "s3_class":  "",
                                          "s3_method":  "",
                                          "signature":  "VAR = function(time = NA, series = NA, p = 1, ma = FALSE, gr = NA, subgr = NA, n_lv = NULL) {",
                                          "is_s3_method":  false,
                                          "arguments":  [
                                                            "time",
                                                            "series",
                                                            "p",
                                                            "ma",
                                                            "gr",
                                                            "subgr",
                                                            "n_lv"
                                                        ]
                                      },
                              "build_trend_label":  {
                                                        "s3_class":  "",
                                                        "s3_method":  "",
                                                        "signature":  "build_trend_label \u003c- function(type, cor = FALSE, ma = FALSE, gr = \u0027NA\u0027, n_lv = NULL, p = NULL) {",
                                                        "is_s3_method":  false,
                                                        "arguments":  [
                                                                          "type",
                                                                          "cor",
                                                                          "ma",
                                                                          "gr",
                                                                          "n_lv",
                                                                          "p"
                                                                      ]
                                                    },
                              "append_if_not_null":  {
                                                         "s3_class":  "",
                                                         "s3_method":  "",
                                                         "signature":  "append_if_not_null \u003c- function(components, new_component) {",
                                                         "is_s3_method":  false,
                                                         "arguments":  [
                                                                           "components",
                                                                           "new_component"
                                                                       ]
                                                     },
                              "sim_seasonal":  {
                                                   "s3_class":  "",
                                                   "s3_method":  "",
                                                   "signature":  "sim_seasonal = function(T, freq = 12) {",
                                                   "is_s3_method":  false,
                                                   "arguments":  [
                                                                     "T",
                                                                     "freq"
                                                                 ]
                                               },
                              "standardize_brmsprior_columns":  {
                                                                    "s3_class":  "",
                                                                    "s3_method":  "",
                                                                    "signature":  "standardize_brmsprior_columns \u003c- function(prior_obj) {",
                                                                    "is_s3_method":  false,
                                                                    "arguments":  "prior_obj"
                                                                },
                              "pool_mvgam_fits":  {
                                                      "s3_class":  "",
                                                      "s3_method":  "",
                                                      "signature":  "pool_mvgam_fits \u003c- function(fits) {",
                                                      "is_s3_method":  false,
                                                      "arguments":  "fits"
                                                  },
                              "extract_all_bf_formulas":  {
                                                              "s3_class":  "",
                                                              "s3_method":  "",
                                                              "signature":  "extract_all_bf_formulas \u003c- function(bf_obj) {",
                                                              "is_s3_method":  false,
                                                              "arguments":  "bf_obj"
                                                          },
                              "validate_and_process_trend_parameters":  {
                                                                            "s3_class":  "",
                                                                            "s3_method":  "",
                                                                            "signature":  "validate_and_process_trend_parameters \u003c- function(trend_spec, data) {",
                                                                            "is_s3_method":  false,
                                                                            "arguments":  [
                                                                                              "trend_spec",
                                                                                              "data"
                                                                                          ]
                                                                        },
                              "validate_mapping_arrays":  {
                                                              "s3_class":  "",
                                                              "s3_method":  "",
                                                              "signature":  "validate_mapping_arrays \u003c- function(mapping_arrays) {",
                                                              "is_s3_method":  false,
                                                              "arguments":  "mapping_arrays"
                                                          },
                              "reorder_clusters":  {
                                                       "s3_class":  "",
                                                       "s3_method":  "",
                                                       "signature":  "reorder_clusters \u003c- function(x, dis, ...) {",
                                                       "is_s3_method":  false,
                                                       "arguments":  [
                                                                         "x",
                                                                         "dis"
                                                                     ]
                                                   },
                              "extract_mvbind_responses":  {
                                                               "s3_class":  "",
                                                               "s3_method":  "",
                                                               "signature":  "extract_mvbind_responses \u003c- function(formula) {",
                                                               "is_s3_method":  false,
                                                               "arguments":  "formula"
                                                           },
                              "generate_base_stancode_with_stanvars":  {
                                                                           "s3_class":  "",
                                                                           "s3_method":  "",
                                                                           "signature":  "generate_base_stancode_with_stanvars \u003c- function(obs_setup, trend_stanvars, backend = \"rstan\", silent = 1) {",
                                                                           "is_s3_method":  false,
                                                                           "arguments":  [
                                                                                             "obs_setup",
                                                                                             "trend_stanvars",
                                                                                             "backend",
                                                                                             "silent"
                                                                                         ]
                                                                       },
                              "generate_factor_model":  {
                                                            "s3_class":  "",
                                                            "s3_method":  "",
                                                            "signature":  "generate_factor_model \u003c- function(is_factor_model, n_lv) {",
                                                            "is_s3_method":  false,
                                                            "arguments":  [
                                                                              "is_factor_model",
                                                                              "n_lv"
                                                                          ]
                                                        },
                              "validate_missing_patterns":  {
                                                                "s3_class":  "",
                                                                "s3_method":  "",
                                                                "signature":  "validate_missing_patterns \u003c- function(data_list) {",
                                                                "is_s3_method":  false,
                                                                "arguments":  "data_list"
                                                            },
                              "combine_obs_trend_priors":  {
                                                               "s3_class":  "",
                                                               "s3_method":  "",
                                                               "signature":  "combine_obs_trend_priors \u003c- function(obs_priors, trend_priors) {",
                                                               "is_s3_method":  false,
                                                               "arguments":  [
                                                                                 "obs_priors",
                                                                                 "trend_priors"
                                                                             ]
                                                           },
                              "plot_histogram":  {
                                                     "s3_class":  "",
                                                     "s3_method":  "",
                                                     "signature":  "plot_histogram \u003c- function(dat, ylab = \u0027y\u0027, n_bins = NULL) {",
                                                     "is_s3_method":  false,
                                                     "arguments":  [
                                                                       "dat",
                                                                       "ylab",
                                                                       "n_bins"
                                                                   ]
                                                 },
                              "get_prior.formula":  {
                                                        "s3_class":  "formula",
                                                        "s3_method":  "get_prior",
                                                        "signature":  "get_prior.formula \u003c- function(object, ...) {",
                                                        "is_s3_method":  true,
                                                        "arguments":  "object"
                                                    },
                              "as.matrix.mvgam":  {
                                                      "s3_class":  "matrix.mvgam",
                                                      "s3_method":  "as",
                                                      "signature":  "as.matrix.mvgam = function( x, variable = \u0027betas\u0027, regex = FALSE, use_alias = TRUE, ... ) {",
                                                      "is_s3_method":  true,
                                                      "arguments":  [
                                                                        "x",
                                                                        "variable",
                                                                        "regex",
                                                                        "use_alias"
                                                                    ]
                                                  },
                              "deparse0":  {
                                               "s3_class":  "",
                                               "s3_method":  "",
                                               "signature":  "deparse0 \u003c- function(expr, ...) {",
                                               "is_s3_method":  false,
                                               "arguments":  "expr"
                                           },
                              "ensemble":  {
                                               "s3_class":  "",
                                               "s3_method":  "",
                                               "signature":  "ensemble \u003c- function(object, ...) {",
                                               "is_s3_method":  false,
                                               "arguments":  "object"
                                           },
                              "validate_trend_dispatch_consistency":  {
                                                                          "s3_class":  "",
                                                                          "s3_method":  "",
                                                                          "signature":  "validate_trend_dispatch_consistency \u003c- function(trend_obj) {",
                                                                          "is_s3_method":  false,
                                                                          "arguments":  "trend_obj"
                                                                      },
                              "smooth.construct.mod.smooth.spec":  {
                                                                       "s3_class":  "construct.mod.smooth.spec",
                                                                       "s3_method":  "smooth",
                                                                       "signature":  "smooth.construct.mod.smooth.spec \u003c- function(object, data, knots) {",
                                                                       "is_s3_method":  true,
                                                                       "arguments":  [
                                                                                         "object",
                                                                                         "data",
                                                                                         "knots"
                                                                                     ]
                                                                   },
                              "plot.mvgam_irf":  {
                                                     "s3_class":  "mvgam_irf",
                                                     "s3_method":  "plot",
                                                     "signature":  "plot.mvgam_irf = function(x, series = 1, ...) {",
                                                     "is_s3_method":  true,
                                                     "arguments":  [
                                                                       "x",
                                                                       "series"
                                                                   ]
                                                 },
                              "extract_time_series_dimensions":  {
                                                                     "s3_class":  "",
                                                                     "s3_method":  "",
                                                                     "signature":  "extract_time_series_dimensions \u003c- function(data, time_var = \"time\", series_var = \"series\", trend_type = NULL, trend_specs = NULL, response_vars = NULL) {",
                                                                     "is_s3_method":  false,
                                                                     "arguments":  [
                                                                                       "data",
                                                                                       "time_var",
                                                                                       "series_var",
                                                                                       "trend_type",
                                                                                       "trend_specs",
                                                                                       "response_vars"
                                                                                   ]
                                                                 },
                              "insert_into_stan_block":  {
                                                             "s3_class":  "",
                                                             "s3_method":  "",
                                                             "signature":  "insert_into_stan_block \u003c- function(code_lines, block_name, insertion_code) {",
                                                             "is_s3_method":  false,
                                                             "arguments":  [
                                                                               "code_lines",
                                                                               "block_name",
                                                                               "insertion_code"
                                                                           ]
                                                         },
                              "apply_rubins_rules":  {
                                                         "s3_class":  "",
                                                         "s3_method":  "",
                                                         "signature":  "apply_rubins_rules \u003c- function(estimates_list) {",
                                                         "is_s3_method":  false,
                                                         "arguments":  "estimates_list"
                                                     },
                              "parse_model_rstan":  {
                                                        "s3_class":  "",
                                                        "s3_method":  "",
                                                        "signature":  "parse_model_rstan \u003c- function(model, silent = 1, ...) {",
                                                        "is_s3_method":  false,
                                                        "arguments":  [
                                                                          "model",
                                                                          "silent"
                                                                      ]
                                                    },
                              "fevd.mvgam":  {
                                                 "s3_class":  "mvgam",
                                                 "s3_method":  "fevd",
                                                 "signature":  "fevd.mvgam \u003c- function(object, h = 10, ...) {",
                                                 "is_s3_method":  true,
                                                 "arguments":  [
                                                                   "object",
                                                                   "h"
                                                               ]
                                             },
                              "extract_stan_identifiers":  {
                                                               "s3_class":  "",
                                                               "s3_method":  "",
                                                               "signature":  "extract_stan_identifiers \u003c- function(stan_code) {",
                                                               "is_s3_method":  false,
                                                               "arguments":  "stan_code"
                                                           },
                              "lfo_cv.mvgam":  {
                                                   "s3_class":  "mvgam",
                                                   "s3_method":  "lfo_cv",
                                                   "signature":  "lfo_cv.mvgam = function( object, data, min_t, fc_horizon = 1, pareto_k_threshold = 0.7, silent = 1, ... ) {",
                                                   "is_s3_method":  true,
                                                   "arguments":  [
                                                                     "object",
                                                                     "data",
                                                                     "min_t",
                                                                     "fc_horizon",
                                                                     "pareto_k_threshold",
                                                                     "silent"
                                                                 ]
                                               },
                              "named_list":  {
                                                 "s3_class":  "",
                                                 "s3_method":  "",
                                                 "signature":  "named_list = function(names, values = NULL) {",
                                                 "is_s3_method":  false,
                                                 "arguments":  [
                                                                   "names",
                                                                   "values"
                                                               ]
                                             },
                              "validate_grouping_structure":  {
                                                                  "s3_class":  "",
                                                                  "s3_method":  "",
                                                                  "signature":  "validate_grouping_structure = function(data, trend_model, name = \u0027data\u0027) {",
                                                                  "is_s3_method":  false,
                                                                  "arguments":  [
                                                                                    "data",
                                                                                    "trend_model",
                                                                                    "name"
                                                                                ]
                                                              },
                              "all_times_avail":  {
                                                      "s3_class":  "",
                                                      "s3_method":  "",
                                                      "signature":  "all_times_avail = function(time, min_time, max_time) {",
                                                      "is_s3_method":  false,
                                                      "arguments":  [
                                                                        "time",
                                                                        "min_time",
                                                                        "max_time"
                                                                    ]
                                                  },
                              "find_predictors.mvgam":  {
                                                            "s3_class":  "mvgam",
                                                            "s3_method":  "find_predictors",
                                                            "signature":  "find_predictors.mvgam = function( x, effects = c(\u0027fixed\u0027, \u0027random\u0027, \u0027all\u0027), component = c( \u0027all\u0027, \u0027conditional\u0027, \u0027zi\u0027, \u0027zero_inflated\u0027, \u0027dispersion\u0027, \u0027instruments\u0027, \u0027correlation\u0027, \u0027smooth_terms\u0027 ), flatten = FALSE, verbose = TRUE, ... ) {",
                                                            "is_s3_method":  true,
                                                            "arguments":  [
                                                                              "x",
                                                                              "effects"
                                                                          ]
                                                        },
                              "validate_series_time":  {
                                                           "s3_class":  "",
                                                           "s3_method":  "",
                                                           "signature":  "validate_series_time = function( data, name = \u0027data\u0027, time_var, series_var = NULL, check_levels = TRUE, check_times = TRUE, is_multivariate = FALSE ) {",
                                                           "is_s3_method":  false,
                                                           "arguments":  [
                                                                             "data",
                                                                             "name",
                                                                             "time_var",
                                                                             "series_var",
                                                                             "check_levels",
                                                                             "check_times",
                                                                             "is_multivariate"
                                                                         ]
                                                       },
                              "plot.mvgam_forecast":  {
                                                          "s3_class":  "mvgam_forecast",
                                                          "s3_method":  "plot",
                                                          "signature":  "plot.mvgam_forecast = function( x, series = 1, realisations = FALSE, n_realisations = 15, xlab, ylab, ylim, ... ) {",
                                                          "is_s3_method":  true,
                                                          "arguments":  [
                                                                            "x",
                                                                            "series",
                                                                            "realisations",
                                                                            "n_realisations",
                                                                            "xlab",
                                                                            "ylab",
                                                                            "ylim"
                                                                        ]
                                                      },
                              "smooth.construct.moi.smooth.spec":  {
                                                                       "s3_class":  "construct.moi.smooth.spec",
                                                                       "s3_method":  "smooth",
                                                                       "signature":  "smooth.construct.moi.smooth.spec \u003c- function(object, data, knots) {",
                                                                       "is_s3_method":  true,
                                                                       "arguments":  [
                                                                                         "object",
                                                                                         "data",
                                                                                         "knots"
                                                                                     ]
                                                                   },
                              "inject_trend_into_linear_predictor":  {
                                                                         "s3_class":  "",
                                                                         "s3_method":  "",
                                                                         "signature":  "inject_trend_into_linear_predictor \u003c- function(base_stancode, trend_stanvars) {",
                                                                         "is_s3_method":  false,
                                                                         "arguments":  [
                                                                                           "base_stancode",
                                                                                           "trend_stanvars"
                                                                                       ]
                                                                     },
                              "get_mvgam_trend_defaults":  {
                                                               "s3_class":  "",
                                                               "s3_method":  "",
                                                               "signature":  "get_mvgam_trend_defaults \u003c- function() {",
                                                               "is_s3_method":  false,
                                                               "arguments":  null
                                                           },
                              "calculate_car_time_distances":  {
                                                                   "s3_class":  "",
                                                                   "s3_method":  "",
                                                                   "signature":  "calculate_car_time_distances \u003c- function(data_info) {",
                                                                   "is_s3_method":  false,
                                                                   "arguments":  "data_info"
                                                               },
                              "generate_ar_trend_stanvars":  {
                                                                 "s3_class":  "",
                                                                 "s3_method":  "",
                                                                 "signature":  "generate_ar_trend_stanvars \u003c- function(trend_specs, data_info, prior = NULL) {",
                                                                 "is_s3_method":  false,
                                                                 "arguments":  [
                                                                                   "trend_specs",
                                                                                   "data_info",
                                                                                   "prior"
                                                                               ]
                                                             },
                              "validate_obs_formula_brms":  {
                                                                "s3_class":  "",
                                                                "s3_method":  "",
                                                                "signature":  "validate_obs_formula_brms \u003c- function(formula) {",
                                                                "is_s3_method":  false,
                                                                "arguments":  "formula"
                                                            },
                              "validate_trend_hierarchical_structure":  {
                                                                            "s3_class":  "",
                                                                            "s3_method":  "",
                                                                            "signature":  "validate_trend_hierarchical_structure \u003c- function(trend_spec, data) {",
                                                                            "is_s3_method":  false,
                                                                            "arguments":  [
                                                                                              "trend_spec",
                                                                                              "data"
                                                                                          ]
                                                                        },
                              "get_default_incompatibility_reason":  {
                                                                         "s3_class":  "",
                                                                         "s3_method":  "",
                                                                         "signature":  "get_default_incompatibility_reason \u003c- function(name) {",
                                                                         "is_s3_method":  false,
                                                                         "arguments":  "name"
                                                                     },
                              "extract_brmsterms_from_setup":  {
                                                                   "s3_class":  "",
                                                                   "s3_method":  "",
                                                                   "signature":  "extract_brmsterms_from_setup \u003c- function(setup_object) {",
                                                                   "is_s3_method":  false,
                                                                   "arguments":  "setup_object"
                                                               },
                              "extract_prior_from_setup":  {
                                                               "s3_class":  "",
                                                               "s3_method":  "",
                                                               "signature":  "extract_prior_from_setup \u003c- function(setup_object) {",
                                                               "is_s3_method":  false,
                                                               "arguments":  "setup_object"
                                                           },
                              "ordinate.jsdgam":  {
                                                      "s3_class":  "jsdgam",
                                                      "s3_method":  "ordinate",
                                                      "signature":  "ordinate.jsdgam \u003c- function( object, which_lvs = c(1, 2), biplot = TRUE, alpha = 0.5, label_sites = TRUE, ... ) {",
                                                      "is_s3_method":  true,
                                                      "arguments":  [
                                                                        "object",
                                                                        "which_lvs"
                                                                    ]
                                                  },
                              "generate_var_trend_stanvars":  {
                                                                  "s3_class":  "",
                                                                  "s3_method":  "",
                                                                  "signature":  "generate_var_trend_stanvars \u003c- function(trend_specs, data_info, prior = NULL) {",
                                                                  "is_s3_method":  false,
                                                                  "arguments":  [
                                                                                    "trend_specs",
                                                                                    "data_info",
                                                                                    "prior"
                                                                                ]
                                                              },
                              "create_mvgam_from_combined_fit":  {
                                                                     "s3_class":  "",
                                                                     "s3_method":  "",
                                                                     "signature":  "create_mvgam_from_combined_fit \u003c- function(combined_fit, obs_setup, trend_setup = NULL, mv_spec = NULL) {",
                                                                     "is_s3_method":  false,
                                                                     "arguments":  [
                                                                                       "combined_fit",
                                                                                       "obs_setup",
                                                                                       "trend_setup",
                                                                                       "mv_spec"
                                                                                   ]
                                                                 },
                              "as_one_logical":  {
                                                     "s3_class":  "",
                                                     "s3_method":  "",
                                                     "signature":  "as_one_logical = function(x, allow_na = FALSE) {",
                                                     "is_s3_method":  false,
                                                     "arguments":  [
                                                                       "x",
                                                                       "allow_na"
                                                                   ]
                                                 },
                              "process_capacity_parameter":  {
                                                                 "s3_class":  "",
                                                                 "s3_method":  "",
                                                                 "signature":  "process_capacity_parameter \u003c- function(cap, data) {",
                                                                 "is_s3_method":  false,
                                                                 "arguments":  [
                                                                                   "cap",
                                                                                   "data"
                                                                               ]
                                                             },
                              "validate_plot_data":  {
                                                         "s3_class":  "",
                                                         "s3_method":  "",
                                                         "signature":  "validate_plot_data \u003c- function(data, y) {",
                                                         "is_s3_method":  false,
                                                         "arguments":  [
                                                                           "data",
                                                                           "y"
                                                                       ]
                                                     },
                              "plot_mvgam_randomeffects":  {
                                                               "s3_class":  "",
                                                               "s3_method":  "",
                                                               "signature":  "plot_mvgam_randomeffects = function(object, trend_effects = FALSE) {",
                                                               "is_s3_method":  false,
                                                               "arguments":  [
                                                                                 "object",
                                                                                 "trend_effects"
                                                                             ]
                                                           },
                              "c.trend_param":  {
                                                    "s3_class":  "trend_param",
                                                    "s3_method":  "c",
                                                    "signature":  "c.trend_param \u003c- function(x, ..., replace = FALSE) {",
                                                    "is_s3_method":  true,
                                                    "arguments":  [
                                                                      "x",
                                                                      "replace"
                                                                  ]
                                                },
                              "validate_univariate_series_time":  {
                                                                      "s3_class":  "",
                                                                      "s3_method":  "",
                                                                      "signature":  "validate_univariate_series_time \u003c- function(data, name, time_var, series_var, check_levels, check_times) {",
                                                                      "is_s3_method":  false,
                                                                      "arguments":  [
                                                                                        "data",
                                                                                        "name",
                                                                                        "time_var",
                                                                                        "series_var",
                                                                                        "check_levels",
                                                                                        "check_times"
                                                                                    ]
                                                                  },
                              "extract_observation_priors_only":  {
                                                                      "s3_class":  "",
                                                                      "s3_method":  "",
                                                                      "signature":  "extract_observation_priors_only \u003c- function(prior) {",
                                                                      "is_s3_method":  false,
                                                                      "arguments":  "prior"
                                                                  },
                              "ppc":  {
                                          "s3_class":  "",
                                          "s3_method":  "",
                                          "signature":  "ppc \u003c- function(object, ...) {",
                                          "is_s3_method":  false,
                                          "arguments":  "object"
                                      },
                              "detect_glm_usage":  {
                                                       "s3_class":  "",
                                                       "s3_method":  "",
                                                       "signature":  "detect_glm_usage \u003c- function(stan_code, response_names = NULL) {",
                                                       "is_s3_method":  false,
                                                       "arguments":  [
                                                                         "stan_code",
                                                                         "response_names"
                                                                     ]
                                                   },
                              "stancode.mvgam":  {
                                                     "s3_class":  "mvgam",
                                                     "s3_method":  "stancode",
                                                     "signature":  "stancode.mvgam \u003c- function(object, ...) {",
                                                     "is_s3_method":  true,
                                                     "arguments":  "object"
                                                 },
                              "register_custom_trend":  {
                                                            "s3_class":  "",
                                                            "s3_method":  "",
                                                            "signature":  "register_custom_trend \u003c- function(name, supports_factors = FALSE, generator_func, incompatibility_reason = NULL) {",
                                                            "is_s3_method":  false,
                                                            "arguments":  [
                                                                              "name",
                                                                              "supports_factors",
                                                                              "generator_func",
                                                                              "incompatibility_reason"
                                                                          ]
                                                        },
                              "generate_innovation_model":  {
                                                                "s3_class":  "",
                                                                "s3_method":  "",
                                                                "signature":  "generate_innovation_model \u003c- function(effective_dim, cor = FALSE, is_hierarchical = FALSE, prior = NULL) {",
                                                                "is_s3_method":  false,
                                                                "arguments":  [
                                                                                  "effective_dim",
                                                                                  "cor",
                                                                                  "is_hierarchical",
                                                                                  "prior"
                                                                              ]
                                                            },
                              "get_trend_validation_patterns":  {
                                                                    "s3_class":  "",
                                                                    "s3_method":  "",
                                                                    "signature":  "get_trend_validation_patterns \u003c- function() {",
                                                                    "is_s3_method":  false,
                                                                    "arguments":  null
                                                                },
                              "validate_trend_components":  {
                                                                "s3_class":  "",
                                                                "s3_method":  "",
                                                                "signature":  "validate_trend_components \u003c- function(trend_components) {",
                                                                "is_s3_method":  false,
                                                                "arguments":  "trend_components"
                                                            },
                              "var_phi":  {
                                              "s3_class":  "",
                                              "s3_method":  "",
                                              "signature":  "var_phi \u003c- function(x, h = 10) {",
                                              "is_s3_method":  false,
                                              "arguments":  [
                                                                "x",
                                                                "h"
                                                            ]
                                          },
                              "filter_pw_forecast_params":  {
                                                                "s3_class":  "",
                                                                "s3_method":  "",
                                                                "signature":  "filter_pw_forecast_params \u003c- function(monitor_params, trend_spec) {",
                                                                "is_s3_method":  false,
                                                                "arguments":  [
                                                                                  "monitor_params",
                                                                                  "trend_spec"
                                                                              ]
                                                            },
                              "as_draws.mvgam":  {
                                                     "s3_class":  "mvgam",
                                                     "s3_method":  "as_draws",
                                                     "signature":  "as_draws.mvgam \u003c- function( x, variable = NULL, regex = FALSE, inc_warmup = FALSE, use_alias = TRUE, ... ) {",
                                                     "is_s3_method":  true,
                                                     "arguments":  [
                                                                       "x",
                                                                       "variable",
                                                                       "regex",
                                                                       "inc_warmup",
                                                                       "use_alias"
                                                                   ]
                                                 },
                              "generate_trend_injection_code":  {
                                                                    "s3_class":  "",
                                                                    "s3_method":  "",
                                                                    "signature":  "generate_trend_injection_code \u003c- function(mapping_arrays) {",
                                                                    "is_s3_method":  false,
                                                                    "arguments":  "mapping_arrays"
                                                                },
                              "gen_fevd":  {
                                               "s3_class":  "",
                                               "s3_method":  "",
                                               "signature":  "gen_fevd \u003c- function(x, h = 6, ...) {",
                                               "is_s3_method":  false,
                                               "arguments":  [
                                                                 "x",
                                                                 "h"
                                                             ]
                                           },
                              "print.mvgam_prefit":  {
                                                         "s3_class":  "mvgam_prefit",
                                                         "s3_method":  "print",
                                                         "signature":  "print.mvgam_prefit = function(x, ...) {",
                                                         "is_s3_method":  true,
                                                         "arguments":  "x"
                                                     },
                              "validate_combined_stancode":  {
                                                                 "s3_class":  "",
                                                                 "s3_method":  "",
                                                                 "signature":  "validate_combined_stancode \u003c- function(result, silent = FALSE) {",
                                                                 "is_s3_method":  false,
                                                                 "arguments":  [
                                                                                   "result",
                                                                                   "silent"
                                                                               ]
                                                             },
                              "generate_common_trend_data":  {
                                                                 "s3_class":  "",
                                                                 "s3_method":  "",
                                                                 "signature":  "generate_common_trend_data \u003c- function(n_obs, n_series, n_lv = NULL, is_factor_model = NULL) {",
                                                                 "is_s3_method":  false,
                                                                 "arguments":  [
                                                                                   "n_obs",
                                                                                   "n_series",
                                                                                   "n_lv",
                                                                                   "is_factor_model"
                                                                               ]
                                                             },
                              "generate_forecast_required_params":  {
                                                                        "s3_class":  "",
                                                                        "s3_method":  "",
                                                                        "signature":  "generate_forecast_required_params \u003c- function(trend_spec, trend_type) {",
                                                                        "is_s3_method":  false,
                                                                        "arguments":  [
                                                                                          "trend_spec",
                                                                                          "trend_type"
                                                                                      ]
                                                                    },
                              "ensure_registry_initialized":  {
                                                                  "s3_class":  "",
                                                                  "s3_method":  "",
                                                                  "signature":  "ensure_registry_initialized \u003c- function() {",
                                                                  "is_s3_method":  false,
                                                                  "arguments":  null
                                                              },
                              "generate_ar_monitor_params":  {
                                                                 "s3_class":  "",
                                                                 "s3_method":  "",
                                                                 "signature":  "generate_ar_monitor_params \u003c- function(trend_spec) {",
                                                                 "is_s3_method":  false,
                                                                 "arguments":  "trend_spec"
                                                             },
                              "get_vcov.mvgam":  {
                                                     "s3_class":  "mvgam",
                                                     "s3_method":  "get_vcov",
                                                     "signature":  "get_vcov.mvgam \u003c- function(model, vcov = NULL, ...) {",
                                                     "is_s3_method":  true,
                                                     "arguments":  [
                                                                       "model",
                                                                       "vcov"
                                                                   ]
                                                 },
                              "get_prior.mvgam_formula":  {
                                                              "s3_class":  "mvgam_formula",
                                                              "s3_method":  "get_prior",
                                                              "signature":  "get_prior.mvgam_formula \u003c- function(object, data, family = gaussian(), ...) {",
                                                              "is_s3_method":  true,
                                                              "arguments":  [
                                                                                "object",
                                                                                "data",
                                                                                "family"
                                                                            ]
                                                          },
                              "get_best_prior_match":  {
                                                           "s3_class":  "",
                                                           "s3_method":  "",
                                                           "signature":  "get_best_prior_match \u003c- function(matches) {",
                                                           "is_s3_method":  false,
                                                           "arguments":  "matches"
                                                       },
                              "format_matrix_for_stan_array":  {
                                                                   "s3_class":  "",
                                                                   "s3_method":  "",
                                                                   "signature":  "format_matrix_for_stan_array \u003c- function(matrix) {",
                                                                   "is_s3_method":  false,
                                                                   "arguments":  "matrix"
                                                               },
                              "validate_stan_code_fragment":  {
                                                                  "s3_class":  "",
                                                                  "s3_method":  "",
                                                                  "signature":  "validate_stan_code_fragment \u003c- function(fragment, expected_content = NULL, expected_block = NULL) {",
                                                                  "is_s3_method":  false,
                                                                  "arguments":  [
                                                                                    "fragment",
                                                                                    "expected_content",
                                                                                    "expected_block"
                                                                                ]
                                                              },
                              "plot_mvgam_resids":  {
                                                        "s3_class":  "",
                                                        "s3_method":  "",
                                                        "signature":  "plot_mvgam_resids = function( object, series = 1, n_draws = 100L, n_points = 1000L ) {",
                                                        "is_s3_method":  false,
                                                        "arguments":  [
                                                                          "object",
                                                                          "series",
                                                                          "n_draws",
                                                                          "n_points"
                                                                      ]
                                                    },
                              "is_multivariate_formula":  {
                                                              "s3_class":  "",
                                                              "s3_method":  "",
                                                              "signature":  "is_multivariate_formula \u003c- function(formula) {",
                                                              "is_s3_method":  false,
                                                              "arguments":  "formula"
                                                          },
                              "is_trend_term":  {
                                                    "s3_class":  "",
                                                    "s3_method":  "",
                                                    "signature":  "is_trend_term \u003c- function(expr, trend_patterns) {",
                                                    "is_s3_method":  false,
                                                    "arguments":  [
                                                                      "expr",
                                                                      "trend_patterns"
                                                                  ]
                                                },
                              "is_equal":  {
                                               "s3_class":  "",
                                               "s3_method":  "",
                                               "signature":  "is_equal \u003c- function(x, y, check.attributes = FALSE, ...) {",
                                               "is_s3_method":  false,
                                               "arguments":  [
                                                                 "x",
                                                                 "y",
                                                                 "check.attributes"
                                                             ]
                                           },
                              "filter_rw_forecast_params":  {
                                                                "s3_class":  "",
                                                                "s3_method":  "",
                                                                "signature":  "filter_rw_forecast_params \u003c- function(monitor_params, trend_spec) {",
                                                                "is_s3_method":  false,
                                                                "arguments":  [
                                                                                  "monitor_params",
                                                                                  "trend_spec"
                                                                              ]
                                                            },
                              "get_prior.default":  {
                                                        "s3_class":  "default",
                                                        "s3_method":  "get_prior",
                                                        "signature":  "get_prior.default \u003c- function(object, ...) {",
                                                        "is_s3_method":  true,
                                                        "arguments":  "object"
                                                    },
                              "add_forecast_metadata":  {
                                                            "s3_class":  "",
                                                            "s3_method":  "",
                                                            "signature":  "add_forecast_metadata \u003c- function(trend_obj) {",
                                                            "is_s3_method":  false,
                                                            "arguments":  "trend_obj"
                                                        },
                              "mvgam_trend_choices":  {
                                                          "s3_class":  "",
                                                          "s3_method":  "",
                                                          "signature":  "mvgam_trend_choices \u003c- function() {",
                                                          "is_s3_method":  false,
                                                          "arguments":  null
                                                      },
                              "is_valid_stanvar":  {
                                                       "s3_class":  "",
                                                       "s3_method":  "",
                                                       "signature":  "is_valid_stanvar \u003c- function(stanvar) {",
                                                       "is_s3_method":  false,
                                                       "arguments":  "stanvar"
                                                   },
                              "has_embedded_families":  {
                                                            "s3_class":  "",
                                                            "s3_method":  "",
                                                            "signature":  "has_embedded_families \u003c- function(formula) {",
                                                            "is_s3_method":  false,
                                                            "arguments":  "formula"
                                                        },
                              "validate_trend_parameter_class":  {
                                                                     "s3_class":  "",
                                                                     "s3_method":  "",
                                                                     "signature":  "validate_trend_parameter_class \u003c- function(class) {",
                                                                     "is_s3_method":  false,
                                                                     "arguments":  "class"
                                                                 },
                              "pp_check.mvgam":  {
                                                     "s3_class":  "mvgam",
                                                     "s3_method":  "pp_check",
                                                     "signature":  "pp_check.mvgam \u003c- function( object, type, ndraws = NULL, prefix = c(\"ppc\", \"ppd\"), group = NULL, x = NULL, newdata = NULL, ... ) {",
                                                     "is_s3_method":  true,
                                                     "arguments":  [
                                                                       "object",
                                                                       "type",
                                                                       "ndraws",
                                                                       "prefix"
                                                                   ]
                                                 },
                              "extract_series_information":  {
                                                                 "s3_class":  "",
                                                                 "s3_method":  "",
                                                                 "signature":  "extract_series_information \u003c- function(data, mv_spec) {",
                                                                 "is_s3_method":  false,
                                                                 "arguments":  [
                                                                                   "data",
                                                                                   "mv_spec"
                                                                               ]
                                                             },
                              "modify_stancode_for_nonlinear":  {
                                                                    "s3_class":  "",
                                                                    "s3_method":  "",
                                                                    "signature":  "modify_stancode_for_nonlinear \u003c- function(stancode, nl_info, trend_specs) {",
                                                                    "is_s3_method":  false,
                                                                    "arguments":  [
                                                                                      "stancode",
                                                                                      "nl_info",
                                                                                      "trend_specs"
                                                                                  ]
                                                                },
                              "var_psi":  {
                                              "s3_class":  "",
                                              "s3_method":  "",
                                              "signature":  "var_psi \u003c- function(x, h = 10) {",
                                              "is_s3_method":  false,
                                              "arguments":  [
                                                                "x",
                                                                "h"
                                                            ]
                                          },
                              "generate_monitor_params":  {
                                                              "s3_class":  "",
                                                              "s3_method":  "",
                                                              "signature":  "generate_monitor_params \u003c- function(trend_spec) {",
                                                              "is_s3_method":  false,
                                                              "arguments":  "trend_spec"
                                                          },
                              "repair_stanfit":  {
                                                     "s3_class":  "",
                                                     "s3_method":  "",
                                                     "signature":  "repair_stanfit \u003c- function(x) {",
                                                     "is_s3_method":  false,
                                                     "arguments":  "x"
                                                 },
                              "extract_mvgam_components":  {
                                                               "s3_class":  "",
                                                               "s3_method":  "",
                                                               "signature":  "extract_mvgam_components \u003c- function(combined_fit, obs_setup, trend_setup, mv_spec) {",
                                                               "is_s3_method":  false,
                                                               "arguments":  [
                                                                                 "combined_fit",
                                                                                 "obs_setup",
                                                                                 "trend_setup",
                                                                                 "mv_spec"
                                                                             ]
                                                           },
                              "build_ar_prior_spec":  {
                                                          "s3_class":  "",
                                                          "s3_method":  "",
                                                          "signature":  "build_ar_prior_spec \u003c- function(lags, ar_prior_base = NULL, include_sigma = TRUE, include_common = TRUE) {",
                                                          "is_s3_method":  false,
                                                          "arguments":  [
                                                                            "lags",
                                                                            "ar_prior_base",
                                                                            "include_sigma",
                                                                            "include_common"
                                                                        ]
                                                      },
                              "generate_matrix_z_tdata":  {
                                                              "s3_class":  "",
                                                              "s3_method":  "",
                                                              "signature":  "generate_matrix_z_tdata \u003c- function(is_factor_model, n_lv, n_series) {",
                                                              "is_s3_method":  false,
                                                              "arguments":  [
                                                                                "is_factor_model",
                                                                                "n_lv",
                                                                                "n_series"
                                                                            ]
                                                          },
                              "check_semicolon_syntax":  {
                                                             "s3_class":  "",
                                                             "s3_method":  "",
                                                             "signature":  "check_semicolon_syntax \u003c- function(stan_code) {",
                                                             "is_s3_method":  false,
                                                             "arguments":  "stan_code"
                                                         },
                              "sum_rows":  {
                                               "s3_class":  "",
                                               "s3_method":  "",
                                               "signature":  "sum_rows = function(x) {",
                                               "is_s3_method":  false,
                                               "arguments":  "x"
                                           },
                              "ar_trend_properties":  {
                                                          "s3_class":  "",
                                                          "s3_method":  "",
                                                          "signature":  "ar_trend_properties \u003c- function() {",
                                                          "is_s3_method":  false,
                                                          "arguments":  null
                                                      },
                              "get_prior.brmsformula":  {
                                                            "s3_class":  "brmsformula",
                                                            "s3_method":  "get_prior",
                                                            "signature":  "get_prior.brmsformula \u003c- function(object, ...) {",
                                                            "is_s3_method":  true,
                                                            "arguments":  "object"
                                                        },
                              "get_validation_rule_dispatch_table":  {
                                                                         "s3_class":  "",
                                                                         "s3_method":  "",
                                                                         "signature":  "get_validation_rule_dispatch_table \u003c- function() {",
                                                                         "is_s3_method":  false,
                                                                         "arguments":  null
                                                                     },
                              "validate_trend_correlation":  {
                                                                 "s3_class":  "",
                                                                 "s3_method":  "",
                                                                 "signature":  "validate_trend_correlation \u003c- function(trend_spec, data) {",
                                                                 "is_s3_method":  false,
                                                                 "arguments":  [
                                                                                   "trend_spec",
                                                                                   "data"
                                                                               ]
                                                             },
                              "PW":  {
                                         "s3_class":  "",
                                         "s3_method":  "",
                                         "signature":  "PW = function(time = NA, series = NA, cap = NA, n_changepoints = 10, changepoint_range = 0.8, changepoint_scale = 0.05, growth = \u0027linear\u0027, n_lv = NULL) {",
                                         "is_s3_method":  false,
                                         "arguments":  [
                                                           "time",
                                                           "series",
                                                           "cap",
                                                           "n_changepoints",
                                                           "changepoint_range",
                                                           "changepoint_scale",
                                                           "growth",
                                                           "n_lv"
                                                       ]
                                     },
                              "plot_mvgam_uncertainty":  {
                                                             "s3_class":  "",
                                                             "s3_method":  "",
                                                             "signature":  "plot_mvgam_uncertainty = function( object, series = 1, newdata, data_test, legend_position = \u0027topleft\u0027, hide_xlabels = FALSE ) {",
                                                             "is_s3_method":  false,
                                                             "arguments":  [
                                                                               "object",
                                                                               "series",
                                                                               "newdata",
                                                                               "data_test",
                                                                               "legend_position",
                                                                               "hide_xlabels"
                                                                           ]
                                                         },
                              "lfo_cv":  {
                                             "s3_class":  "",
                                             "s3_method":  "",
                                             "signature":  "lfo_cv \u003c- function(object, ...) {",
                                             "is_s3_method":  false,
                                             "arguments":  "object"
                                         },
                              "find_stan_block":  {
                                                      "s3_class":  "",
                                                      "s3_method":  "",
                                                      "signature":  "find_stan_block \u003c- function(code_lines, block_name) {",
                                                      "is_s3_method":  false,
                                                      "arguments":  [
                                                                        "code_lines",
                                                                        "block_name"
                                                                    ]
                                                  },
                              "warn_default_series_variable":  {
                                                                   "s3_class":  "",
                                                                   "s3_method":  "",
                                                                   "signature":  "warn_default_series_variable \u003c- function() {",
                                                                   "is_s3_method":  false,
                                                                   "arguments":  null
                                                               },
                              "validate_autocor_separation":  {
                                                                  "s3_class":  "",
                                                                  "s3_method":  "",
                                                                  "signature":  "validate_autocor_separation \u003c- function(obs_formula, trend_formula = NULL) {",
                                                                  "is_s3_method":  false,
                                                                  "arguments":  [
                                                                                    "obs_formula",
                                                                                    "trend_formula"
                                                                                ]
                                                              },
                              "add_monitor_params":  {
                                                         "s3_class":  "",
                                                         "s3_method":  "",
                                                         "signature":  "add_monitor_params \u003c- function(trend_obj) {",
                                                         "is_s3_method":  false,
                                                         "arguments":  "trend_obj"
                                                     },
                              "determine_trend_injection_point":  {
                                                                      "s3_class":  "",
                                                                      "s3_method":  "",
                                                                      "signature":  "determine_trend_injection_point \u003c- function(nl_components, trend_specs) {",
                                                                      "is_s3_method":  false,
                                                                      "arguments":  [
                                                                                        "nl_components",
                                                                                        "trend_specs"
                                                                                    ]
                                                                  },
                              "CAR":  {
                                          "s3_class":  "",
                                          "s3_method":  "",
                                          "signature":  "CAR = function(time = NA, series = NA) {",
                                          "is_s3_method":  false,
                                          "arguments":  [
                                                            "time",
                                                            "series"
                                                        ]
                                      },
                              "pairs.mvgam":  {
                                                  "s3_class":  "mvgam",
                                                  "s3_method":  "pairs",
                                                  "signature":  "pairs.mvgam \u003c- function( x, variable = NULL, regex = FALSE, use_alias = TRUE, ... ) {",
                                                  "is_s3_method":  true,
                                                  "arguments":  [
                                                                    "x",
                                                                    "variable",
                                                                    "regex",
                                                                    "use_alias"
                                                                ]
                                              },
                              "validate_regular_time_intervals":  {
                                                                      "s3_class":  "",
                                                                      "s3_method":  "",
                                                                      "signature":  "validate_regular_time_intervals \u003c- function(time_values, time_var = \"time\") {",
                                                                      "is_s3_method":  false,
                                                                      "arguments":  [
                                                                                        "time_values",
                                                                                        "time_var"
                                                                                    ]
                                                                  },
                              "validate_trend_grouping":  {
                                                              "s3_class":  "",
                                                              "s3_method":  "",
                                                              "signature":  "validate_trend_grouping \u003c- function(trend_spec, data) {",
                                                              "is_s3_method":  false,
                                                              "arguments":  [
                                                                                "trend_spec",
                                                                                "data"
                                                                            ]
                                                          },
                              "is.trend_param":  {
                                                     "s3_class":  "trend_param",
                                                     "s3_method":  "is",
                                                     "signature":  "is.trend_param \u003c- function(x) {",
                                                     "is_s3_method":  true,
                                                     "arguments":  "x"
                                                 },
                              "generate_trend_specific_stanvars":  {
                                                                       "s3_class":  "",
                                                                       "s3_method":  "",
                                                                       "signature":  "generate_trend_specific_stanvars \u003c- function(trend_specs, data_info, response_suffix = \"\", prior = NULL) {",
                                                                       "is_s3_method":  false,
                                                                       "arguments":  [
                                                                                         "trend_specs",
                                                                                         "data_info",
                                                                                         "response_suffix",
                                                                                         "prior"
                                                                                     ]
                                                                   },
                              "print.mvgam_trend":  {
                                                        "s3_class":  "mvgam_trend",
                                                        "s3_method":  "print",
                                                        "signature":  "print.mvgam_trend \u003c- function(x, ...) {",
                                                        "is_s3_method":  true,
                                                        "arguments":  "x"
                                                    },
                              "create_mvgam_trend":  {
                                                         "s3_class":  "",
                                                         "s3_method":  "",
                                                         "signature":  "create_mvgam_trend \u003c- function(trend_type, ..., .time = NULL, .series = NULL, .gr = NULL, .subgr = NULL, .cap = NULL, .validation_rules = NULL) {",
                                                         "is_s3_method":  false,
                                                         "arguments":  "trend_type"
                                                     },
                              "as_draws_matrix.mvgam":  {
                                                            "s3_class":  "mvgam",
                                                            "s3_method":  "as_draws_matrix",
                                                            "signature":  "as_draws_matrix.mvgam \u003c- function( x, variable = NULL, regex = FALSE, inc_warmup = FALSE, use_alias = TRUE, ... ) {",
                                                            "is_s3_method":  true,
                                                            "arguments":  [
                                                                              "x",
                                                                              "variable",
                                                                              "regex",
                                                                              "inc_warmup",
                                                                              "use_alias"
                                                                          ]
                                                        },
                              "create_empty_brmsprior":  {
                                                             "s3_class":  "",
                                                             "s3_method":  "",
                                                             "signature":  "create_empty_brmsprior \u003c- function() {",
                                                             "is_s3_method":  false,
                                                             "arguments":  null
                                                         },
                              "parse_base_formula_safe":  {
                                                              "s3_class":  "",
                                                              "s3_method":  "",
                                                              "signature":  "parse_base_formula_safe \u003c- function(trend_formula, trend_terms) {",
                                                              "is_s3_method":  false,
                                                              "arguments":  [
                                                                                "trend_formula",
                                                                                "trend_terms"
                                                                            ]
                                                          },
                              "validate_time_series_for_trends":  {
                                                                      "s3_class":  "",
                                                                      "s3_method":  "",
                                                                      "signature":  "validate_time_series_for_trends \u003c- function(data, trend_specs, silent = 1, response_vars = NULL) {",
                                                                      "is_s3_method":  false,
                                                                      "arguments":  [
                                                                                        "data",
                                                                                        "trend_specs",
                                                                                        "silent",
                                                                                        "response_vars"
                                                                                    ]
                                                                  },
                              "validate_factor_compatibility":  {
                                                                    "s3_class":  "",
                                                                    "s3_method":  "",
                                                                    "signature":  "validate_factor_compatibility \u003c- function(trend_spec) {",
                                                                    "is_s3_method":  false,
                                                                    "arguments":  "trend_spec"
                                                                },
                              "get_ar_parameter_prior":  {
                                                             "s3_class":  "",
                                                             "s3_method":  "",
                                                             "signature":  "get_ar_parameter_prior \u003c- function(param_name, trend_obj) {",
                                                             "is_s3_method":  false,
                                                             "arguments":  [
                                                                               "param_name",
                                                                               "trend_obj"
                                                                           ]
                                                         },
                              "plot_mvgam_pterms":  {
                                                        "s3_class":  "",
                                                        "s3_method":  "",
                                                        "signature":  "plot_mvgam_pterms = function(object, trend_effects = FALSE) {",
                                                        "is_s3_method":  false,
                                                        "arguments":  [
                                                                          "object",
                                                                          "trend_effects"
                                                                      ]
                                                    },
                              "parse_multivariate_trends":  {
                                                                "s3_class":  "",
                                                                "s3_method":  "",
                                                                "signature":  "parse_multivariate_trends \u003c- function(formula, trend_formula = NULL) {",
                                                                "is_s3_method":  false,
                                                                "arguments":  [
                                                                                  "formula",
                                                                                  "trend_formula"
                                                                              ]
                                                            },
                              "validate_stan_code_structure":  {
                                                                   "s3_class":  "",
                                                                   "s3_method":  "",
                                                                   "signature":  "validate_stan_code_structure \u003c- function(stan_code) {",
                                                                   "is_s3_method":  false,
                                                                   "arguments":  "stan_code"
                                                               },
                              "extract_stan_block":  {
                                                         "s3_class":  "",
                                                         "s3_method":  "",
                                                         "signature":  "extract_stan_block \u003c- function(stancode, block_name) {",
                                                         "is_s3_method":  false,
                                                         "arguments":  [
                                                                           "stancode",
                                                                           "block_name"
                                                                       ]
                                                     },
                              "summary.mvgam_fevd":  {
                                                         "s3_class":  "mvgam_fevd",
                                                         "s3_method":  "summary",
                                                         "signature":  "summary.mvgam_fevd = function(object, probs = c(0.025, 0.975), ...) {",
                                                         "is_s3_method":  true,
                                                         "arguments":  [
                                                                           "object",
                                                                           "probs"
                                                                       ]
                                                     },
                              "ZMVN":  {
                                           "s3_class":  "",
                                           "s3_method":  "",
                                           "signature":  "ZMVN = function(time = NA, series = NA, gr = NA, subgr = NA, n_lv = NULL) {",
                                           "is_s3_method":  false,
                                           "arguments":  [
                                                             "time",
                                                             "series",
                                                             "gr",
                                                             "subgr",
                                                             "n_lv"
                                                         ]
                                       },
                              "extract_nonlinear_components":  {
                                                                   "s3_class":  "",
                                                                   "s3_method":  "",
                                                                   "signature":  "extract_nonlinear_components \u003c- function(formula) {",
                                                                   "is_s3_method":  false,
                                                                   "arguments":  "formula"
                                                               },
                              "filter_renameable_identifiers":  {
                                                                    "s3_class":  "",
                                                                    "s3_method":  "",
                                                                    "signature":  "filter_renameable_identifiers \u003c- function(identifiers) {",
                                                                    "is_s3_method":  false,
                                                                    "arguments":  "identifiers"
                                                                },
                              "extract_prior_string":  {
                                                           "s3_class":  "",
                                                           "s3_method":  "",
                                                           "signature":  "extract_prior_string \u003c- function(prior_frame, class_name, coef_name = NULL, handle_suffix = TRUE) {",
                                                           "is_s3_method":  false,
                                                           "arguments":  [
                                                                             "prior_frame",
                                                                             "class_name",
                                                                             "coef_name",
                                                                             "handle_suffix"
                                                                         ]
                                                       },
                              "log_sum_exp":  {
                                                  "s3_class":  "",
                                                  "s3_method":  "",
                                                  "signature":  "log_sum_exp \u003c- function(x) {",
                                                  "is_s3_method":  false,
                                                  "arguments":  "x"
                                              },
                              "dispatch_validation_rule":  {
                                                               "s3_class":  "",
                                                               "s3_method":  "",
                                                               "signature":  "dispatch_validation_rule \u003c- function(rule, trend_spec, data) {",
                                                               "is_s3_method":  false,
                                                               "arguments":  [
                                                                                 "rule",
                                                                                 "trend_spec",
                                                                                 "data"
                                                                             ]
                                                           },
                              "generate_hierarchical_correlation_parameters":  {
                                                                                   "s3_class":  "",
                                                                                   "s3_method":  "",
                                                                                   "signature":  "generate_hierarchical_correlation_parameters \u003c- function(n_groups, n_subgroups) {",
                                                                                   "is_s3_method":  false,
                                                                                   "arguments":  [
                                                                                                     "n_groups",
                                                                                                     "n_subgroups"
                                                                                                 ]
                                                                               },
                              "extract_and_rename_standata_objects":  {
                                                                          "s3_class":  "",
                                                                          "s3_method":  "",
                                                                          "signature":  "extract_and_rename_standata_objects \u003c- function(standata, suffix, mapping, is_multivariate, response_names) {",
                                                                          "is_s3_method":  false,
                                                                          "arguments":  [
                                                                                            "standata",
                                                                                            "suffix",
                                                                                            "mapping",
                                                                                            "is_multivariate",
                                                                                            "response_names"
                                                                                        ]
                                                                      },
                              "is_try_error":  {
                                                   "s3_class":  "",
                                                   "s3_method":  "",
                                                   "signature":  "is_try_error \u003c- function(x) {",
                                                   "is_s3_method":  false,
                                                   "arguments":  "x"
                                               },
                              "generate_zmvn_trend_stanvars":  {
                                                                   "s3_class":  "",
                                                                   "s3_method":  "",
                                                                   "signature":  "generate_zmvn_trend_stanvars \u003c- function(trend_specs, data_info, prior = NULL) {",
                                                                   "is_s3_method":  false,
                                                                   "arguments":  [
                                                                                     "trend_specs",
                                                                                     "data_info",
                                                                                     "prior"
                                                                                 ]
                                                               },
                              "split_hier_Sigma":  {
                                                       "s3_class":  "",
                                                       "s3_method":  "",
                                                       "signature":  "split_hier_Sigma \u003c- function(object, params) {",
                                                       "is_s3_method":  false,
                                                       "arguments":  [
                                                                         "object",
                                                                         "params"
                                                                     ]
                                                   },
                              "AR":  {
                                         "s3_class":  "",
                                         "s3_method":  "",
                                         "signature":  "AR = function(time = NA, series = NA, p = 1, ma = FALSE, cor = FALSE, gr = NA, subgr = NA, n_lv = NULL) {",
                                         "is_s3_method":  false,
                                         "arguments":  [
                                                           "time",
                                                           "series",
                                                           "p",
                                                           "ma",
                                                           "cor",
                                                           "gr",
                                                           "subgr",
                                                           "n_lv"
                                                       ]
                                     },
                              "extract_stan_block_content":  {
                                                                 "s3_class":  "",
                                                                 "s3_method":  "",
                                                                 "signature":  "extract_stan_block_content \u003c- function(stancode, block_name) {",
                                                                 "is_s3_method":  false,
                                                                 "arguments":  [
                                                                                   "stancode",
                                                                                   "block_name"
                                                                               ]
                                                             },
                              "validate_trend_parameter_bounds":  {
                                                                      "s3_class":  "",
                                                                      "s3_method":  "",
                                                                      "signature":  "validate_trend_parameter_bounds \u003c- function(class, lb, ub) {",
                                                                      "is_s3_method":  false,
                                                                      "arguments":  [
                                                                                        "class",
                                                                                        "lb",
                                                                                        "ub"
                                                                                    ]
                                                                  },
                              "as.data.frame.mvgam":  {
                                                          "s3_class":  "data.frame.mvgam",
                                                          "s3_method":  "as",
                                                          "signature":  "as.data.frame.mvgam = function( x, row.names = NULL, optional = TRUE, variable = \u0027betas\u0027, use_alias = TRUE, regex = FALSE, ... ) {",
                                                          "is_s3_method":  true,
                                                          "arguments":  [
                                                                            "x",
                                                                            "row.names",
                                                                            "optional",
                                                                            "variable",
                                                                            "use_alias",
                                                                            "regex"
                                                                        ]
                                                      },
                              "rw_trend_properties":  {
                                                          "s3_class":  "",
                                                          "s3_method":  "",
                                                          "signature":  "rw_trend_properties \u003c- function() {",
                                                          "is_s3_method":  false,
                                                          "arguments":  null
                                                      },
                              "extract_response_names":  {
                                                             "s3_class":  "",
                                                             "s3_method":  "",
                                                             "signature":  "extract_response_names \u003c- function(formula) {",
                                                             "is_s3_method":  false,
                                                             "arguments":  "formula"
                                                         },
                              "cv_split":  {
                                               "s3_class":  "",
                                               "s3_method":  "",
                                               "signature":  "cv_split = function(data, last_train, fc_horizon = 1) {",
                                               "is_s3_method":  false,
                                               "arguments":  [
                                                                 "data",
                                                                 "last_train",
                                                                 "fc_horizon"
                                                             ]
                                           },
                              "validate_trend_factor_compatibility":  {
                                                                          "s3_class":  "",
                                                                          "s3_method":  "",
                                                                          "signature":  "validate_trend_factor_compatibility \u003c- function(trend_spec, data) {",
                                                                          "is_s3_method":  false,
                                                                          "arguments":  [
                                                                                            "trend_spec",
                                                                                            "data"
                                                                                        ]
                                                                      },
                              "get_trend_info":  {
                                                     "s3_class":  "",
                                                     "s3_method":  "",
                                                     "signature":  "get_trend_info \u003c- function(name) {",
                                                     "is_s3_method":  false,
                                                     "arguments":  "name"
                                                 },
                              "get_factor_compatible_trends":  {
                                                                   "s3_class":  "",
                                                                   "s3_method":  "",
                                                                   "signature":  "get_factor_compatible_trends \u003c- function() {",
                                                                   "is_s3_method":  false,
                                                                   "arguments":  null
                                                               },
                              "parse_nonlinear_manually":  {
                                                               "s3_class":  "",
                                                               "s3_method":  "",
                                                               "signature":  "parse_nonlinear_manually \u003c- function(formula) {",
                                                               "is_s3_method":  false,
                                                               "arguments":  "formula"
                                                           },
                              "print.trend_param":  {
                                                        "s3_class":  "trend_param",
                                                        "s3_method":  "print",
                                                        "signature":  "print.trend_param \u003c- function(x, ...) {",
                                                        "is_s3_method":  true,
                                                        "arguments":  "x"
                                                    },
                              "mvgam_trend_pattern":  {
                                                          "s3_class":  "",
                                                          "s3_method":  "",
                                                          "signature":  "mvgam_trend_pattern \u003c- function() {",
                                                          "is_s3_method":  false,
                                                          "arguments":  null
                                                      },
                              "extract_hierarchical_info":  {
                                                                "s3_class":  "",
                                                                "s3_method":  "",
                                                                "signature":  "extract_hierarchical_info \u003c- function(data_info, trend_specs) {",
                                                                "is_s3_method":  false,
                                                                "arguments":  [
                                                                                  "data_info",
                                                                                  "trend_specs"
                                                                              ]
                                                            },
                              "car_trend_properties":  {
                                                           "s3_class":  "",
                                                           "s3_method":  "",
                                                           "signature":  "car_trend_properties \u003c- function() {",
                                                           "is_s3_method":  false,
                                                           "arguments":  null
                                                       },
                              "generate_base_brms_stancode":  {
                                                                  "s3_class":  "",
                                                                  "s3_method":  "",
                                                                  "signature":  "generate_base_brms_stancode \u003c- function(formula, data, family = gaussian(), stanvars = NULL, backend = \"rstan\") {",
                                                                  "is_s3_method":  false,
                                                                  "arguments":  [
                                                                                    "formula",
                                                                                    "data",
                                                                                    "family"
                                                                                ]
                                                              }
                          },
    "definitions":  {
                        "R/cpp_funs.R":  [

                                         ],
                        "R/tidier_methods.R":  [
                                                   "tidy.mvgam",
                                                   "split_hier_Sigma",
                                                   "augment.mvgam"
                                               ],
                        "R/stability.R":  [
                                              "stability",
                                              "stability.mvgam"
                                          ],
                        "R/mvgam_forecast-class.R":  [
                                                         "summary.mvgam_forecast"
                                                     ],
                        "R/mvgam-class.R":  [

                                            ],
                        "R/plot_mvgam_factors.R":  [
                                                       "plot_mvgam_factors"
                                                   ],
                        "R/validations.R":  [
                                                "validate_nonlinear_trend_compatibility",
                                                "apply_validation_rules",
                                                "process_trend_validation_rules",
                                                "dispatch_validation_rule",
                                                "get_validation_rule_dispatch_table",
                                                "validate_trend_grouping",
                                                "validate_trend_correlation",
                                                "validate_trend_time_intervals",
                                                "validate_trend_factor_compatibility",
                                                "validate_trend_hierarchical_structure",
                                                "validate_factor_compatibility",
                                                "validate_grouping_arguments",
                                                "validate_correlation_requirements",
                                                "validate_time_variable",
                                                "validate_series_variable",
                                                "validate_regular_time_intervals",
                                                "deparse0",
                                                "handle_nse_param",
                                                "is_nonlinear_formula",
                                                "validate_brms_formula",
                                                "formula2str_mvgam",
                                                "get_trend_validation_patterns",
                                                "validate_obs_formula_brms",
                                                "validate_trend_formula_brms",
                                                "validate_bf_trend_formula",
                                                "extract_all_bf_formulas",
                                                "validate_list_trend_formula",
                                                "validate_single_trend_formula",
                                                "check_brms_autocor_usage",
                                                "validate_no_brms_autocor_in_trends",
                                                "validate_no_addition_terms_in_trends",
                                                "validate_no_multiple_trend_constructors",
                                                "validate_no_offsets_in_trends",
                                                "validate_offsets_in_obs",
                                                "validate_multivariate_trend_constraints",
                                                "validate_autocor_separation",
                                                "validate_setup_components",
                                                "validate_time_series_for_trends",
                                                "is.mvgam_trend",
                                                "validate_trend_components",
                                                "extract_time_series_dimensions",
                                                "generate_obs_trend_mapping",
                                                "warn_default_time_variable",
                                                "warn_default_series_variable",
                                                "validate_mvgam_trend",
                                                "validate_proportional",
                                                "validate_pos_integer",
                                                "validate_pos_real",
                                                "eval_silent",
                                                "is_try_error",
                                                "is_multivariate_trend_specs",
                                                "validate_factor_levels",
                                                "validate_stan_code_structure",
                                                "are_braces_balanced",
                                                "validate_stan_code_fragment",
                                                "validate_combined_stancode",
                                                "validate_data_code_compatibility",
                                                "check_semicolon_syntax",
                                                "check_block_semicolons",
                                                "validate_stan_code",
                                                "validate_stan_data_structure",
                                                "is_valid_stanvar",
                                                "validate_trend_specs",
                                                "validate_multivariate_series_time",
                                                "validate_univariate_series_time",
                                                "validate_and_process_trend_parameters",
                                                "process_lag_parameters",
                                                "process_capacity_parameter",
                                                "validate_no_factor_hierarchical",
                                                "parse_base_formula_safe",
                                                "remove_trend_expressions",
                                                "is_trend_term",
                                                "validate_trend_parameter_class",
                                                "validate_trend_parameter_bounds",
                                                "validate_series_time",
                                                "all_times_avail",
                                                "as_one_logical",
                                                "validate_grouping_structure"
                                            ],
                        "R/plot.mvgam.R":  [
                                               "plot.mvgam",
                                               "plottable"
                                           ],
                        "R/loo.mvgam.R":  [
                                              "loo.mvgam",
                                              "loo_compare.mvgam",
                                              "split_mod_dots",
                                              "named_list",
                                              "clean_ll",
                                              "samp_noinf"
                                          ],
                        "R/lfo_cv.mvgam.R":  [
                                                 "lfo_cv",
                                                 "log_sum_exp",
                                                 "log_mean_exp",
                                                 "lfo_cv.mvgam",
                                                 "plot.mvgam_lfo",
                                                 "cv_split",
                                                 "sum_rows"
                                             ],
                        "R/zzz.R":  [
                                        "core_unloaded",
                                        "mvgam_attach"
                                    ],
                        "R/stan_assembly.R":  [
                                                  "apply_response_suffix_to_stanvars",
                                                  "apply_suffix_to_name",
                                                  "apply_suffix_to_stan_code",
                                                  "generate_combined_stancode",
                                                  "detect_shared_trends",
                                                  "generate_base_stancode_with_stanvars",
                                                  "prepare_mvgam_stancode",
                                                  "prepare_stan_data",
                                                  "extract_code_block",
                                                  "find_matching_brace",
                                                  "prepare_stanvars_for_brms",
                                                  "extract_trend_stanvars_from_setup",
                                                  "detect_glm_usage",
                                                  "parse_glm_parameters",
                                                  "transform_glm_call",
                                                  "inject_trend_into_glm_predictor",
                                                  "extract_mapping_arrays",
                                                  "validate_mapping_arrays",
                                                  "find_stan_block",
                                                  "insert_into_stan_block",
                                                  "inject_trend_into_linear_predictor",
                                                  "insert_after_mu_lines_in_model_block",
                                                  "generate_trend_injection_code",
                                                  "inject_multivariate_trends_into_linear_predictors",
                                                  "assemble_mvgam_stan_code",
                                                  "assemble_mvgam_stan_data",
                                                  "generate_base_brms_stancode",
                                                  "generate_base_brms_standata",
                                                  "append_if_not_null",
                                                  "combine_stanvars",
                                                  "generate_shared_innovation_stanvars",
                                                  "generate_innovation_model",
                                                  "extract_hierarchical_info",
                                                  "generate_common_trend_data",
                                                  "sort_stanvars",
                                                  "get_priority",
                                                  "generate_matrix_z_parameters",
                                                  "generate_matrix_z_tdata",
                                                  "generate_matrix_z_multiblock_stanvars",
                                                  "generate_factor_model",
                                                  "generate_trend_computation_tparameters",
                                                  "generate_hierarchical_functions",
                                                  "generate_hierarchical_correlation_parameters",
                                                  "generate_hierarchical_correlation_model",
                                                  "generate_trend_specific_stanvars",
                                                  "generate_rw_trend_stanvars",
                                                  "generate_trend_priors_stanvar",
                                                  "generate_ar_trend_stanvars",
                                                  "generate_var_trend_stanvars",
                                                  "calculate_car_time_distances",
                                                  "generate_car_trend_stanvars",
                                                  "generate_zmvn_trend_stanvars",
                                                  "generate_pw_trend_stanvars",
                                                  "parse_model_rstan",
                                                  "parse_model_cmdstanr",
                                                  "parse_data_declarations",
                                                  "extract_and_rename_trend_parameters",
                                                  "is_multivariate_brmsfit",
                                                  "extract_response_names_from_brmsfit",
                                                  "extract_and_rename_stan_blocks",
                                                  "filter_block_content",
                                                  "extract_non_likelihood_from_model_block",
                                                  "extract_stan_block",
                                                  "extract_stan_block_content",
                                                  "rename_parameters_in_block",
                                                  "get_stan_reserved_words",
                                                  "extract_stan_identifiers",
                                                  "filter_renameable_identifiers",
                                                  "apply_safe_parameter_replacement",
                                                  "rename_univariate_parameters",
                                                  "rename_multivariate_parameters",
                                                  "extract_and_rename_standata_objects",
                                                  "extract_univariate_standata",
                                                  "extract_multivariate_standata",
                                                  "generate_times_trend_matrices",
                                                  "create_times_trend_matrix",
                                                  "generate_stan_array_declaration",
                                                  "format_matrix_for_stan_array"
                                              ],
                        "R/plot_mvgam_randomeffects.R":  [
                                                             "plot_mvgam_randomeffects"
                                                         ],
                        "R/fevd.mvgam.R":  [
                                               "fevd",
                                               "fevd.mvgam",
                                               "gen_fevd",
                                               "var_fecov"
                                           ],
                        "R/mvgam_fevd-class.R":  [
                                                     "summary.mvgam_fevd",
                                                     "plot.mvgam_fevd",
                                                     "fevd_df"
                                                 ],
                        "R/ppc.mvgam.R":  [
                                              "ppc",
                                              "ppc.mvgam",
                                              "ecdf_plotdat",
                                              "pp_check.mvgam",
                                              "is_like_factor"
                                          ],
                        "R/plot_mvgam_fc.R":  [
                                                  "plot_mvgam_fc",
                                                  "plot.mvgam_forecast"
                                              ],
                        "R/plot_mvgam_trend.R":  [
                                                     "plot_mvgam_trend"
                                                 ],
                        "R/as.data.frame.mvgam.R":  [
                                                        "as_draws.mvgam",
                                                        "as_draws_matrix.mvgam",
                                                        "as_draws_df.mvgam",
                                                        "as_draws_array.mvgam",
                                                        "as_draws_list.mvgam",
                                                        "as_draws_rvars.mvgam",
                                                        "as.data.frame.mvgam",
                                                        "as.matrix.mvgam",
                                                        "as.array.mvgam",
                                                        "validate_variables"
                                                    ],
                        "R/pairs.mvgam.R":  [
                                                "pairs.mvgam"
                                            ],
                        "R/plot_mvgam_series.R":  [
                                                      "plot_mvgam_series",
                                                      "validate_plot_data",
                                                      "plot_time_series",
                                                      "plot_histogram",
                                                      "plot_acf",
                                                      "plot_ecdf"
                                                  ],
                        "R/brms_integration.R":  [
                                                     "setup_brms_lightweight",
                                                     "extract_prior_from_setup",
                                                     "extract_brmsterms_from_setup",
                                                     "parse_multivariate_trends",
                                                     "is_multivariate_formula",
                                                     "has_mvbind_response",
                                                     "extract_response_names",
                                                     "extract_mvbind_responses",
                                                     "extract_variable_name",
                                                     "extract_response_trends",
                                                     "create_trend_base_formula",
                                                     "handle_nonlinear_model",
                                                     "extract_nonlinear_components",
                                                     "parse_nonlinear_manually",
                                                     "determine_trend_injection_point",
                                                     "extract_response_from_formula",
                                                     "modify_stancode_for_nonlinear",
                                                     "integrate_nonlinear_with_assembly"
                                                 ],
                        "R/priors.R":  [
                                           "has_trend_priors",
                                           "extract_trend_priors_only",
                                           "extract_trend_priors_from_enhanced",
                                           "extract_observation_priors_from_enhanced",
                                           "extract_observation_priors_only",
                                           "add_trend_component_attr",
                                           "extract_observation_priors",
                                           "extract_trend_priors",
                                           "generate_trend_priors",
                                           "generate_trend_priors_from_monitor_params",
                                           "create_trend_parameter_prior",
                                           "get_default_trend_parameter_prior",
                                           "get_parameter_type_default_prior",
                                           "create_empty_brmsprior",
                                           "get_ar_parameter_prior",
                                           "get_car_parameter_prior",
                                           "combine_obs_trend_priors",
                                           "get_trend_prior_spec",
                                           "build_ar_prior_spec",
                                           "map_prior_to_stan_string",
                                           "extract_prior_string",
                                           "get_best_prior_match",
                                           "map_trend_priors",
                                           "get_trend_parameter_prior",
                                           "mvgam_formula",
                                           "print.mvgam_formula",
                                           "get_prior",
                                           "get_prior.default",
                                           "get_prior.formula",
                                           "get_prior.brmsformula",
                                           "has_embedded_families",
                                           "get_prior.mvgam_formula",
                                           "standardize_brmsprior_columns"
                                       ],
                        "R/RcppExports.R":  [
                                                "ar3_recursC",
                                                "var1_recursC",
                                                "varma_recursC"
                                            ],
                        "R/mvgam_irf-class.R":  [
                                                    "summary.mvgam_irf",
                                                    "plot.mvgam_irf"
                                                ],
                        "R/plot_mvgam_smooth.R":  [
                                                      "plot_mvgam_smooth"
                                                  ],
                        "R/plot_mvgam_uncertainty.R":  [
                                                           "plot_mvgam_uncertainty",
                                                           "intersect_hist"
                                                       ],
                        "R/irf.mvgam.R":  [
                                              "irf",
                                              "irf.mvgam",
                                              "gen_irf",
                                              "var_phi",
                                              "var_psi"
                                          ],
                        "R/marginaleffects.mvgam.R":  [
                                                          "get_coef.mvgam",
                                                          "set_coef.mvgam",
                                                          "get_vcov.mvgam",
                                                          "get_predict.mvgam",
                                                          "get_data.mvgam",
                                                          "error",
                                                          "get_data.mvgam_prefit",
                                                          "error",
                                                          "find_predictors.mvgam",
                                                          "find_predictors.mvgam_prefit"
                                                      ],
                        "R/plot_mvgam_resids.R":  [
                                                      "plot_mvgam_resids"
                                                  ],
                        "R/mvgam-package.R":  [

                                              ],
                        "R/conditional_effects.R":  [
                                                        "decimalplaces",
                                                        "print.mvgam_conditional_effects",
                                                        "conditional_effects.mvgam",
                                                        "plot.mvgam_conditional_effects",
                                                        "roundlabs",
                                                        "split_termlabs"
                                                    ],
                        "R/lv_correlations.R":  [
                                                    "lv_correlations"
                                                ],
                        "R/series_to_mvgam.R":  [
                                                    "series_to_mvgam",
                                                    "xts.to.ts"
                                                ],
                        "R/mvgam_core.R":  [
                                               "mvgam",
                                               "mvgam_single_dataset",
                                               "generate_combined_stancode_and_data",
                                               "fit_mvgam_model",
                                               "create_mvgam_from_combined_fit",
                                               "create_observation_brmsfit",
                                               "create_trend_brmsfit",
                                               "extract_observation_parameters",
                                               "extract_trend_parameters",
                                               "subset_stanfit_parameters",
                                               "extract_mvgam_components",
                                               "extract_time_information",
                                               "extract_series_information",
                                               "extract_trend_component_info",
                                               "mvgam_multiple",
                                               "validate_multiple_imputation_datasets",
                                               "validate_missing_patterns",
                                               "fit_multiple_imputation_models",
                                               "mvgam_single_imputation",
                                               "pool_mvgam_fits",
                                               "extract_fit_estimates",
                                               "apply_rubins_rules",
                                               "pool_parameter_estimates",
                                               "create_pooled_mvgam",
                                               "extract_pooling_diagnostics"
                                           ],
                        "R/mcmc_plot.mvgam.R":  [
                                                    "mcmc_plot.mvgam"
                                                ],
                        "R/residuals.mvgam.R":  [
                                                    "residuals.mvgam"
                                                ],
                        "R/ensemble.R":  [
                                             "ensemble",
                                             "ensemble.mvgam_forecast",
                                             "allsame",
                                             "split_fc_dots"
                                         ],
                        "R/globals.R":  [

                                        ],
                        "R/all_neon_tick_data.R":  [

                                                   ],
                        "R/index-mvgam.R":  [
                                                "variables.mvgam"
                                            ],
                        "R/utils-pipe.R":  [

                                           ],
                        "R/interpret_mvgam.R":  [
                                                    "interpret_mvgam",
                                                    "dyn_to_gpspline",
                                                    "dyn_to_gphilbert"
                                                ],
                        "R/make_stan.R":  [
                                              "generate_stan_components_mvgam_formula",
                                              "stancode.mvgam_formula",
                                              "standata.mvgam_formula"
                                          ],
                        "R/how_to_cite.R":  [
                                                "how_to_cite",
                                                "print.how_to_cite",
                                                "how_to_cite.mvgam"
                                            ],
                        "R/dynamic.R":  [
                                            "dynamic"
                                        ],
                        "R/print.mvgam.R":  [
                                                "print_model_specification_simple",
                                                "stancode.mvgam",
                                                "stancode.mvgam_prefit",
                                                "print.mvgamstancode",
                                                "print.mvgam",
                                                "print.mvgam_prefit"
                                            ],
                        "R/trend_system.R":  [
                                                 "register_trend_type",
                                                 "get_trend_info",
                                                 "list_trend_types",
                                                 "get_factor_compatible_trends",
                                                 "get_default_incompatibility_reason",
                                                 "auto_register_trend_types",
                                                 "register_core_trends",
                                                 "validate_trend_properties",
                                                 "ar_trend_properties",
                                                 "rw_trend_properties",
                                                 "var_trend_properties",
                                                 "zmvn_trend_properties",
                                                 "car_trend_properties",
                                                 "pw_trend_properties",
                                                 "register_custom_trend",
                                                 "is_registry_initialized",
                                                 "ensure_registry_initialized",
                                                 "trend_param",
                                                 "c.trend_param",
                                                 "is.trend_param",
                                                 "print.trend_param",
                                                 "evaluate_param_conditions",
                                                 "generate_monitor_params",
                                                 "generate_rw_monitor_params",
                                                 "generate_ar_monitor_params",
                                                 "generate_var_monitor_params",
                                                 "generate_car_monitor_params",
                                                 "generate_zmvn_monitor_params",
                                                 "generate_pw_monitor_params",
                                                 "normalize_trend_type",
                                                 "add_monitor_params",
                                                 "generate_forecast_metadata",
                                                 "generate_forecast_required_params",
                                                 "filter_rw_forecast_params",
                                                 "filter_ar_forecast_params",
                                                 "filter_var_forecast_params",
                                                 "filter_car_forecast_params",
                                                 "filter_zmvn_forecast_params",
                                                 "filter_pw_forecast_params",
                                                 "add_forecast_metadata",
                                                 "generate_summary_labels",
                                                 "generate_parameter_label",
                                                 "add_summary_labels",
                                                 "add_complete_metadata",
                                                 "process_trend_params",
                                                 "mvgam_trend_registry",
                                                 "mvgam_trend_choices",
                                                 "mvgam_trend_pattern",
                                                 "build_trend_label",
                                                 "custom_trend",
                                                 "find_trend_terms",
                                                 "extract_regular_terms",
                                                 "parse_trend_formula",
                                                 "eval_trend_constructor",
                                                 "print.mvgam_trend",
                                                 "get_mvgam_trend_defaults",
                                                 "apply_mvgam_trend_defaults",
                                                 "get_default_validation_rules",
                                                 "create_mvgam_trend",
                                                 "process_arg",
                                                 "validate_trend_dispatch_consistency",
                                                 "get_trend_dispatch_function",
                                                 "add_consistent_dispatch_metadata",
                                                 "RW",
                                                 "AR",
                                                 "CAR",
                                                 "VAR",
                                                 "GP",
                                                 "PW",
                                                 "ZMVN"
                                             ],
                        "R/residual_cor.R":  [
                                                 "residual_cor",
                                                 "residual_cor.mvgam",
                                                 "residual_cor.jsdgam"
                                             ],
                        "R/plot_mvgam_pterms.R":  [
                                                      "plot_mvgam_pterms"
                                                  ],
                        "R/add_residuals.R":  [
                                                  "add_residuals",
                                                  "add_residuals.mvgam"
                                              ],
                        "R/ordinate.jsdgam.R":  [
                                                    "ordinate",
                                                    "ordinate.jsdgam"
                                                ],
                        "R/portal_data.R":  [

                                            ],
                        "R/sim_mvgam.R":  [
                                              "periodic_gp",
                                              "lkj_corr",
                                              "sim_mvgam",
                                              "sim_seasonal",
                                              "random_Sigma"
                                          ],
                        "R/monotonic.R":  [
                                              "smooth.construct.moi.smooth.spec",
                                              "smooth.construct.mod.smooth.spec",
                                              "Predict.matrix.moi.smooth",
                                              "Predict.matrix.mod.smooth",
                                              "add_mono_model_file"
                                          ],
                        "R/backends.R":  [
                                             "repair_names",
                                             "repair_stanfit",
                                             "repair_variable_names",
                                             "is_equal",
                                             "ulapply",
                                             "seq_rows"
                                         ],
                        "R/mvgam_residcor-class.R":  [
                                                         "gather_matrix",
                                                         "cluster_cormat",
                                                         "reorder_clusters",
                                                         "plot.mvgam_residcor"
                                                     ]
                    }
}

{
    "s3_methods":  {
                       "is":  [
                                  "mvgam_trend"
                              ]
                   },
    "functions":  [
                      "validate_nonlinear_trend_compatibility",
                      "apply_validation_rules",
                      "process_trend_validation_rules",
                      "dispatch_validation_rule",
                      "get_validation_rule_dispatch_table",
                      "validate_trend_grouping",
                      "validate_trend_correlation",
                      "validate_trend_time_intervals",
                      "validate_trend_factor_compatibility",
                      "validate_trend_hierarchical_structure",
                      "validate_factor_compatibility",
                      "validate_grouping_arguments",
                      "validate_correlation_requirements",
                      "validate_time_variable",
                      "validate_series_variable",
                      "validate_regular_time_intervals",
                      "deparse0",
                      "handle_nse_param",
                      "is_nonlinear_formula",
                      "validate_brms_formula",
                      "formula2str_mvgam",
                      "get_trend_validation_patterns",
                      "validate_obs_formula_brms",
                      "validate_trend_formula_brms",
                      "validate_bf_trend_formula",
                      "extract_all_bf_formulas",
                      "validate_list_trend_formula",
                      "validate_single_trend_formula",
                      "check_brms_autocor_usage",
                      "validate_no_brms_autocor_in_trends",
                      "validate_no_addition_terms_in_trends",
                      "validate_no_multiple_trend_constructors",
                      "validate_no_offsets_in_trends",
                      "validate_offsets_in_obs",
                      "validate_multivariate_trend_constraints",
                      "validate_autocor_separation",
                      "validate_setup_components",
                      "validate_time_series_for_trends",
                      "is.mvgam_trend",
                      "validate_trend_components",
                      "extract_time_series_dimensions",
                      "generate_obs_trend_mapping",
                      "warn_default_time_variable",
                      "warn_default_series_variable",
                      "validate_mvgam_trend",
                      "validate_proportional",
                      "validate_pos_integer",
                      "validate_pos_real",
                      "eval_silent",
                      "is_try_error",
                      "is_multivariate_trend_specs",
                      "validate_factor_levels",
                      "validate_stan_code_structure",
                      "are_braces_balanced",
                      "validate_stan_code_fragment",
                      "validate_combined_stancode",
                      "validate_data_code_compatibility",
                      "check_semicolon_syntax",
                      "check_block_semicolons",
                      "validate_stan_code",
                      "validate_stan_data_structure",
                      "is_valid_stanvar",
                      "validate_trend_specs",
                      "validate_and_process_trend_parameters",
                      "process_lag_parameters",
                      "process_capacity_parameter",
                      "validate_no_factor_hierarchical",
                      "parse_base_formula_safe",
                      "remove_trend_expressions",
                      "is_trend_term",
                      "validate_trend_parameter_class",
                      "validate_trend_parameter_bounds",
                      "validate_series_time",
                      "all_times_avail",
                      "as_one_logical",
                      "validate_grouping_structure"
                  ],
    "purpose":  "Input validation and checks",
    "function_dependencies":  {

                              },
    "function_signatures":  {
                                "check_brms_autocor_usage":  "check_brms_autocor_usage \u003c- function(formula_str) {",
                                "validate_mvgam_trend":  "validate_mvgam_trend \u003c- function(trend_obj) {",
                                "is_trend_term":  "is_trend_term \u003c- function(expr, trend_patterns) {",
                                "validate_stan_data_structure":  "validate_stan_data_structure \u003c- function(stan_data) {",
                                "validate_data_code_compatibility":  "validate_data_code_compatibility \u003c- function(stan_code, stan_data) {",
                                "is.mvgam_trend":  "is.mvgam_trend \u003c- function(x) {",
                                "validate_and_process_trend_parameters":  "validate_and_process_trend_parameters \u003c- function(trend_spec, data) {",
                                "validate_multivariate_trend_constraints":  "validate_multivariate_trend_constraints \u003c- function(trend_formula, response_name) {",
                                "validate_pos_real":  "validate_pos_real \u003c- function(x, name = deparse(substitute(x))) {",
                                "validate_obs_formula_brms":  "validate_obs_formula_brms \u003c- function(formula) {",
                                "process_lag_parameters":  "process_lag_parameters \u003c- function(p, trend_type) {",
                                "remove_trend_expressions":  "remove_trend_expressions \u003c- function(expr, trend_patterns, depth = 0) {",
                                "validate_pos_integer":  "validate_pos_integer \u003c- function(x, name = deparse(substitute(x))) {",
                                "validate_bf_trend_formula":  "validate_bf_trend_formula \u003c- function(bf_obj) {",
                                "eval_silent":  "eval_silent \u003c- function( expr, type = \"output\", try = FALSE, silent = TRUE, ... ) {",
                                "as_one_logical":  "as_one_logical = function(x, allow_na = FALSE) {",
                                "is_multivariate_trend_specs":  "is_multivariate_trend_specs \u003c- function(trend_specs) {",
                                "handle_nse_param":  "handle_nse_param \u003c- function(expr) {",
                                "deparse0":  "deparse0 \u003c- function(expr, ...) {",
                                "validate_single_trend_formula":  "validate_single_trend_formula \u003c- function(formula, context = NULL, allow_response = FALSE) {",
                                "validate_nonlinear_trend_compatibility":  "validate_nonlinear_trend_compatibility \u003c- function(nl_components, trend_specs) {",
                                "warn_default_time_variable":  "warn_default_time_variable \u003c- function() {",
                                "validate_factor_compatibility":  "validate_factor_compatibility \u003c- function(trend_spec) {",
                                "validate_list_trend_formula":  "validate_list_trend_formula \u003c- function(formula_list) {",
                                "validate_no_offsets_in_trends":  "validate_no_offsets_in_trends \u003c- function(formula) {",
                                "validate_proportional":  "validate_proportional \u003c- function(x, name = deparse(substitute(x))) {",
                                "is_nonlinear_formula":  "is_nonlinear_formula \u003c- function(formula) {",
                                "validate_trend_time_intervals":  "validate_trend_time_intervals \u003c- function(trend_spec, data) {",
                                "validate_grouping_structure":  "validate_grouping_structure = function(data, trend_model, name = \u0027data\u0027) {",
                                "validate_no_factor_hierarchical":  "validate_no_factor_hierarchical \u003c- function(trend_specs, n_series, trend_name) {",
                                "validate_stan_code_fragment":  "validate_stan_code_fragment \u003c- function(fragment, expected_content = NULL, expected_block = NULL) {",
                                "get_trend_validation_patterns":  "get_trend_validation_patterns \u003c- function() {",
                                "all_times_avail":  "all_times_avail = function(time, min_time, max_time) {",
                                "extract_time_series_dimensions":  "extract_time_series_dimensions \u003c- function(data, time_var = \"time\", series_var = \"series\", trend_type = NULL, trend_specs = NULL, response_vars = NULL) {",
                                "validate_trend_hierarchical_structure":  "validate_trend_hierarchical_structure \u003c- function(trend_spec, data) {",
                                "are_braces_balanced":  "are_braces_balanced \u003c- function(stan_code) {",
                                "validate_trend_parameter_class":  "validate_trend_parameter_class \u003c- function(class) {",
                                "generate_obs_trend_mapping":  "generate_obs_trend_mapping \u003c- function(data, response_var, time_var = \"time\", series_var = \"series\", dimensions = NULL) {",
                                "validate_grouping_arguments":  "validate_grouping_arguments \u003c- function(gr, subgr) {",
                                "is_valid_stanvar":  "is_valid_stanvar \u003c- function(stanvar) {",
                                "validate_trend_grouping":  "validate_trend_grouping \u003c- function(trend_spec, data) {",
                                "validate_trend_parameter_bounds":  "validate_trend_parameter_bounds \u003c- function(class, lb, ub) {",
                                "validate_combined_stancode":  "validate_combined_stancode \u003c- function(result, silent = FALSE) {",
                                "validate_stan_code":  "validate_stan_code \u003c- function(stan_code, backend = \"rstan\", silent = TRUE, ...) {",
                                "warn_default_series_variable":  "warn_default_series_variable \u003c- function() {",
                                "validate_correlation_requirements":  "validate_correlation_requirements \u003c- function(gr, cor) {",
                                "validate_trend_specs":  "validate_trend_specs \u003c- function(trend_specs) {",
                                "parse_base_formula_safe":  "parse_base_formula_safe \u003c- function(trend_formula, trend_terms) {",
                                "dispatch_validation_rule":  "dispatch_validation_rule \u003c- function(rule, trend_spec, data) {",
                                "validate_series_time":  "validate_series_time = function( data, name = \u0027data\u0027, trend_model, check_levels = TRUE, check_times = TRUE ) {",
                                "validate_series_variable":  "validate_series_variable \u003c- function(series_var) {",
                                "validate_offsets_in_obs":  "validate_offsets_in_obs \u003c- function(formula) {",
                                "validate_no_addition_terms_in_trends":  "validate_no_addition_terms_in_trends \u003c- function(formula_str) {",
                                "get_validation_rule_dispatch_table":  "get_validation_rule_dispatch_table \u003c- function() {",
                                "validate_no_brms_autocor_in_trends":  "validate_no_brms_autocor_in_trends \u003c- function(formula_str) {",
                                "process_capacity_parameter":  "process_capacity_parameter \u003c- function(cap, data) {",
                                "extract_all_bf_formulas":  "extract_all_bf_formulas \u003c- function(bf_obj) {",
                                "check_block_semicolons":  "check_block_semicolons \u003c- function(block_content) {",
                                "validate_regular_time_intervals":  "validate_regular_time_intervals \u003c- function(time_values, time_var = \"time\") {",
                                "is_try_error":  "is_try_error \u003c- function(x) {",
                                "validate_stan_code_structure":  "validate_stan_code_structure \u003c- function(stan_code) {",
                                "validate_autocor_separation":  "validate_autocor_separation \u003c- function(obs_formula, trend_formula = NULL) {",
                                "validate_time_variable":  "validate_time_variable \u003c- function(time_var) {",
                                "validate_trend_factor_compatibility":  "validate_trend_factor_compatibility \u003c- function(trend_spec, data) {",
                                "validate_brms_formula":  "validate_brms_formula \u003c- function(formula) {",
                                "process_trend_validation_rules":  "process_trend_validation_rules \u003c- function(trend_spec, data) {",
                                "check_semicolon_syntax":  "check_semicolon_syntax \u003c- function(stan_code) {",
                                "formula2str_mvgam":  "formula2str_mvgam \u003c- function(formula, space = \"trim\") {",
                                "validate_trend_correlation":  "validate_trend_correlation \u003c- function(trend_spec, data) {",
                                "apply_validation_rules":  "apply_validation_rules \u003c- function(trend_specs, data) {",
                                "validate_setup_components":  "validate_setup_components \u003c- function(components) {",
                                "validate_trend_components":  "validate_trend_components \u003c- function(trend_components) {",
                                "validate_no_multiple_trend_constructors":  "validate_no_multiple_trend_constructors \u003c- function(formula_str) {",
                                "validate_factor_levels":  "validate_factor_levels \u003c- function(data, var_name, data_name = \"data\", auto_drop = FALSE) {",
                                "validate_time_series_for_trends":  "validate_time_series_for_trends \u003c- function(data, trend_specs, silent = 1, response_vars = NULL) {",
                                "validate_trend_formula_brms":  "validate_trend_formula_brms \u003c- function(trend_formula) {"
                            },
    "file":  "R/validations.R"
}

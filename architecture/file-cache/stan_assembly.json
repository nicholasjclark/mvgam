{
    "s3_methods":  {

                   },
    "functions":  [
                      "apply_response_suffix_to_stanvars",
                      "apply_suffix_to_name",
                      "apply_suffix_to_stan_code",
                      "generate_combined_stancode",
                      "generate_base_stancode_with_stanvars",
                      "prepare_mvgam_stancode",
                      "prepare_stan_data",
                      "extract_code_block",
                      "find_matching_brace",
                      "prepare_stanvars_for_brms",
                      "extract_trend_stanvars_from_setup",
                      "inject_trend_into_linear_predictor",
                      "generate_trend_injection_code",
                      "inject_multivariate_trends_into_linear_predictors",
                      "assemble_mvgam_stan_code",
                      "assemble_mvgam_stan_data",
                      "generate_base_brms_stancode",
                      "generate_base_brms_standata",
                      "append_if_not_null",
                      "combine_stanvars",
                      "generate_shared_innovation_stanvars",
                      "generate_innovation_model",
                      "extract_hierarchical_info",
                      "generate_common_trend_data",
                      "generate_matrix_z_parameters",
                      "generate_matrix_z_tdata",
                      "generate_matrix_z_multiblock_stanvars",
                      "generate_factor_model",
                      "generate_trend_computation_tparameters",
                      "generate_hierarchical_functions",
                      "generate_hierarchical_correlation_parameters",
                      "generate_hierarchical_correlation_model",
                      "generate_trend_specific_stanvars",
                      "generate_rw_trend_stanvars",
                      "generate_trend_priors_stanvar",
                      "generate_ar_trend_stanvars",
                      "generate_var_trend_stanvars",
                      "calculate_car_time_distances",
                      "generate_car_trend_stanvars",
                      "generate_zmvn_trend_stanvars",
                      "generate_pw_trend_stanvars",
                      "parse_model_rstan",
                      "parse_model_cmdstanr",
                      "parse_data_declarations",
                      "extract_and_rename_trend_parameters",
                      "is_multivariate_brmsfit",
                      "extract_response_names_from_brmsfit",
                      "extract_and_rename_stan_blocks",
                      "extract_non_likelihood_from_model_block",
                      "extract_stan_block",
                      "extract_stan_block_content",
                      "rename_parameters_in_block",
                      "get_stan_reserved_words",
                      "extract_stan_identifiers",
                      "filter_renameable_identifiers",
                      "apply_safe_parameter_replacement",
                      "rename_univariate_parameters",
                      "rename_multivariate_parameters",
                      "extract_and_rename_standata_objects",
                      "extract_univariate_standata",
                      "extract_multivariate_standata",
                      "generate_times_trend_matrices",
                      "create_times_trend_matrix",
                      "generate_stan_array_declaration",
                      "format_matrix_for_stan_array"
                  ],
    "purpose":  "Stan model integration",
    "function_dependencies":  {

                              },
    "function_signatures":  {
                                "extract_and_rename_standata_objects":  "extract_and_rename_standata_objects \u003c- function(standata, suffix, mapping, is_multivariate, response_names) {",
                                "generate_trend_specific_stanvars":  "generate_trend_specific_stanvars \u003c- function(trend_specs, data_info, response_suffix = \"\", prior = NULL) {",
                                "generate_var_trend_stanvars":  "generate_var_trend_stanvars \u003c- function(trend_specs, data_info, prior = NULL) {",
                                "calculate_car_time_distances":  "calculate_car_time_distances \u003c- function(data_info) {",
                                "generate_trend_injection_code":  "generate_trend_injection_code \u003c- function(mapping_arrays) {",
                                "generate_pw_trend_stanvars":  "generate_pw_trend_stanvars \u003c- function(trend_specs, data_info, growth = NULL, prior = NULL) {",
                                "generate_times_trend_matrices":  "generate_times_trend_matrices \u003c- function(n_time, n_series, unique_times, unique_series, is_multivariate, response_names) {",
                                "generate_matrix_z_tdata":  "generate_matrix_z_tdata \u003c- function(is_factor_model, n_lv, n_series) {",
                                "extract_hierarchical_info":  "extract_hierarchical_info \u003c- function(data_info, trend_specs) {",
                                "format_matrix_for_stan_array":  "format_matrix_for_stan_array \u003c- function(matrix) {",
                                "generate_common_trend_data":  "generate_common_trend_data \u003c- function(n_obs, n_series, n_lv = NULL, is_factor_model = NULL) {",
                                "extract_non_likelihood_from_model_block":  "extract_non_likelihood_from_model_block \u003c- function(model_block) {",
                                "prepare_mvgam_stancode":  "prepare_mvgam_stancode \u003c- function(obs_setup, trend_setup, trend_specs, data = NULL, backend = \"rstan\", validate = TRUE, silent = 1) {",
                                "generate_hierarchical_correlation_model":  "generate_hierarchical_correlation_model \u003c- function(n_groups) {",
                                "generate_trend_computation_tparameters":  "generate_trend_computation_tparameters \u003c- function(n_lv, n_series) {",
                                "extract_code_block":  "extract_code_block \u003c- function(code_lines, block_name) {",
                                "extract_multivariate_standata":  "extract_multivariate_standata \u003c- function(standata, suffix, mapping, response_names) {",
                                "generate_factor_model":  "generate_factor_model \u003c- function(is_factor_model, n_lv) {",
                                "extract_and_rename_trend_parameters":  "extract_and_rename_trend_parameters \u003c- function(trend_setup, dimensions, suffix = \"_trend\") {",
                                "extract_trend_stanvars_from_setup":  "extract_trend_stanvars_from_setup \u003c- function(trend_setup, trend_specs, response_suffix = \"\", response_name = NULL) {",
                                "inject_trend_into_linear_predictor":  "inject_trend_into_linear_predictor \u003c- function(base_stancode, trend_stanvars) {",
                                "generate_stan_array_declaration":  "generate_stan_array_declaration \u003c- function(var_name, var_type, dimensions, data_matrix) {",
                                "extract_stan_block_content":  "extract_stan_block_content \u003c- function(stancode, block_name) {",
                                "generate_combined_stancode":  "generate_combined_stancode \u003c- function(obs_setup, trend_setup = NULL, trend_specs = NULL, prior = NULL, backend = \"rstan\", validate = TRUE, silent = 1) {",
                                "rename_parameters_in_block":  "rename_parameters_in_block \u003c- function(block_code, suffix, mapping, block_type, is_multivariate, response_names) {",
                                "extract_and_rename_stan_blocks":  "extract_and_rename_stan_blocks \u003c- function(stancode, suffix, mapping, is_multivariate, response_names) {",
                                "prepare_stanvars_for_brms":  "prepare_stanvars_for_brms \u003c- function(stanvars) {",
                                "generate_base_stancode_with_stanvars":  "generate_base_stancode_with_stanvars \u003c- function(obs_setup, trend_stanvars, backend = \"rstan\", silent = 1) {",
                                "assemble_mvgam_stan_code":  "assemble_mvgam_stan_code \u003c- function(obs_formula, trend_stanvars = NULL, data, family = gaussian(), backend = \"rstan\", validate = TRUE) {",
                                "generate_matrix_z_multiblock_stanvars":  "generate_matrix_z_multiblock_stanvars \u003c- function(is_factor_model, n_lv, n_series) {",
                                "generate_base_brms_stancode":  "generate_base_brms_stancode \u003c- function(formula, data, family = gaussian(), stanvars = NULL, backend = \"rstan\") {",
                                "generate_car_trend_stanvars":  "generate_car_trend_stanvars \u003c- function(trend_specs, data_info, prior = NULL) {",
                                "get_stan_reserved_words":  "get_stan_reserved_words \u003c- function() {",
                                "is_multivariate_brmsfit":  "is_multivariate_brmsfit \u003c- function(brmsfit) {",
                                "rename_univariate_parameters":  "rename_univariate_parameters \u003c- function(code, suffix, mapping) {",
                                "rename_multivariate_parameters":  "rename_multivariate_parameters \u003c- function(code, suffix, mapping, response_names) {",
                                "find_matching_brace":  "find_matching_brace \u003c- function(code_lines, start_line) {",
                                "append_if_not_null":  "append_if_not_null \u003c- function(components, new_component) {",
                                "parse_model_rstan":  "parse_model_rstan \u003c- function(model, silent = 1, ...) {",
                                "extract_stan_block":  "extract_stan_block \u003c- function(stancode, block_name) {",
                                "apply_safe_parameter_replacement":  "apply_safe_parameter_replacement \u003c- function(code, old_name, new_name) {",
                                "create_times_trend_matrix":  "create_times_trend_matrix \u003c- function(n_time, n_series, unique_times, unique_series, matrix_name) {",
                                "apply_suffix_to_stan_code":  "apply_suffix_to_stan_code \u003c- function(stan_code, patterns, suffix) {",
                                "filter_renameable_identifiers":  "filter_renameable_identifiers \u003c- function(identifiers) {",
                                "generate_hierarchical_correlation_parameters":  "generate_hierarchical_correlation_parameters \u003c- function(n_groups, n_subgroups) {",
                                "extract_response_names_from_brmsfit":  "extract_response_names_from_brmsfit \u003c- function(brmsfit) {",
                                "extract_univariate_standata":  "extract_univariate_standata \u003c- function(standata, suffix, mapping) {",
                                "generate_rw_trend_stanvars":  "generate_rw_trend_stanvars \u003c- function(trend_specs, data_info, prior = NULL) {",
                                "parse_data_declarations":  "parse_data_declarations \u003c- function(data_block) {",
                                "combine_stanvars":  "combine_stanvars \u003c- function(...) {",
                                "parse_model_cmdstanr":  "parse_model_cmdstanr \u003c- function(model, silent = 1, ...) {",
                                "generate_matrix_z_parameters":  "generate_matrix_z_parameters \u003c- function(is_factor_model, n_lv, n_series) {",
                                "extract_stan_identifiers":  "extract_stan_identifiers \u003c- function(stan_code) {",
                                "generate_base_brms_standata":  "generate_base_brms_standata \u003c- function(formula, data, family = gaussian(), stanvars = NULL) {",
                                "generate_zmvn_trend_stanvars":  "generate_zmvn_trend_stanvars \u003c- function(trend_specs, data_info, prior = NULL) {",
                                "apply_suffix_to_name":  "apply_suffix_to_name \u003c- function(name, patterns, suffix) {",
                                "generate_trend_priors_stanvar":  "generate_trend_priors_stanvar \u003c- function(param_names, prior = NULL, stanvar_name = \"trend_priors\") {",
                                "generate_ar_trend_stanvars":  "generate_ar_trend_stanvars \u003c- function(trend_specs, data_info, prior = NULL) {",
                                "assemble_mvgam_stan_data":  "assemble_mvgam_stan_data \u003c- function(obs_formula, trend_stanvars = NULL, data, family = gaussian()) {",
                                "prepare_stan_data":  "prepare_stan_data \u003c- function(data, variable_info) {",
                                "generate_hierarchical_functions":  "generate_hierarchical_functions \u003c- function() {",
                                "generate_shared_innovation_stanvars":  "generate_shared_innovation_stanvars \u003c- function(n_lv, n_series, cor = FALSE, factor_model = FALSE, hierarchical_info = NULL) {",
                                "apply_response_suffix_to_stanvars":  "apply_response_suffix_to_stanvars \u003c- function(stanvars, response_suffix) {",
                                "inject_multivariate_trends_into_linear_predictors":  "inject_multivariate_trends_into_linear_predictors \u003c- function( base_stancode, trend_stanvars, responses_with_trends ) {",
                                "generate_innovation_model":  "generate_innovation_model \u003c- function(effective_dim, cor = FALSE, is_hierarchical = FALSE, prior = NULL) {"
                            },
    "file":  "R/stan_assembly.R"
}
